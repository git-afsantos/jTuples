package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    java.lang.Object var8 = var6.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + (-1L)+ "'", var8.equals((-1L)));

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var0.fourth();
    java.lang.Object var6 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    org.jtuples.Quadruple var10 = var6.invert();
    java.lang.Object[] var11 = var10.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    java.lang.Object var45 = var0.fourth();
    int var46 = var0.arity();
    java.lang.Object[] var47 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Quadruple var11 = var8.shiftLeft((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    org.jtuples.Sextuple var8 = var2.invert();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    int var17 = var16.arity();
    org.jtuples.Quadruple var18 = var16.invert();
    java.lang.Object var19 = var16.fourth();
    org.jtuples.Quadruple var20 = var16.invert();
    org.jtuples.Quadruple var21 = var20.shiftRight();
    org.jtuples.Quintuple var23 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var24 = var23.shiftLeft();
    org.jtuples.Pair var26 = new org.jtuples.Pair((java.lang.Object)var24, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    java.lang.Object[] var43 = var41.toArray();
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)var9, (java.lang.Object)var21, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var43);
    java.lang.Object var45 = var44.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + (-1.0f)+ "'", var45.equals((-1.0f)));

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object var4 = var3.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var45.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Nonuple var4 = var3.invert();
    java.lang.Object var5 = var3.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object var1 = var0.second();
    java.lang.Object var2 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    java.lang.Object var97 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    int var89 = var38.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 9);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    java.lang.Object var4 = var3.sixth();
    java.lang.Object var5 = var3.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object var10 = var6.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    org.jtuples.Septuple var7 = var5.shiftRight();
    org.jtuples.Septuple var8 = var5.invert();
    org.jtuples.Septuple var9 = var8.shiftLeft();
    int var10 = var9.arity();
    org.jtuples.Decuple var11 = var4.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var4.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    java.lang.Object var89 = var88.sixth();
    java.lang.Object var90 = var88.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + 100+ "'", var90.equals(100));

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    int var15 = var2.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 7);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    java.lang.Object var16 = var15.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object[] var10 = var6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftLeft();
    java.lang.Object var98 = var97.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftLeft();
    java.lang.Object[] var5 = var0.toArray();
    java.lang.Object var6 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    int var8 = var2.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 6);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var95.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    java.lang.Object var26 = var24.first();
    int var27 = var24.arity();
    java.lang.Object var28 = var24.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    java.lang.Object var97 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    java.lang.Object var4 = var3.first();
    java.lang.Object var5 = var3.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    java.lang.Object[] var34 = var24.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    int var2 = var0.arity();
    java.lang.Object[] var3 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    java.lang.Object var45 = var0.fourth();
    int var46 = var0.arity();
    java.lang.Object var47 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    java.lang.Object var13 = var12.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftLeft();
    org.jtuples.Octuple var98 = var0.shiftRight();
    java.lang.Object var99 = var98.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    java.lang.Object var4 = var0.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    java.util.List var8 = var6.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    org.jtuples.Pair var57 = var54.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    int var10 = var8.arity();
    org.jtuples.Quadruple var11 = var8.shiftLeft();
    org.jtuples.Quadruple var12 = var8.shiftRight();
    int var13 = var12.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    org.jtuples.Septuple var34 = var12.invert();
    java.lang.Object var35 = var34.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    java.lang.Object var4 = var0.seventh();
    java.lang.Object var5 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var3 = var0.first();
    org.jtuples.Nonuple var4 = var0.invert();
    int var5 = var4.arity();
    java.lang.String var6 = var4.toString();
    java.lang.Object var7 = var4.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    java.lang.Object var15 = var2.seventh();
    java.lang.Object var16 = var2.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    org.jtuples.Septuple var7 = var5.shiftRight();
    org.jtuples.Septuple var8 = var5.invert();
    org.jtuples.Septuple var9 = var8.shiftLeft();
    int var10 = var9.arity();
    org.jtuples.Decuple var11 = var4.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var11.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.fifth();
    java.lang.Object var94 = var83.second();
    java.lang.Object[] var95 = var83.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    java.util.List var15 = var11.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    java.lang.Object var62 = var61.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Quintuple var3 = var1.shiftRight((java.lang.Object)'4');
    java.lang.Object var4 = var3.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + '4'+ "'", var4.equals('4'));

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Pair var96 = new org.jtuples.Pair();
    java.lang.Object var97 = var96.second();
    org.jtuples.Quintuple var98 = var85.shiftLeft((java.lang.Object)var96);
    java.lang.Object var99 = var96.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    int var7 = var4.arity();
    java.lang.Object var8 = var4.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    java.lang.Object var15 = var14.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    java.lang.Object var4 = var3.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    java.lang.Object var8 = var2.second();
    org.jtuples.Pair var9 = var2.invert();
    org.jtuples.Quintuple var10 = var0.shiftRight((java.lang.Object)var9);
    java.lang.Object var11 = var10.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.shiftRight();
    java.lang.String var27 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "((null, null, null, null, null, null, null), (((100, null, null, null, null, null, null, null, null), null, null, null, null, null, null, null, null), null, null, null, null, null), (null, null))"+ "'", var27.equals("((null, null, null, null, null, null, null), (((100, null, null, null, null, null, null, null, null), null, null, null, null, null, null, null, null), null, null, null, null, null), (null, null))"));

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    int var10 = var6.arity();
    java.lang.Object var11 = var6.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var45 = var0.invert();
    org.jtuples.Quintuple var47 = var0.shiftLeft((java.lang.Object)(-1L));
    int var48 = var0.arity();
    org.jtuples.Pair var50 = new org.jtuples.Pair();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    java.lang.String var53 = var52.toString();
    org.jtuples.Sextuple var54 = var52.invert();
    org.jtuples.Quadruple var55 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var50, (java.lang.Object)var51, (java.lang.Object)var52);
    java.lang.Object var56 = var51.sixth();
    java.lang.Object var57 = var51.fifth();
    org.jtuples.Sextuple var58 = var51.shiftRight();
    org.jtuples.Quintuple var59 = var0.shiftLeft((java.lang.Object)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(null, null, null, null, null, null)"+ "'", var53.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.fifth();
    org.jtuples.Quintuple var95 = var83.shiftLeft((java.lang.Object)(byte)(-1));
    java.lang.Object[] var96 = var95.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Pair var7 = var1.shiftLeft();
    org.jtuples.Pair var8 = var1.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object var1 = var0.sixth();
    java.lang.Object var2 = var0.seventh();
    org.jtuples.Nonuple var3 = var0.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Nonuple var89 = var85.shiftRight();
    java.lang.Object var90 = var85.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var3 = var0.first();
    org.jtuples.Nonuple var4 = var0.invert();
    int var5 = var4.arity();
    java.lang.String var6 = var4.toString();
    java.lang.Object var7 = var4.fourth();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Sextuple var24 = var23.shiftRight();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    java.lang.Object[] var26 = var25.toArray();
    org.jtuples.Pair var27 = var25.invert();
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Septuple var30 = var28.shiftRight();
    java.lang.Object var31 = var30.sixth();
    org.jtuples.Triple var32 = new org.jtuples.Triple((java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var30);
    java.lang.Object var33 = var32.first();
    org.jtuples.Nonuple var34 = var4.shiftRight((java.lang.Object)var32);
    java.lang.Object var35 = var34.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var2 = var0.invert();
    org.jtuples.Octuple var3 = new org.jtuples.Octuple();
    java.lang.Object var4 = var3.seventh();
    org.jtuples.Pair var7 = new org.jtuples.Pair();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var9 = new org.jtuples.Sextuple();
    java.lang.String var10 = var9.toString();
    org.jtuples.Sextuple var11 = var9.invert();
    org.jtuples.Quadruple var12 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var7, (java.lang.Object)var8, (java.lang.Object)var9);
    org.jtuples.Pair var14 = new org.jtuples.Pair();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Quadruple var19 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var14, (java.lang.Object)var15, (java.lang.Object)var16);
    java.lang.Object var20 = var16.third();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var26 = var24.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var27 = var21.shiftRight((java.lang.Object)var26);
    org.jtuples.Sextuple var28 = var16.shiftLeft((java.lang.Object)var27);
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    org.jtuples.Sextuple var45 = new org.jtuples.Sextuple();
    java.lang.String var46 = var45.toString();
    org.jtuples.Sextuple var47 = var45.invert();
    org.jtuples.Nonuple var48 = new org.jtuples.Nonuple();
    int var49 = var48.arity();
    java.lang.Object var50 = var48.third();
    int var51 = var48.arity();
    org.jtuples.Pair var54 = new org.jtuples.Pair();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var56 = new org.jtuples.Sextuple();
    java.lang.String var57 = var56.toString();
    org.jtuples.Sextuple var58 = var56.invert();
    org.jtuples.Quadruple var59 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var54, (java.lang.Object)var55, (java.lang.Object)var56);
    java.lang.Object var60 = var56.third();
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var66 = var64.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var67 = var61.shiftRight((java.lang.Object)var66);
    org.jtuples.Sextuple var68 = var56.shiftLeft((java.lang.Object)var67);
    org.jtuples.Sextuple var69 = var68.shiftRight();
    org.jtuples.Quintuple var70 = new org.jtuples.Quintuple((java.lang.Object)var43, (java.lang.Object)var47, (java.lang.Object)var51, (java.lang.Object)'#', (java.lang.Object)var69);
    org.jtuples.Pair var72 = new org.jtuples.Pair();
    org.jtuples.Sextuple var73 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var74 = new org.jtuples.Sextuple();
    java.lang.String var75 = var74.toString();
    org.jtuples.Sextuple var76 = var74.invert();
    org.jtuples.Quadruple var77 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var72, (java.lang.Object)var73, (java.lang.Object)var74);
    java.lang.Object var78 = var74.third();
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var84 = var82.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var85 = var79.shiftRight((java.lang.Object)var84);
    org.jtuples.Sextuple var86 = var74.shiftLeft((java.lang.Object)var85);
    org.jtuples.Quintuple var87 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var88 = var87.shiftLeft();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple();
    java.lang.Object[] var91 = var90.toArray();
    org.jtuples.Nonuple var93 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var43, (java.lang.Object)var85, (java.lang.Object)var88, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var90, (java.lang.Object)100);
    org.jtuples.Sextuple var94 = new org.jtuples.Sextuple();
    java.lang.String var95 = var94.toString();
    org.jtuples.Sextuple var96 = var94.invert();
    org.jtuples.Quintuple var97 = var88.shiftRight((java.lang.Object)var94);
    org.jtuples.Octuple var98 = var3.shiftLeft((java.lang.Object)var88);
    org.jtuples.Pair var99 = var0.shiftLeft((java.lang.Object)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(null, null, null, null, null, null)"+ "'", var10.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(null, null, null, null, null, null)"+ "'", var46.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(null, null, null, null, null, null)"+ "'", var57.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(null, null, null, null, null, null)"+ "'", var75.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "(null, null, null, null, null, null)"+ "'", var95.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.sixth();
    java.lang.Object var52 = var43.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    int var2 = var0.arity();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.sixth();
    java.lang.Object var11 = var2.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    int var13 = var8.arity();
    org.jtuples.Quadruple var14 = var8.shiftLeft();
    int var15 = var8.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 4);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    int var10 = var8.arity();
    org.jtuples.Quadruple var11 = var8.shiftLeft();
    org.jtuples.Quadruple var12 = var8.shiftRight();
    org.jtuples.Pair var14 = new org.jtuples.Pair();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Quadruple var19 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var14, (java.lang.Object)var15, (java.lang.Object)var16);
    int var20 = var19.arity();
    org.jtuples.Quadruple var21 = var19.invert();
    java.lang.Object[] var22 = var21.toArray();
    org.jtuples.Pair var24 = new org.jtuples.Pair();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    java.lang.String var27 = var26.toString();
    org.jtuples.Sextuple var28 = var26.invert();
    org.jtuples.Quadruple var29 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var26);
    java.lang.Object var30 = var26.third();
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var33 = var31.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = var31.shiftRight((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = var26.shiftLeft((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var38.shiftRight();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    java.lang.Object[] var41 = var40.toArray();
    org.jtuples.Pair var42 = var40.invert();
    org.jtuples.Septuple var43 = new org.jtuples.Septuple();
    java.lang.Object var44 = var43.fifth();
    org.jtuples.Septuple var45 = var43.shiftRight();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Triple var47 = new org.jtuples.Triple((java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var45);
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    int var55 = var54.arity();
    org.jtuples.Quadruple var56 = var54.invert();
    java.lang.Object[] var57 = var56.toArray();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    java.lang.Object var59 = var58.third();
    org.jtuples.Quadruple var60 = var56.shiftRight((java.lang.Object)var58);
    int var61 = var56.arity();
    org.jtuples.Quadruple var62 = var56.shiftLeft();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    java.lang.Object var70 = var64.second();
    org.jtuples.Pair var71 = var64.invert();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var72.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var75 = var72.invert();
    java.lang.Object[] var76 = var75.toArray();
    int var77 = var75.arity();
    org.jtuples.Nonuple var78 = var75.shiftLeft();
    java.lang.Object[] var79 = var75.toArray();
    org.jtuples.Pair var80 = var71.shiftLeft((java.lang.Object)var75);
    org.jtuples.Quintuple var81 = new org.jtuples.Quintuple((java.lang.Object)var12, (java.lang.Object)var21, (java.lang.Object)var40, (java.lang.Object)var56, (java.lang.Object)var71);
    org.jtuples.Quadruple var83 = var56.shiftLeft((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(null, null, null, null, null, null)"+ "'", var27.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object[] var3 = var0.toArray();
    java.lang.Object var4 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftLeft();
    java.lang.Object var98 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var3.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var6 = var0.shiftRight((java.lang.Object)var5);
    java.lang.Object var7 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    int var13 = var2.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 7);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    java.lang.Object var6 = var3.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object[] var12 = var11.toArray();
    java.lang.Object var13 = var11.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    org.jtuples.Septuple var4 = var3.shiftLeft();
    java.lang.Object var5 = var4.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    org.jtuples.Nonuple var1 = new org.jtuples.Nonuple();
    int var2 = var1.arity();
    java.lang.Object var3 = var1.third();
    int var4 = var1.arity();
    org.jtuples.Pair var7 = new org.jtuples.Pair();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var9 = new org.jtuples.Sextuple();
    java.lang.String var10 = var9.toString();
    org.jtuples.Sextuple var11 = var9.invert();
    org.jtuples.Quadruple var12 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var7, (java.lang.Object)var8, (java.lang.Object)var9);
    int var13 = var12.arity();
    org.jtuples.Quadruple var14 = var12.invert();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var18.sixth();
    java.lang.Object var24 = var18.fifth();
    org.jtuples.Sextuple var25 = var18.shiftRight();
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    java.lang.Object[] var43 = var41.toArray();
    org.jtuples.Decuple var44 = new org.jtuples.Decuple();
    java.lang.Object var45 = var44.ninth();
    org.jtuples.Decuple var46 = new org.jtuples.Decuple();
    java.lang.Object var47 = var46.sixth();
    org.jtuples.Nonuple var48 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var49 = var48.shiftLeft();
    org.jtuples.Decuple var51 = new org.jtuples.Decuple((java.lang.Object)var4, (java.lang.Object)(byte)1, (java.lang.Object)var15, (java.lang.Object)var18, (java.lang.Object)true, (java.lang.Object)var43, (java.lang.Object)var44, (java.lang.Object)var46, (java.lang.Object)var48, (java.lang.Object)9);
    java.lang.Object var52 = var44.seventh();
    org.jtuples.Pair var53 = new org.jtuples.Pair((java.lang.Object)(byte)0, (java.lang.Object)var44);
    org.jtuples.Pair var54 = var53.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(null, null, null, null, null, null)"+ "'", var10.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    int var10 = var8.arity();
    org.jtuples.Quadruple var11 = var8.shiftLeft();
    org.jtuples.Quadruple var12 = var8.shiftRight();
    org.jtuples.Pair var14 = new org.jtuples.Pair();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Quadruple var19 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var14, (java.lang.Object)var15, (java.lang.Object)var16);
    int var20 = var19.arity();
    org.jtuples.Quadruple var21 = var19.invert();
    java.lang.Object[] var22 = var21.toArray();
    org.jtuples.Pair var24 = new org.jtuples.Pair();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    java.lang.String var27 = var26.toString();
    org.jtuples.Sextuple var28 = var26.invert();
    org.jtuples.Quadruple var29 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var26);
    java.lang.Object var30 = var26.third();
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var33 = var31.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = var31.shiftRight((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = var26.shiftLeft((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var38.shiftRight();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    java.lang.Object[] var41 = var40.toArray();
    org.jtuples.Pair var42 = var40.invert();
    org.jtuples.Septuple var43 = new org.jtuples.Septuple();
    java.lang.Object var44 = var43.fifth();
    org.jtuples.Septuple var45 = var43.shiftRight();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Triple var47 = new org.jtuples.Triple((java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var45);
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    int var55 = var54.arity();
    org.jtuples.Quadruple var56 = var54.invert();
    java.lang.Object[] var57 = var56.toArray();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    java.lang.Object var59 = var58.third();
    org.jtuples.Quadruple var60 = var56.shiftRight((java.lang.Object)var58);
    int var61 = var56.arity();
    org.jtuples.Quadruple var62 = var56.shiftLeft();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    java.lang.Object var70 = var64.second();
    org.jtuples.Pair var71 = var64.invert();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var72.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var75 = var72.invert();
    java.lang.Object[] var76 = var75.toArray();
    int var77 = var75.arity();
    org.jtuples.Nonuple var78 = var75.shiftLeft();
    java.lang.Object[] var79 = var75.toArray();
    org.jtuples.Pair var80 = var71.shiftLeft((java.lang.Object)var75);
    org.jtuples.Quintuple var81 = new org.jtuples.Quintuple((java.lang.Object)var12, (java.lang.Object)var21, (java.lang.Object)var40, (java.lang.Object)var56, (java.lang.Object)var71);
    int var82 = var21.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(null, null, null, null, null, null)"+ "'", var27.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 4);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    org.jtuples.Pair var34 = var24.shiftLeft();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    int var36 = var35.arity();
    java.lang.Object var37 = var35.third();
    org.jtuples.Nonuple var38 = var35.shiftRight();
    org.jtuples.Pair var39 = var24.shiftRight((java.lang.Object)var38);
    java.lang.Object var40 = var38.eighth();
    java.lang.Object[] var41 = var38.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    int var26 = var24.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    org.jtuples.Septuple var13 = var12.invert();
    org.jtuples.Nonuple var14 = new org.jtuples.Nonuple();
    int var15 = var14.arity();
    java.lang.Object var16 = var14.third();
    int var17 = var14.arity();
    org.jtuples.Pair var20 = new org.jtuples.Pair();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var22 = new org.jtuples.Sextuple();
    java.lang.String var23 = var22.toString();
    org.jtuples.Sextuple var24 = var22.invert();
    org.jtuples.Quadruple var25 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var20, (java.lang.Object)var21, (java.lang.Object)var22);
    int var26 = var25.arity();
    org.jtuples.Quadruple var27 = var25.invert();
    java.lang.Object[] var28 = var27.toArray();
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var31.sixth();
    java.lang.Object var37 = var31.fifth();
    org.jtuples.Sextuple var38 = var31.shiftRight();
    org.jtuples.Pair var41 = new org.jtuples.Pair();
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    java.lang.String var44 = var43.toString();
    org.jtuples.Sextuple var45 = var43.invert();
    org.jtuples.Quadruple var46 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var41, (java.lang.Object)var42, (java.lang.Object)var43);
    java.lang.Object var47 = var43.third();
    org.jtuples.Nonuple var48 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var50 = var48.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var51 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var53 = var51.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var54 = var48.shiftRight((java.lang.Object)var53);
    org.jtuples.Sextuple var55 = var43.shiftLeft((java.lang.Object)var54);
    java.lang.Object[] var56 = var54.toArray();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple();
    java.lang.Object var58 = var57.ninth();
    org.jtuples.Decuple var59 = new org.jtuples.Decuple();
    java.lang.Object var60 = var59.sixth();
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var61.shiftLeft();
    org.jtuples.Decuple var64 = new org.jtuples.Decuple((java.lang.Object)var17, (java.lang.Object)(byte)1, (java.lang.Object)var28, (java.lang.Object)var31, (java.lang.Object)true, (java.lang.Object)var56, (java.lang.Object)var57, (java.lang.Object)var59, (java.lang.Object)var61, (java.lang.Object)9);
    org.jtuples.Pair var66 = new org.jtuples.Pair();
    org.jtuples.Sextuple var67 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    java.lang.String var69 = var68.toString();
    org.jtuples.Sextuple var70 = var68.invert();
    org.jtuples.Quadruple var71 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var66, (java.lang.Object)var67, (java.lang.Object)var68);
    org.jtuples.Pair var72 = var66.shiftLeft();
    org.jtuples.Decuple var73 = var59.shiftRight((java.lang.Object)var72);
    org.jtuples.Septuple var74 = var12.shiftRight((java.lang.Object)var73);
    int var75 = var74.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(null, null, null, null, null, null)"+ "'", var23.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(null, null, null, null, null, null)"+ "'", var44.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(null, null, null, null, null, null)"+ "'", var69.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 7);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    org.jtuples.Septuple var33 = var0.shiftLeft();
    java.lang.Object var34 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    org.jtuples.Decuple var12 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    org.jtuples.Decuple var12 = var11.invert();
    java.lang.Object var13 = var12.tenth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    java.lang.Object[] var17 = var16.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.fifth();
    org.jtuples.Quintuple var95 = var83.shiftLeft((java.lang.Object)(byte)(-1));
    java.lang.Object var96 = var83.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object var3 = var2.first();
    java.lang.Object var4 = var2.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.shiftRight();
    java.lang.Object var27 = var24.third();
    java.lang.Object var28 = var24.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.seventh();
    java.lang.Object var52 = var43.fifth();
    org.jtuples.Decuple var53 = var43.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var11.seventh();
    java.lang.Object var13 = var11.second();
    java.lang.Object var14 = var11.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var45 = var44.shiftLeft();
    org.jtuples.Quintuple var46 = var44.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.shiftRight();
    org.jtuples.Triple var28 = var24.shiftLeft((java.lang.Object)100);
    org.jtuples.Triple var29 = var28.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object[] var2 = var1.toArray();
    org.jtuples.Octuple var3 = var1.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    org.jtuples.Pair var63 = new org.jtuples.Pair();
    org.jtuples.Sextuple var64 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    java.lang.String var66 = var65.toString();
    org.jtuples.Sextuple var67 = var65.invert();
    org.jtuples.Quadruple var68 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var63, (java.lang.Object)var64, (java.lang.Object)var65);
    java.lang.Object var69 = var65.third();
    org.jtuples.Nonuple var70 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var72 = var70.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var73 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var75 = var73.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var76 = var70.shiftRight((java.lang.Object)var75);
    org.jtuples.Sextuple var77 = var65.shiftLeft((java.lang.Object)var76);
    org.jtuples.Sextuple var78 = var77.shiftRight();
    org.jtuples.Pair var79 = new org.jtuples.Pair();
    java.lang.Object[] var80 = var79.toArray();
    org.jtuples.Pair var81 = var79.invert();
    org.jtuples.Septuple var82 = new org.jtuples.Septuple();
    java.lang.Object var83 = var82.fifth();
    org.jtuples.Septuple var84 = var82.shiftRight();
    java.lang.Object var85 = var84.sixth();
    org.jtuples.Triple var86 = new org.jtuples.Triple((java.lang.Object)var78, (java.lang.Object)var79, (java.lang.Object)var84);
    org.jtuples.Decuple var87 = var61.shiftLeft((java.lang.Object)var79);
    java.lang.Object var88 = var61.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(null, null, null, null, null, null)"+ "'", var66.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.second();
    org.jtuples.Quintuple var94 = var83.invert();
    java.lang.Object[] var95 = var94.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var95.invert();
    java.lang.Object var97 = var95.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.shiftLeft();
    java.lang.Object[] var7 = var3.toArray();
    java.lang.Object var8 = var3.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var18.shiftRight();
    java.lang.Object[] var43 = var42.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Octuple var10 = var9.shiftRight();
    java.lang.Object var11 = var10.third();
    org.jtuples.Sextuple var12 = var2.shiftRight((java.lang.Object)var10);
    java.lang.Object var13 = var2.second();
    int var14 = var2.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 6);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.shiftRight();
    java.lang.Object var27 = var24.third();
    org.jtuples.Triple var29 = var24.shiftLeft((java.lang.Object)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    java.lang.Object var95 = var85.second();
    org.jtuples.Quintuple var96 = var85.invert();
    org.jtuples.Octuple var97 = var1.shiftLeft((java.lang.Object)var85);
    java.lang.Object var98 = var97.first();
    org.jtuples.Octuple var99 = var97.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    int var8 = var7.arity();
    org.jtuples.Quadruple var9 = var7.invert();
    org.jtuples.Septuple var10 = new org.jtuples.Septuple();
    java.lang.Object var11 = var10.fifth();
    java.lang.Object var12 = var10.fifth();
    java.lang.Object var13 = var10.sixth();
    java.lang.Object var14 = var10.seventh();
    java.lang.Object var15 = var10.fifth();
    org.jtuples.Quadruple var16 = var9.shiftRight((java.lang.Object)var10);
    org.jtuples.Quintuple var17 = var0.shiftRight((java.lang.Object)var16);
    java.lang.Object var18 = var17.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var6.sixth();
    org.jtuples.Sextuple var12 = var6.invert();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Pair var15 = new org.jtuples.Pair();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    java.lang.String var18 = var17.toString();
    org.jtuples.Sextuple var19 = var17.invert();
    org.jtuples.Quadruple var20 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var15, (java.lang.Object)var16, (java.lang.Object)var17);
    int var21 = var20.arity();
    org.jtuples.Quadruple var22 = var20.invert();
    java.lang.Object var23 = var20.fourth();
    org.jtuples.Quadruple var24 = var20.invert();
    org.jtuples.Quadruple var25 = var24.shiftRight();
    org.jtuples.Quintuple var27 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var28 = var27.shiftLeft();
    org.jtuples.Pair var30 = new org.jtuples.Pair((java.lang.Object)var28, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple((java.lang.Object)var6, (java.lang.Object)var13, (java.lang.Object)var25, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var47);
    java.lang.Object[] var49 = var25.toArray();
    org.jtuples.Nonuple var50 = var0.shiftLeft((java.lang.Object)var25);
    java.lang.Object var51 = var25.fourth();
    java.lang.Object var52 = var25.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(null, null, null, null, null, null)"+ "'", var18.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object[] var1 = var0.toArray();
    int var2 = var0.arity();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    java.lang.Object var19 = var15.third();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = var20.shiftRight((java.lang.Object)var25);
    org.jtuples.Sextuple var27 = var15.shiftLeft((java.lang.Object)var26);
    org.jtuples.Pair var29 = new org.jtuples.Pair();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    java.lang.String var32 = var31.toString();
    org.jtuples.Sextuple var33 = var31.invert();
    org.jtuples.Quadruple var34 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var29, (java.lang.Object)var30, (java.lang.Object)var31);
    java.lang.Object var35 = var31.third();
    org.jtuples.Nonuple var36 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var38 = var36.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = var36.shiftRight((java.lang.Object)var41);
    org.jtuples.Sextuple var43 = var31.shiftLeft((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple();
    java.lang.String var45 = var44.toString();
    org.jtuples.Sextuple var46 = var44.invert();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    int var48 = var47.arity();
    java.lang.Object var49 = var47.third();
    int var50 = var47.arity();
    org.jtuples.Pair var53 = new org.jtuples.Pair();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    java.lang.String var56 = var55.toString();
    org.jtuples.Sextuple var57 = var55.invert();
    org.jtuples.Quadruple var58 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var53, (java.lang.Object)var54, (java.lang.Object)var55);
    java.lang.Object var59 = var55.third();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var60.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var63 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var65 = var63.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var66 = var60.shiftRight((java.lang.Object)var65);
    org.jtuples.Sextuple var67 = var55.shiftLeft((java.lang.Object)var66);
    org.jtuples.Sextuple var68 = var67.shiftRight();
    org.jtuples.Quintuple var69 = new org.jtuples.Quintuple((java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)var50, (java.lang.Object)'#', (java.lang.Object)var68);
    org.jtuples.Pair var71 = new org.jtuples.Pair();
    org.jtuples.Sextuple var72 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var73 = new org.jtuples.Sextuple();
    java.lang.String var74 = var73.toString();
    org.jtuples.Sextuple var75 = var73.invert();
    org.jtuples.Quadruple var76 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var71, (java.lang.Object)var72, (java.lang.Object)var73);
    java.lang.Object var77 = var73.third();
    org.jtuples.Nonuple var78 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var80 = var78.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var81 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var83 = var81.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var84 = var78.shiftRight((java.lang.Object)var83);
    org.jtuples.Sextuple var85 = var73.shiftLeft((java.lang.Object)var84);
    org.jtuples.Quintuple var86 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var87 = var86.shiftLeft();
    org.jtuples.Nonuple var89 = new org.jtuples.Nonuple();
    java.lang.Object[] var90 = var89.toArray();
    org.jtuples.Nonuple var92 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var42, (java.lang.Object)var84, (java.lang.Object)var87, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var89, (java.lang.Object)100);
    org.jtuples.Sextuple var93 = new org.jtuples.Sextuple();
    java.lang.String var94 = var93.toString();
    org.jtuples.Sextuple var95 = var93.invert();
    org.jtuples.Quintuple var96 = var87.shiftRight((java.lang.Object)var93);
    org.jtuples.Pair var97 = var0.shiftLeft((java.lang.Object)var87);
    java.lang.Object var98 = var87.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(null, null, null, null, null, null)"+ "'", var32.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(null, null, null, null, null, null)"+ "'", var45.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(null, null, null, null, null, null)"+ "'", var74.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "(null, null, null, null, null, null)"+ "'", var94.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Quadruple var8 = var6.shiftRight((java.lang.Object)(-1.0f));
    org.jtuples.Decuple var9 = new org.jtuples.Decuple();
    java.lang.Object var10 = var9.ninth();
    java.lang.Object var11 = var9.first();
    java.lang.Object var12 = var9.fifth();
    java.lang.Object var13 = var9.sixth();
    java.lang.Object var14 = var9.sixth();
    org.jtuples.Nonuple var15 = new org.jtuples.Nonuple();
    int var16 = var15.arity();
    java.lang.Object var17 = var15.third();
    int var18 = var15.arity();
    org.jtuples.Nonuple var19 = var15.shiftLeft();
    org.jtuples.Decuple var20 = var9.shiftLeft((java.lang.Object)var19);
    org.jtuples.Quadruple var21 = var8.shiftLeft((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    java.lang.Object var33 = var26.first();
    int var34 = var26.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 4);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Sextuple var17 = var15.invert();
    java.lang.Object var18 = var15.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var2.fourth();
    java.lang.Object var4 = var2.second();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    org.jtuples.Septuple var7 = var5.shiftRight();
    java.lang.Object[] var8 = var5.toArray();
    org.jtuples.Sextuple var9 = var2.shiftRight((java.lang.Object)var5);
    java.lang.Object var10 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Nonuple var2 = var0.shiftLeft();
    java.lang.Object var3 = var2.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Octuple var10 = var9.shiftRight();
    java.lang.Object var11 = var10.third();
    org.jtuples.Sextuple var12 = var2.shiftRight((java.lang.Object)var10);
    java.lang.Object var13 = var2.second();
    java.lang.Object var14 = var2.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.fifth();
    int var3 = var0.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 10);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    org.jtuples.Pair var57 = var54.shiftRight();
    java.lang.Object var58 = var54.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object var43 = var18.second();
    java.lang.Object var44 = var18.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var41.fifth();
    java.lang.Object var43 = var41.second();
    java.lang.Object[] var44 = var41.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    java.lang.Object[] var62 = var61.toArray();
    java.lang.Object var63 = var61.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var45 = var44.shiftLeft();
    java.lang.Object[] var46 = var45.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    int var98 = var96.arity();
    java.lang.Object var99 = var96.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Pair var96 = new org.jtuples.Pair();
    java.lang.Object var97 = var96.second();
    org.jtuples.Quintuple var98 = var85.shiftLeft((java.lang.Object)var96);
    org.jtuples.Quintuple var99 = var85.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var3 = var0.first();
    org.jtuples.Nonuple var4 = var0.invert();
    int var5 = var4.arity();
    org.jtuples.Nonuple var6 = var4.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    int var7 = var4.arity();
    org.jtuples.Decuple var8 = var4.shiftRight();
    java.lang.Object var9 = var4.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    java.lang.Object[] var6 = var5.toArray();
    java.lang.Object[] var7 = var5.toArray();
    org.jtuples.Octuple var8 = var0.shiftRight((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Octuple var10 = var9.shiftRight();
    java.lang.Object var11 = var10.third();
    org.jtuples.Sextuple var12 = var2.shiftRight((java.lang.Object)var10);
    org.jtuples.Sextuple var13 = var12.invert();
    java.lang.Object[] var14 = var13.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    int var9 = var8.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    org.jtuples.Nonuple var1 = new org.jtuples.Nonuple();
    int var2 = var1.arity();
    java.lang.Object var3 = var1.third();
    int var4 = var1.arity();
    org.jtuples.Pair var7 = new org.jtuples.Pair();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var9 = new org.jtuples.Sextuple();
    java.lang.String var10 = var9.toString();
    org.jtuples.Sextuple var11 = var9.invert();
    org.jtuples.Quadruple var12 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var7, (java.lang.Object)var8, (java.lang.Object)var9);
    int var13 = var12.arity();
    org.jtuples.Quadruple var14 = var12.invert();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var18.sixth();
    java.lang.Object var24 = var18.fifth();
    org.jtuples.Sextuple var25 = var18.shiftRight();
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    java.lang.Object[] var43 = var41.toArray();
    org.jtuples.Decuple var44 = new org.jtuples.Decuple();
    java.lang.Object var45 = var44.ninth();
    org.jtuples.Decuple var46 = new org.jtuples.Decuple();
    java.lang.Object var47 = var46.sixth();
    org.jtuples.Nonuple var48 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var49 = var48.shiftLeft();
    org.jtuples.Decuple var51 = new org.jtuples.Decuple((java.lang.Object)var4, (java.lang.Object)(byte)1, (java.lang.Object)var15, (java.lang.Object)var18, (java.lang.Object)true, (java.lang.Object)var43, (java.lang.Object)var44, (java.lang.Object)var46, (java.lang.Object)var48, (java.lang.Object)9);
    java.lang.Object var52 = var44.seventh();
    org.jtuples.Pair var53 = new org.jtuples.Pair((java.lang.Object)(byte)0, (java.lang.Object)var44);
    java.lang.Object[] var54 = var53.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(null, null, null, null, null, null)"+ "'", var10.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.sixth();
    org.jtuples.Decuple var2 = var0.shiftRight();
    java.lang.Object var3 = var2.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Pair var3 = new org.jtuples.Pair((java.lang.Object)var1, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var4 = var3.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    java.lang.Object var45 = var44.fifth();
    org.jtuples.Quintuple var46 = var44.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var0.fourth();
    java.lang.Object var6 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Octuple var10 = var9.shiftRight();
    java.lang.Object var11 = var10.third();
    org.jtuples.Sextuple var12 = var2.shiftRight((java.lang.Object)var10);
    org.jtuples.Sextuple var13 = var12.invert();
    java.lang.Object var14 = var12.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    java.lang.Object var34 = var12.sixth();
    java.lang.Object var35 = var12.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    org.jtuples.Septuple var4 = var3.shiftLeft();
    org.jtuples.Septuple var5 = var4.invert();
    java.lang.Object[] var6 = var5.toArray();
    org.jtuples.Septuple var7 = var5.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    org.jtuples.Septuple var10 = var9.shiftRight();
    java.lang.Object var11 = var10.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + (-1L)+ "'", var11.equals((-1L)));

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.sixth();
    java.lang.Object var52 = var43.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    org.jtuples.Septuple var1 = var0.shiftLeft();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.third();
    org.jtuples.Septuple var4 = var0.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.second();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var6.sixth();
    org.jtuples.Decuple var12 = var0.shiftRight((java.lang.Object)var6);
    java.lang.Object var13 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftRight();
    org.jtuples.Septuple var5 = var4.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    int var98 = var96.arity();
    java.lang.Object var99 = var96.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    org.jtuples.Septuple var10 = var9.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object var43 = var18.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Octuple var6 = new org.jtuples.Octuple();
    org.jtuples.Octuple var7 = var6.shiftRight();
    org.jtuples.Octuple var8 = var6.invert();
    org.jtuples.Nonuple var9 = var3.shiftLeft((java.lang.Object)var6);
    java.lang.Object var10 = var6.second();
    org.jtuples.Octuple var11 = var6.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    int var4 = var0.arity();
    java.lang.Object var5 = var0.third();
    java.lang.Object var6 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var26 = var24.shiftLeft();
    java.lang.Object var27 = var26.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.fifth();
    java.lang.Object[] var94 = var83.toArray();
    java.lang.Object var95 = var83.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Nonuple var89 = var85.shiftRight();
    java.lang.Object var90 = var85.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = var50.invert();
    java.lang.Object var53 = var50.sixth();
    java.lang.Object var54 = var50.second();
    java.lang.Object var55 = var50.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + (byte)1+ "'", var54.equals((byte)1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var6.sixth();
    org.jtuples.Sextuple var12 = var6.invert();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Pair var15 = new org.jtuples.Pair();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    java.lang.String var18 = var17.toString();
    org.jtuples.Sextuple var19 = var17.invert();
    org.jtuples.Quadruple var20 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var15, (java.lang.Object)var16, (java.lang.Object)var17);
    int var21 = var20.arity();
    org.jtuples.Quadruple var22 = var20.invert();
    java.lang.Object var23 = var20.fourth();
    org.jtuples.Quadruple var24 = var20.invert();
    org.jtuples.Quadruple var25 = var24.shiftRight();
    org.jtuples.Quintuple var27 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var28 = var27.shiftLeft();
    org.jtuples.Pair var30 = new org.jtuples.Pair((java.lang.Object)var28, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple((java.lang.Object)var6, (java.lang.Object)var13, (java.lang.Object)var25, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var47);
    java.lang.Object[] var49 = var25.toArray();
    org.jtuples.Nonuple var50 = var0.shiftLeft((java.lang.Object)var25);
    java.lang.Object var51 = var0.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(null, null, null, null, null, null)"+ "'", var18.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Octuple var10 = var9.shiftRight();
    java.lang.Object var11 = var10.third();
    org.jtuples.Sextuple var12 = var2.shiftRight((java.lang.Object)var10);
    java.lang.Object var13 = var10.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.invert();
    java.lang.Object var27 = var24.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    int var7 = var4.arity();
    org.jtuples.Decuple var8 = var4.shiftRight();
    java.lang.Object var9 = var8.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    org.jtuples.Pair var34 = var24.shiftLeft();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    int var36 = var35.arity();
    java.lang.Object var37 = var35.third();
    org.jtuples.Nonuple var38 = var35.shiftRight();
    org.jtuples.Pair var39 = var24.shiftRight((java.lang.Object)var38);
    org.jtuples.Nonuple var40 = var38.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    java.lang.Object[] var12 = var6.toArray();
    org.jtuples.Octuple var13 = var0.shiftRight((java.lang.Object)var12);
    java.lang.Object var14 = var0.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    java.lang.Object var60 = var58.second();
    java.lang.Object var61 = var58.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Quadruple var8 = var6.shiftRight((java.lang.Object)(-1.0f));
    java.lang.Object var9 = var8.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1.0f)+ "'", var9.equals((-1.0f)));

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var6.sixth();
    org.jtuples.Sextuple var12 = var6.invert();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Pair var15 = new org.jtuples.Pair();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    java.lang.String var18 = var17.toString();
    org.jtuples.Sextuple var19 = var17.invert();
    org.jtuples.Quadruple var20 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var15, (java.lang.Object)var16, (java.lang.Object)var17);
    int var21 = var20.arity();
    org.jtuples.Quadruple var22 = var20.invert();
    java.lang.Object var23 = var20.fourth();
    org.jtuples.Quadruple var24 = var20.invert();
    org.jtuples.Quadruple var25 = var24.shiftRight();
    org.jtuples.Quintuple var27 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var28 = var27.shiftLeft();
    org.jtuples.Pair var30 = new org.jtuples.Pair((java.lang.Object)var28, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple((java.lang.Object)var6, (java.lang.Object)var13, (java.lang.Object)var25, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var47);
    java.lang.Object[] var49 = var25.toArray();
    org.jtuples.Nonuple var50 = var0.shiftLeft((java.lang.Object)var25);
    org.jtuples.Nonuple var51 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(null, null, null, null, null, null)"+ "'", var18.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    int var10 = var6.arity();
    int var11 = var6.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    java.lang.Object var19 = var15.third();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = var20.shiftRight((java.lang.Object)var25);
    org.jtuples.Sextuple var27 = var15.shiftLeft((java.lang.Object)var26);
    org.jtuples.Sextuple var28 = var27.shiftRight();
    org.jtuples.Pair var29 = new org.jtuples.Pair();
    java.lang.Object[] var30 = var29.toArray();
    org.jtuples.Pair var31 = var29.invert();
    org.jtuples.Septuple var32 = new org.jtuples.Septuple();
    java.lang.Object var33 = var32.fifth();
    org.jtuples.Septuple var34 = var32.shiftRight();
    java.lang.Object var35 = var34.sixth();
    org.jtuples.Triple var36 = new org.jtuples.Triple((java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var34);
    org.jtuples.Triple var37 = var36.invert();
    org.jtuples.Quadruple var38 = var6.shiftLeft((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.fourth();
    java.lang.Object[] var2 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    org.jtuples.Pair var34 = var24.shiftLeft();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    int var36 = var35.arity();
    java.lang.Object var37 = var35.third();
    org.jtuples.Nonuple var38 = var35.shiftRight();
    org.jtuples.Pair var39 = var24.shiftRight((java.lang.Object)var38);
    java.lang.Object var40 = var38.eighth();
    java.lang.Object var41 = var38.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    int var4 = var0.arity();
    java.lang.Object var5 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    java.lang.Object var4 = var0.seventh();
    java.lang.Object var5 = var0.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    int var10 = var6.arity();
    int var11 = var6.arity();
    java.lang.Object var12 = var6.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.shiftRight();
    org.jtuples.Triple var28 = var24.shiftLeft((java.lang.Object)100);
    org.jtuples.Octuple var29 = new org.jtuples.Octuple();
    java.lang.Object var30 = var29.seventh();
    java.lang.Object var31 = var29.seventh();
    java.lang.Object var32 = var29.second();
    java.lang.Object var33 = var29.third();
    org.jtuples.Octuple var34 = var29.invert();
    java.lang.Object[] var35 = var34.toArray();
    org.jtuples.Octuple var36 = new org.jtuples.Octuple();
    java.lang.Object var37 = var36.sixth();
    org.jtuples.Decuple var38 = new org.jtuples.Decuple();
    java.lang.Object var39 = var38.ninth();
    java.lang.Object var40 = var38.first();
    java.lang.Object var41 = var38.seventh();
    org.jtuples.Decuple var42 = var38.shiftLeft();
    java.lang.Object var43 = var42.second();
    org.jtuples.Quadruple var44 = new org.jtuples.Quadruple((java.lang.Object)100, (java.lang.Object)var34, (java.lang.Object)var36, (java.lang.Object)var42);
    java.lang.Object var45 = var36.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var12 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var17.second();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Pair var43 = var17.shiftLeft((java.lang.Object)var41);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    int var45 = var44.arity();
    java.lang.Object var46 = var44.third();
    int var47 = var44.arity();
    org.jtuples.Pair var50 = new org.jtuples.Pair();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    java.lang.String var53 = var52.toString();
    org.jtuples.Sextuple var54 = var52.invert();
    org.jtuples.Quadruple var55 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var50, (java.lang.Object)var51, (java.lang.Object)var52);
    int var56 = var55.arity();
    org.jtuples.Quadruple var57 = var55.invert();
    java.lang.Object[] var58 = var57.toArray();
    org.jtuples.Pair var60 = new org.jtuples.Pair();
    org.jtuples.Sextuple var61 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var62 = new org.jtuples.Sextuple();
    java.lang.String var63 = var62.toString();
    org.jtuples.Sextuple var64 = var62.invert();
    org.jtuples.Quadruple var65 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var60, (java.lang.Object)var61, (java.lang.Object)var62);
    java.lang.Object var66 = var61.sixth();
    java.lang.Object var67 = var61.fifth();
    org.jtuples.Sextuple var68 = var61.shiftRight();
    org.jtuples.Pair var71 = new org.jtuples.Pair();
    org.jtuples.Sextuple var72 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var73 = new org.jtuples.Sextuple();
    java.lang.String var74 = var73.toString();
    org.jtuples.Sextuple var75 = var73.invert();
    org.jtuples.Quadruple var76 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var71, (java.lang.Object)var72, (java.lang.Object)var73);
    java.lang.Object var77 = var73.third();
    org.jtuples.Nonuple var78 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var80 = var78.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var81 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var83 = var81.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var84 = var78.shiftRight((java.lang.Object)var83);
    org.jtuples.Sextuple var85 = var73.shiftLeft((java.lang.Object)var84);
    java.lang.Object[] var86 = var84.toArray();
    org.jtuples.Decuple var87 = new org.jtuples.Decuple();
    java.lang.Object var88 = var87.ninth();
    org.jtuples.Decuple var89 = new org.jtuples.Decuple();
    java.lang.Object var90 = var89.sixth();
    org.jtuples.Nonuple var91 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var92 = var91.shiftLeft();
    org.jtuples.Decuple var94 = new org.jtuples.Decuple((java.lang.Object)var47, (java.lang.Object)(byte)1, (java.lang.Object)var58, (java.lang.Object)var61, (java.lang.Object)true, (java.lang.Object)var86, (java.lang.Object)var87, (java.lang.Object)var89, (java.lang.Object)var91, (java.lang.Object)9);
    org.jtuples.Pair var95 = var43.shiftRight((java.lang.Object)var58);
    java.lang.Object var96 = var43.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(null, null, null, null, null, null)"+ "'", var53.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(null, null, null, null, null, null)"+ "'", var63.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(null, null, null, null, null, null)"+ "'", var74.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.seventh();
    java.lang.Object var52 = var43.fifth();
    int var53 = var43.arity();
    java.lang.Object var54 = var43.ninth();
    org.jtuples.Decuple var55 = var43.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    java.lang.Object var95 = var85.second();
    org.jtuples.Quintuple var96 = var85.invert();
    org.jtuples.Octuple var97 = var1.shiftLeft((java.lang.Object)var85);
    java.lang.Object var98 = var97.first();
    java.lang.Object[] var99 = var97.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object[] var3 = var0.toArray();
    java.lang.Object var4 = var0.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    int var4 = var0.arity();
    java.lang.Object var5 = var0.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    org.jtuples.Triple var0 = new org.jtuples.Triple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    java.lang.Object var8 = var4.third();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = var9.shiftRight((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var4.shiftLeft((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var16.shiftRight();
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    java.lang.Object[] var19 = var18.toArray();
    org.jtuples.Pair var20 = var18.invert();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple();
    java.lang.Object var22 = var21.fifth();
    org.jtuples.Septuple var23 = var21.shiftRight();
    java.lang.Object var24 = var23.sixth();
    org.jtuples.Triple var25 = new org.jtuples.Triple((java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var23);
    java.lang.Object var26 = var25.second();
    org.jtuples.Triple var27 = var0.shiftRight((java.lang.Object)var25);
    org.jtuples.Nonuple var28 = new org.jtuples.Nonuple();
    int var29 = var28.arity();
    java.lang.Object var30 = var28.third();
    int var31 = var28.arity();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    int var40 = var39.arity();
    org.jtuples.Quadruple var41 = var39.invert();
    java.lang.Object[] var42 = var41.toArray();
    org.jtuples.Pair var44 = new org.jtuples.Pair();
    org.jtuples.Sextuple var45 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple();
    java.lang.String var47 = var46.toString();
    org.jtuples.Sextuple var48 = var46.invert();
    org.jtuples.Quadruple var49 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var44, (java.lang.Object)var45, (java.lang.Object)var46);
    java.lang.Object var50 = var45.sixth();
    java.lang.Object var51 = var45.fifth();
    org.jtuples.Sextuple var52 = var45.shiftRight();
    org.jtuples.Pair var55 = new org.jtuples.Pair();
    org.jtuples.Sextuple var56 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var57 = new org.jtuples.Sextuple();
    java.lang.String var58 = var57.toString();
    org.jtuples.Sextuple var59 = var57.invert();
    org.jtuples.Quadruple var60 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var55, (java.lang.Object)var56, (java.lang.Object)var57);
    java.lang.Object var61 = var57.third();
    org.jtuples.Nonuple var62 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var64 = var62.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var65 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var67 = var65.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var68 = var62.shiftRight((java.lang.Object)var67);
    org.jtuples.Sextuple var69 = var57.shiftLeft((java.lang.Object)var68);
    java.lang.Object[] var70 = var68.toArray();
    org.jtuples.Decuple var71 = new org.jtuples.Decuple();
    java.lang.Object var72 = var71.ninth();
    org.jtuples.Decuple var73 = new org.jtuples.Decuple();
    java.lang.Object var74 = var73.sixth();
    org.jtuples.Nonuple var75 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var75.shiftLeft();
    org.jtuples.Decuple var78 = new org.jtuples.Decuple((java.lang.Object)var31, (java.lang.Object)(byte)1, (java.lang.Object)var42, (java.lang.Object)var45, (java.lang.Object)true, (java.lang.Object)var70, (java.lang.Object)var71, (java.lang.Object)var73, (java.lang.Object)var75, (java.lang.Object)9);
    java.lang.Object var79 = var78.ninth();
    org.jtuples.Decuple var80 = var78.invert();
    java.lang.Object[] var81 = var80.toArray();
    org.jtuples.Triple var82 = var0.shiftLeft((java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(null, null, null, null, null, null)"+ "'", var47.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(null, null, null, null, null, null)"+ "'", var58.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    java.lang.Object[] var12 = var6.toArray();
    org.jtuples.Octuple var13 = var0.shiftRight((java.lang.Object)var12);
    java.lang.Object var14 = var13.second();
    org.jtuples.Octuple var15 = var13.shiftRight();
    org.jtuples.Octuple var16 = var13.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Nonuple var89 = var85.shiftRight();
    int var90 = var89.arity();
    java.lang.Object var91 = var89.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    java.lang.Object var26 = var24.first();
    int var27 = var24.arity();
    org.jtuples.Triple var28 = var24.invert();
    java.lang.Object[] var29 = var24.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Quintuple var47 = var1.shiftLeft((java.lang.Object)var46);
    int var48 = var1.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 5);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var28 = var24.toArray();
    org.jtuples.Triple var29 = var24.invert();
    org.jtuples.Nonuple var30 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var32 = var30.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var33 = var30.first();
    org.jtuples.Nonuple var34 = var30.invert();
    int var35 = var34.arity();
    java.lang.String var36 = var34.toString();
    java.lang.Object var37 = var34.fourth();
    org.jtuples.Pair var39 = new org.jtuples.Pair();
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var41 = new org.jtuples.Sextuple();
    java.lang.String var42 = var41.toString();
    org.jtuples.Sextuple var43 = var41.invert();
    org.jtuples.Quadruple var44 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var41);
    java.lang.Object var45 = var41.third();
    org.jtuples.Nonuple var46 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var46.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var49 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var51 = var49.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var52 = var46.shiftRight((java.lang.Object)var51);
    org.jtuples.Sextuple var53 = var41.shiftLeft((java.lang.Object)var52);
    org.jtuples.Sextuple var54 = var53.shiftRight();
    org.jtuples.Pair var55 = new org.jtuples.Pair();
    java.lang.Object[] var56 = var55.toArray();
    org.jtuples.Pair var57 = var55.invert();
    org.jtuples.Septuple var58 = new org.jtuples.Septuple();
    java.lang.Object var59 = var58.fifth();
    org.jtuples.Septuple var60 = var58.shiftRight();
    java.lang.Object var61 = var60.sixth();
    org.jtuples.Triple var62 = new org.jtuples.Triple((java.lang.Object)var54, (java.lang.Object)var55, (java.lang.Object)var60);
    java.lang.Object var63 = var62.first();
    org.jtuples.Nonuple var64 = var34.shiftRight((java.lang.Object)var62);
    org.jtuples.Triple var65 = var29.shiftLeft((java.lang.Object)var62);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var68.sixth();
    java.lang.Object var74 = var68.third();
    org.jtuples.Octuple var75 = new org.jtuples.Octuple();
    org.jtuples.Octuple var76 = var75.shiftRight();
    java.lang.Object var77 = var76.third();
    org.jtuples.Sextuple var78 = var68.shiftRight((java.lang.Object)var76);
    org.jtuples.Triple var79 = var62.shiftLeft((java.lang.Object)var78);
    java.lang.Object var80 = var78.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var36.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(null, null, null, null, null, null)"+ "'", var42.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Nonuple var4 = var3.invert();
    java.lang.Object var5 = var3.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    org.jtuples.Octuple var98 = var96.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Quadruple var8 = var6.shiftRight((java.lang.Object)(-1.0f));
    org.jtuples.Pair var10 = new org.jtuples.Pair();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    java.lang.String var13 = var12.toString();
    org.jtuples.Sextuple var14 = var12.invert();
    org.jtuples.Quadruple var15 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var10, (java.lang.Object)var11, (java.lang.Object)var12);
    java.lang.Object var16 = var12.third();
    org.jtuples.Nonuple var17 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var19 = var17.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = var17.shiftRight((java.lang.Object)var22);
    org.jtuples.Sextuple var24 = var12.shiftLeft((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var24.shiftRight();
    org.jtuples.Pair var26 = new org.jtuples.Pair();
    java.lang.Object[] var27 = var26.toArray();
    org.jtuples.Pair var28 = var26.invert();
    org.jtuples.Septuple var29 = new org.jtuples.Septuple();
    java.lang.Object var30 = var29.fifth();
    org.jtuples.Septuple var31 = var29.shiftRight();
    java.lang.Object var32 = var31.sixth();
    org.jtuples.Triple var33 = new org.jtuples.Triple((java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var31);
    java.lang.Object var34 = var33.first();
    org.jtuples.Triple var35 = var33.shiftRight();
    java.lang.Object var36 = var33.third();
    org.jtuples.Quadruple var37 = var8.shiftLeft(var36);
    java.lang.Object[] var38 = var37.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(null, null, null, null, null, null)"+ "'", var13.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.ninth();
    int var7 = var4.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.util.List var7 = var3.asList();
    org.jtuples.Sextuple var8 = var3.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftLeft();
    org.jtuples.Octuple var98 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    java.lang.Object var91 = var90.eighth();
    org.jtuples.Septuple var92 = var0.shiftLeft((java.lang.Object)var90);
    java.lang.Object var93 = var90.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + 100+ "'", var93.equals(100));

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.fourth();
    java.lang.Object var4 = var0.third();
    java.lang.Object var5 = var0.second();
    java.lang.Object var6 = var0.seventh();
    java.lang.Object var7 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    int var8 = var7.arity();
    org.jtuples.Quadruple var9 = var7.invert();
    org.jtuples.Septuple var10 = new org.jtuples.Septuple();
    java.lang.Object var11 = var10.fifth();
    java.lang.Object var12 = var10.fifth();
    java.lang.Object var13 = var10.sixth();
    java.lang.Object var14 = var10.seventh();
    java.lang.Object var15 = var10.fifth();
    org.jtuples.Quadruple var16 = var9.shiftRight((java.lang.Object)var10);
    org.jtuples.Quintuple var17 = var0.shiftRight((java.lang.Object)var16);
    org.jtuples.Quintuple var18 = var17.shiftRight();
    java.lang.Object var19 = var18.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var45 = var0.invert();
    org.jtuples.Quintuple var47 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var48 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var11.seventh();
    java.lang.Object var13 = var11.second();
    java.lang.Object var14 = var11.tenth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var2 = var0.invert();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Pair var12 = new org.jtuples.Pair();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    org.jtuples.Sextuple var16 = var14.invert();
    org.jtuples.Quadruple var17 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var12, (java.lang.Object)var13, (java.lang.Object)var14);
    java.lang.Object var18 = var14.third();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var24 = var22.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var25 = var19.shiftRight((java.lang.Object)var24);
    org.jtuples.Sextuple var26 = var14.shiftLeft((java.lang.Object)var25);
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    java.lang.String var44 = var43.toString();
    org.jtuples.Sextuple var45 = var43.invert();
    org.jtuples.Nonuple var46 = new org.jtuples.Nonuple();
    int var47 = var46.arity();
    java.lang.Object var48 = var46.third();
    int var49 = var46.arity();
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    java.lang.Object var58 = var54.third();
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var64 = var62.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var65 = var59.shiftRight((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var54.shiftLeft((java.lang.Object)var65);
    org.jtuples.Sextuple var67 = var66.shiftRight();
    org.jtuples.Quintuple var68 = new org.jtuples.Quintuple((java.lang.Object)var41, (java.lang.Object)var45, (java.lang.Object)var49, (java.lang.Object)'#', (java.lang.Object)var67);
    org.jtuples.Pair var70 = new org.jtuples.Pair();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var72 = new org.jtuples.Sextuple();
    java.lang.String var73 = var72.toString();
    org.jtuples.Sextuple var74 = var72.invert();
    org.jtuples.Quadruple var75 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var70, (java.lang.Object)var71, (java.lang.Object)var72);
    java.lang.Object var76 = var72.third();
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var82 = var80.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var83 = var77.shiftRight((java.lang.Object)var82);
    org.jtuples.Sextuple var84 = var72.shiftLeft((java.lang.Object)var83);
    org.jtuples.Quintuple var85 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var86 = var85.shiftLeft();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple();
    java.lang.Object[] var89 = var88.toArray();
    org.jtuples.Nonuple var91 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var26, (java.lang.Object)var41, (java.lang.Object)var83, (java.lang.Object)var86, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var88, (java.lang.Object)100);
    org.jtuples.Pair var92 = var2.shiftLeft((java.lang.Object)var88);
    int var93 = var2.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(null, null, null, null, null, null)"+ "'", var44.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(null, null, null, null, null, null)"+ "'", var73.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 2);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    java.lang.Object[] var9 = var2.toArray();
    org.jtuples.Sextuple var10 = var2.shiftRight();
    java.lang.Object[] var11 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    org.jtuples.Septuple var4 = var3.shiftLeft();
    int var5 = var4.arity();
    java.lang.Object var6 = var4.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    java.lang.Object var98 = var96.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object var1 = var0.second();
    java.lang.Object[] var2 = var0.toArray();
    org.jtuples.Pair var3 = var0.shiftLeft();
    org.jtuples.Nonuple var4 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var4.shiftLeft();
    org.jtuples.Pair var6 = var0.shiftLeft((java.lang.Object)var5);
    java.lang.Object var7 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var11.seventh();
    java.lang.Object var13 = var11.second();
    java.lang.Object var14 = var11.third();
    java.lang.Object[] var15 = var11.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var0.third();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var7.third();
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var17 = var15.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var18 = var12.shiftRight((java.lang.Object)var17);
    org.jtuples.Sextuple var19 = var7.shiftLeft((java.lang.Object)var18);
    org.jtuples.Sextuple var20 = var19.shiftRight();
    org.jtuples.Pair var21 = new org.jtuples.Pair();
    java.lang.Object[] var22 = var21.toArray();
    org.jtuples.Pair var23 = var21.invert();
    org.jtuples.Septuple var24 = new org.jtuples.Septuple();
    java.lang.Object var25 = var24.fifth();
    org.jtuples.Septuple var26 = var24.shiftRight();
    java.lang.Object var27 = var26.sixth();
    org.jtuples.Triple var28 = new org.jtuples.Triple((java.lang.Object)var20, (java.lang.Object)var21, (java.lang.Object)var26);
    org.jtuples.Sextuple var29 = var20.shiftRight();
    org.jtuples.Sextuple var30 = var0.shiftRight((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Quintuple var3 = var1.shiftRight((java.lang.Object)'4');
    org.jtuples.Quintuple var4 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var5 = var4.shiftLeft();
    org.jtuples.Pair var7 = new org.jtuples.Pair((java.lang.Object)var5, (java.lang.Object)(-1.0f));
    java.util.List var8 = var7.asList();
    org.jtuples.Quintuple var9 = var1.shiftLeft((java.lang.Object)var8);
    org.jtuples.Quintuple var10 = var1.invert();
    int var11 = var1.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 5);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.sixth();
    org.jtuples.Octuple var2 = var0.shiftLeft();
    int var3 = var0.arity();
    java.lang.Object var4 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.util.List var7 = var3.asList();
    java.lang.Object var8 = var3.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Nonuple var4 = var3.invert();
    java.lang.Object var5 = var4.sixth();
    java.lang.Object var6 = var4.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Nonuple var4 = var3.invert();
    int var5 = var4.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var17.first();
    java.lang.Object var52 = var17.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    java.lang.Object var4 = var0.fifth();
    org.jtuples.Decuple var5 = var0.shiftLeft();
    java.lang.Object var6 = var5.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object[] var1 = var0.toArray();
    java.lang.Object var2 = var0.first();
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var3.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var6 = var3.first();
    org.jtuples.Nonuple var7 = var3.invert();
    int var8 = var7.arity();
    java.lang.String var9 = var7.toString();
    java.lang.Object var10 = var7.second();
    java.lang.Object var11 = var7.eighth();
    org.jtuples.Quintuple var12 = var0.shiftRight((java.lang.Object)var7);
    org.jtuples.Quintuple var13 = var0.invert();
    java.lang.Object var14 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftRight();
    java.lang.Object var5 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object var10 = var6.first();
    org.jtuples.Octuple var11 = new org.jtuples.Octuple();
    org.jtuples.Octuple var12 = var11.shiftRight();
    org.jtuples.Octuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = var6.shiftRight((java.lang.Object)var11);
    java.lang.Object var15 = var6.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (-1L)+ "'", var10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + (-1L)+ "'", var15.equals((-1L)));

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.shiftLeft();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    java.lang.Object var10 = var7.third();
    java.lang.Object var11 = var7.first();
    java.lang.Object var12 = var7.fifth();
    org.jtuples.Nonuple var13 = var3.shiftLeft((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    org.jtuples.Decuple var62 = var50.shiftRight();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    org.jtuples.Pair var70 = var64.shiftLeft();
    org.jtuples.Decuple var71 = var50.shiftLeft((java.lang.Object)var64);
    org.jtuples.Pair var73 = new org.jtuples.Pair();
    org.jtuples.Sextuple var74 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var75 = new org.jtuples.Sextuple();
    java.lang.String var76 = var75.toString();
    org.jtuples.Sextuple var77 = var75.invert();
    org.jtuples.Quadruple var78 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var73, (java.lang.Object)var74, (java.lang.Object)var75);
    org.jtuples.Septuple var79 = new org.jtuples.Septuple();
    java.lang.Object var80 = var79.fifth();
    java.lang.Object var81 = var79.fifth();
    java.lang.Object var82 = var79.second();
    org.jtuples.Septuple var83 = var79.shiftLeft();
    java.lang.Object var84 = var79.sixth();
    org.jtuples.Pair var85 = var73.shiftLeft((java.lang.Object)var79);
    org.jtuples.Pair var86 = var64.shiftRight((java.lang.Object)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(null, null, null, null, null, null)"+ "'", var76.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    int var26 = var24.arity();
    java.lang.Object var27 = var24.third();
    org.jtuples.Triple var28 = var24.invert();
    java.lang.Object[] var29 = var24.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    org.jtuples.Pair var60 = var58.invert();
    java.lang.Object var61 = var58.second();
    java.lang.Object var62 = var58.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    org.jtuples.Decuple var25 = new org.jtuples.Decuple();
    java.lang.Object var26 = var25.ninth();
    java.lang.Object var27 = var25.first();
    java.lang.Object var28 = var25.fifth();
    java.lang.Object var29 = var25.sixth();
    java.lang.Object var30 = var25.sixth();
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    int var32 = var31.arity();
    java.lang.Object var33 = var31.third();
    int var34 = var31.arity();
    org.jtuples.Nonuple var35 = var31.shiftLeft();
    org.jtuples.Decuple var36 = var25.shiftLeft((java.lang.Object)var35);
    org.jtuples.Decuple var37 = var36.invert();
    org.jtuples.Decuple var39 = var37.shiftRight((java.lang.Object)6);
    org.jtuples.Pair var40 = var17.shiftRight((java.lang.Object)var37);
    org.jtuples.Octuple var41 = new org.jtuples.Octuple();
    org.jtuples.Octuple var42 = var41.shiftRight();
    java.lang.Object var43 = var41.fifth();
    org.jtuples.Septuple var46 = new org.jtuples.Septuple();
    java.lang.Object var47 = var46.fifth();
    java.lang.Object var48 = var46.fifth();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var53 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var46, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var52);
    java.lang.Object var54 = var46.sixth();
    org.jtuples.Octuple var55 = var41.shiftLeft((java.lang.Object)var46);
    org.jtuples.Decuple var56 = var37.shiftLeft((java.lang.Object)var46);
    java.util.List var57 = var46.asList();
    java.lang.Object var58 = var46.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var11 = var2.shiftLeft();
    java.lang.Object var12 = var2.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object var4 = var3.seventh();
    org.jtuples.Nonuple var5 = var3.shiftLeft();
    java.lang.Object var6 = var3.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var95.first();
    java.lang.Object[] var97 = var95.toArray();
    java.lang.Object var98 = var95.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object[] var43 = var18.toArray();
    org.jtuples.Sextuple var44 = var18.invert();
    org.jtuples.Sextuple var45 = var18.shiftRight();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Nonuple var89 = var85.shiftRight();
    java.lang.Object var90 = var89.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var1.second();
    org.jtuples.Pair var8 = var1.invert();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var12 = var9.invert();
    java.lang.Object[] var13 = var12.toArray();
    int var14 = var12.arity();
    org.jtuples.Nonuple var15 = var12.shiftLeft();
    java.lang.Object[] var16 = var12.toArray();
    org.jtuples.Pair var17 = var8.shiftLeft((java.lang.Object)var12);
    int var18 = var12.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 9);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Octuple var5 = var0.invert();
    java.lang.Object var6 = var0.seventh();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Nonuple var11 = var7.shiftLeft();
    org.jtuples.Nonuple var12 = var11.invert();
    org.jtuples.Octuple var13 = var0.shiftRight((java.lang.Object)var11);
    int var14 = var0.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 8);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    org.jtuples.Triple var0 = new org.jtuples.Triple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    java.lang.Object var8 = var4.third();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = var9.shiftRight((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var4.shiftLeft((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var16.shiftRight();
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    java.lang.Object[] var19 = var18.toArray();
    org.jtuples.Pair var20 = var18.invert();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple();
    java.lang.Object var22 = var21.fifth();
    org.jtuples.Septuple var23 = var21.shiftRight();
    java.lang.Object var24 = var23.sixth();
    org.jtuples.Triple var25 = new org.jtuples.Triple((java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var23);
    java.lang.Object var26 = var25.second();
    org.jtuples.Triple var27 = var0.shiftRight((java.lang.Object)var25);
    org.jtuples.Triple var28 = var25.shiftRight();
    java.lang.Object var29 = var25.third();
    org.jtuples.Triple var30 = var25.invert();
    java.lang.Object var31 = var30.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    int var15 = var11.arity();
    java.lang.Object var16 = var11.third();
    java.lang.Object var17 = var11.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.third();
    java.lang.Object var2 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.seventh();
    java.lang.Object var52 = var43.fifth();
    int var53 = var43.arity();
    java.lang.Object var54 = var43.ninth();
    java.lang.Object var55 = var43.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object[] var7 = var1.toArray();
    org.jtuples.Pair var8 = var1.shiftRight();
    java.lang.Object var9 = var8.first();
    org.jtuples.Pair var10 = var8.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object[] var1 = var0.toArray();
    java.lang.Object var2 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var12 = var11.third();
    java.lang.Object var13 = var11.eighth();
    java.lang.Object var14 = var11.first();
    java.lang.Object var15 = var11.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Nonuple var4 = var3.invert();
    java.lang.Object var5 = var4.sixth();
    java.lang.String var6 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null, null, null, null)"));

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.fifth();
    org.jtuples.Quintuple var95 = var83.shiftLeft((java.lang.Object)(byte)(-1));
    java.lang.Object var96 = var95.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var0.third();
    org.jtuples.Sextuple var5 = var0.shiftRight((java.lang.Object)3);
    org.jtuples.Sextuple var6 = var5.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    java.lang.Object var4 = var3.fourth();
    java.lang.Object var5 = var3.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var3 = var0.first();
    org.jtuples.Nonuple var4 = var0.invert();
    int var5 = var4.arity();
    java.lang.String var6 = var4.toString();
    java.lang.Object var7 = var4.fourth();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Sextuple var24 = var23.shiftRight();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    java.lang.Object[] var26 = var25.toArray();
    org.jtuples.Pair var27 = var25.invert();
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Septuple var30 = var28.shiftRight();
    java.lang.Object var31 = var30.sixth();
    org.jtuples.Triple var32 = new org.jtuples.Triple((java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var30);
    java.lang.Object var33 = var32.first();
    org.jtuples.Nonuple var34 = var4.shiftRight((java.lang.Object)var32);
    java.lang.String var35 = var34.toString();
    java.lang.Object var36 = var34.third();
    org.jtuples.Quintuple var37 = new org.jtuples.Quintuple();
    java.lang.Object var38 = var37.second();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    org.jtuples.Sextuple var41 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Quadruple var45 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var40, (java.lang.Object)var41, (java.lang.Object)var42);
    java.lang.Object var46 = var42.third();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var49 = var47.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var50 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var52 = var50.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var53 = var47.shiftRight((java.lang.Object)var52);
    org.jtuples.Sextuple var54 = var42.shiftLeft((java.lang.Object)var53);
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    java.lang.String var56 = var55.toString();
    org.jtuples.Sextuple var57 = var55.invert();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    int var59 = var58.arity();
    java.lang.Object var60 = var58.third();
    int var61 = var58.arity();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    java.lang.Object var70 = var66.third();
    org.jtuples.Nonuple var71 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var73 = var71.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = var71.shiftRight((java.lang.Object)var76);
    org.jtuples.Sextuple var78 = var66.shiftLeft((java.lang.Object)var77);
    org.jtuples.Sextuple var79 = var78.shiftRight();
    org.jtuples.Quintuple var80 = new org.jtuples.Quintuple((java.lang.Object)var53, (java.lang.Object)var57, (java.lang.Object)var61, (java.lang.Object)'#', (java.lang.Object)var79);
    org.jtuples.Quintuple var81 = var37.shiftLeft((java.lang.Object)'#');
    java.lang.Object var82 = var37.fourth();
    int var83 = var37.arity();
    org.jtuples.Nonuple var84 = var34.shiftRight((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(((((100, null, null, null, null, null, null, null, null), null, null, null, null, null, null, null, null), null, null, null, null, null), (null, null), (null, null, null, null, null, null, null)), null, null, null, null, null, null, null, null)"+ "'", var35.equals("(((((100, null, null, null, null, null, null, null, null), null, null, null, null, null, null, null, null), null, null, null, null, null), (null, null), (null, null, null, null, null, null, null)), null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    java.lang.Object[] var9 = var2.toArray();
    org.jtuples.Sextuple var10 = var2.shiftRight();
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(null, null, null, null, null, null)"+ "'", var11.equals("(null, null, null, null, null, null)"));

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    int var4 = var0.arity();
    java.lang.Object var5 = var0.third();
    java.lang.Object var6 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Sextuple var9 = var2.shiftRight();
    org.jtuples.Sextuple var10 = var2.shiftLeft();
    java.lang.Object var11 = var2.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    org.jtuples.Quadruple var0 = new org.jtuples.Quadruple();
    org.jtuples.Quadruple var1 = var0.shiftLeft();
    java.lang.Object[] var2 = var1.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    java.lang.Object var7 = var5.fifth();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var12 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var5, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var11);
    java.lang.Object var13 = var5.sixth();
    org.jtuples.Octuple var14 = var0.shiftLeft((java.lang.Object)var5);
    java.lang.Object var15 = var5.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    org.jtuples.Decuple var5 = var0.invert();
    java.lang.Object var6 = var0.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.Object var1 = var0.third();
    int var2 = var0.arity();
    java.lang.Object var3 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    org.jtuples.Nonuple var5 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var7 = var5.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var8 = var5.invert();
    java.lang.Object[] var9 = var8.toArray();
    int var10 = var8.arity();
    org.jtuples.Nonuple var11 = var8.shiftLeft();
    java.lang.Object[] var12 = var8.toArray();
    org.jtuples.Decuple var13 = var0.shiftLeft((java.lang.Object)var8);
    java.lang.Object var14 = var13.fifth();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var18.third();
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var28 = var26.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var29 = var23.shiftRight((java.lang.Object)var28);
    org.jtuples.Sextuple var30 = var18.shiftLeft((java.lang.Object)var29);
    org.jtuples.Sextuple var31 = var30.shiftRight();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    java.lang.Object[] var33 = var32.toArray();
    org.jtuples.Pair var34 = var32.invert();
    org.jtuples.Septuple var35 = new org.jtuples.Septuple();
    java.lang.Object var36 = var35.fifth();
    org.jtuples.Septuple var37 = var35.shiftRight();
    java.lang.Object var38 = var37.sixth();
    org.jtuples.Triple var39 = new org.jtuples.Triple((java.lang.Object)var31, (java.lang.Object)var32, (java.lang.Object)var37);
    java.lang.Object var40 = var39.first();
    org.jtuples.Triple var41 = var39.shiftRight();
    org.jtuples.Septuple var42 = new org.jtuples.Septuple();
    java.lang.Object var43 = var42.fifth();
    java.lang.Object var44 = var42.fifth();
    java.lang.Object[] var45 = var42.toArray();
    org.jtuples.Triple var46 = new org.jtuples.Triple((java.lang.Object)var13, (java.lang.Object)var41, (java.lang.Object)var45);
    java.lang.Object[] var47 = var46.toArray();
    java.lang.Object var48 = var46.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    org.jtuples.Quadruple var10 = var6.invert();
    org.jtuples.Quadruple var11 = var10.shiftRight();
    java.lang.Object var12 = var10.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    org.jtuples.Pair var60 = var58.invert();
    org.jtuples.Pair var61 = var60.shiftRight();
    int var62 = var61.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    org.jtuples.Quadruple var10 = var6.invert();
    org.jtuples.Decuple var11 = new org.jtuples.Decuple();
    java.lang.Object var12 = var11.ninth();
    java.lang.Object var13 = var11.first();
    java.lang.Object[] var14 = var11.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    org.jtuples.Decuple var22 = var11.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var23 = var22.fifth();
    java.lang.Object var24 = var22.sixth();
    org.jtuples.Quadruple var25 = var10.shiftLeft((java.lang.Object)var22);
    java.lang.Object[] var26 = var10.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    int var10 = var8.arity();
    org.jtuples.Quadruple var11 = var8.shiftLeft();
    org.jtuples.Quadruple var12 = var8.shiftRight();
    java.lang.Object var13 = var12.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (-1L)+ "'", var13.equals((-1L)));

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object var4 = var3.seventh();
    java.lang.Object var5 = var3.second();
    org.jtuples.Nonuple var6 = var3.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object var3 = var2.first();
    java.lang.Object var4 = var2.first();
    java.lang.Object[] var5 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Quintuple var47 = var1.shiftLeft((java.lang.Object)var46);
    java.lang.Object var48 = var46.third();
    int var49 = var46.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 6);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    int var13 = var8.arity();
    org.jtuples.Quintuple var14 = new org.jtuples.Quintuple();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Quadruple var16 = var8.shiftRight((java.lang.Object)var15);
    int var17 = var16.arity();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    int var19 = var18.arity();
    java.lang.Object var20 = var18.third();
    int var21 = var18.arity();
    org.jtuples.Pair var24 = new org.jtuples.Pair();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    java.lang.String var27 = var26.toString();
    org.jtuples.Sextuple var28 = var26.invert();
    org.jtuples.Quadruple var29 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var26);
    int var30 = var29.arity();
    org.jtuples.Quadruple var31 = var29.invert();
    java.lang.Object[] var32 = var31.toArray();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var35.sixth();
    java.lang.Object var41 = var35.fifth();
    org.jtuples.Sextuple var42 = var35.shiftRight();
    org.jtuples.Pair var45 = new org.jtuples.Pair();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var47 = new org.jtuples.Sextuple();
    java.lang.String var48 = var47.toString();
    org.jtuples.Sextuple var49 = var47.invert();
    org.jtuples.Quadruple var50 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var45, (java.lang.Object)var46, (java.lang.Object)var47);
    java.lang.Object var51 = var47.third();
    org.jtuples.Nonuple var52 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var54 = var52.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var55 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var57 = var55.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var58 = var52.shiftRight((java.lang.Object)var57);
    org.jtuples.Sextuple var59 = var47.shiftLeft((java.lang.Object)var58);
    java.lang.Object[] var60 = var58.toArray();
    org.jtuples.Decuple var61 = new org.jtuples.Decuple();
    java.lang.Object var62 = var61.ninth();
    org.jtuples.Decuple var63 = new org.jtuples.Decuple();
    java.lang.Object var64 = var63.sixth();
    org.jtuples.Nonuple var65 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var66 = var65.shiftLeft();
    org.jtuples.Decuple var68 = new org.jtuples.Decuple((java.lang.Object)var21, (java.lang.Object)(byte)1, (java.lang.Object)var32, (java.lang.Object)var35, (java.lang.Object)true, (java.lang.Object)var60, (java.lang.Object)var61, (java.lang.Object)var63, (java.lang.Object)var65, (java.lang.Object)9);
    boolean var69 = var16.equals((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(null, null, null, null, null, null)"+ "'", var27.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(null, null, null, null, null, null)"+ "'", var48.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    java.lang.Object var89 = var85.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    org.jtuples.Septuple var33 = new org.jtuples.Septuple();
    java.lang.Object var34 = var33.fifth();
    java.lang.Object var35 = var33.fifth();
    java.lang.Object var36 = var33.second();
    org.jtuples.Septuple var37 = var33.shiftLeft();
    org.jtuples.Quadruple var38 = var17.shiftRight((java.lang.Object)var33);
    org.jtuples.Septuple var39 = var33.shiftRight();
    java.lang.Object var40 = var39.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    java.lang.Object var5 = var0.sixth();
    int var6 = var0.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 8);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    java.lang.Object var95 = var85.second();
    org.jtuples.Quintuple var96 = var85.invert();
    org.jtuples.Octuple var97 = var1.shiftLeft((java.lang.Object)var85);
    org.jtuples.Quintuple var98 = var85.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    org.jtuples.Septuple var1 = var0.shiftLeft();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    int var15 = var11.arity();
    org.jtuples.Sextuple var16 = var11.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Quintuple var47 = var1.shiftLeft((java.lang.Object)var46);
    java.lang.Object var48 = var46.third();
    java.lang.Object[] var49 = var46.toArray();
    java.lang.Object var50 = var46.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.invert();
    java.lang.Object var7 = var6.third();
    org.jtuples.Nonuple var8 = var6.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Octuple var6 = new org.jtuples.Octuple();
    org.jtuples.Octuple var7 = var6.shiftRight();
    org.jtuples.Octuple var8 = var6.invert();
    org.jtuples.Nonuple var9 = var3.shiftLeft((java.lang.Object)var6);
    java.lang.Object var10 = var6.second();
    java.lang.Object var11 = var6.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    int var16 = var14.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 9);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.sixth();
    org.jtuples.Decuple var2 = var0.shiftRight();
    java.lang.Object var3 = var2.first();
    java.lang.Object var4 = var2.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    org.jtuples.Decuple var12 = new org.jtuples.Decuple();
    java.lang.Object var13 = var12.ninth();
    java.lang.Object var14 = var12.first();
    java.lang.Object var15 = var12.seventh();
    org.jtuples.Decuple var16 = var12.shiftLeft();
    java.lang.Object var17 = var16.second();
    java.lang.Object var18 = var16.first();
    int var19 = var16.arity();
    org.jtuples.Decuple var20 = var16.shiftRight();
    java.lang.Object var21 = var20.seventh();
    org.jtuples.Decuple var22 = var11.shiftRight((java.lang.Object)var20);
    java.lang.Object var23 = var11.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var95.first();
    java.lang.Object[] var97 = var95.toArray();
    org.jtuples.Octuple var98 = var95.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object[] var43 = var18.toArray();
    org.jtuples.Sextuple var44 = var18.invert();
    org.jtuples.Sextuple var45 = var44.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    org.jtuples.Quadruple var0 = new org.jtuples.Quadruple();
    org.jtuples.Quadruple var1 = var0.shiftLeft();
    int var2 = var1.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    java.lang.Object var95 = var85.second();
    org.jtuples.Quintuple var96 = var85.invert();
    org.jtuples.Octuple var97 = var1.shiftLeft((java.lang.Object)var85);
    java.lang.Object[] var98 = var1.toArray();
    org.jtuples.Octuple var99 = var1.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    org.jtuples.Septuple var4 = var3.shiftLeft();
    java.lang.Object var5 = var3.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    java.lang.Object var6 = var3.second();
    java.lang.Object var7 = var3.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Octuple var6 = new org.jtuples.Octuple();
    org.jtuples.Octuple var7 = var6.shiftRight();
    org.jtuples.Octuple var8 = var6.invert();
    org.jtuples.Nonuple var9 = var3.shiftLeft((java.lang.Object)var6);
    java.lang.Object var10 = var9.fifth();
    java.lang.Object[] var11 = var9.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var18.shiftLeft();
    org.jtuples.Sextuple var43 = var18.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object var43 = var18.sixth();
    java.lang.Object var44 = var18.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Octuple var5 = var0.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple();
    java.lang.Object var7 = var6.third();
    java.lang.Object var8 = var6.fourth();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple();
    java.lang.Object var10 = var9.fifth();
    org.jtuples.Septuple var11 = var9.shiftRight();
    java.lang.Object[] var12 = var9.toArray();
    org.jtuples.Septuple var13 = var9.invert();
    org.jtuples.Decuple var14 = new org.jtuples.Decuple();
    java.lang.Object var15 = var14.ninth();
    java.lang.Object var16 = var14.first();
    java.lang.Object[] var17 = var14.toArray();
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    org.jtuples.Decuple var25 = var14.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object[] var26 = var25.toArray();
    org.jtuples.Quadruple var27 = new org.jtuples.Quadruple((java.lang.Object)var0, (java.lang.Object)var6, (java.lang.Object)var13, (java.lang.Object)var25);
    java.lang.Object var28 = var6.third();
    java.lang.Object var29 = var6.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    int var10 = var6.arity();
    int var11 = var6.arity();
    org.jtuples.Quadruple var12 = var6.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Sextuple var10 = var2.shiftLeft((java.lang.Object)var9);
    java.lang.Object var11 = var2.second();
    java.lang.Object var12 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = var50.invert();
    java.lang.Object var53 = var50.sixth();
    java.lang.Object var54 = var50.tenth();
    org.jtuples.Decuple var55 = var50.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + 9+ "'", var54.equals(9));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object var10 = var6.first();
    java.lang.Object var11 = var6.fourth();
    java.lang.Object var12 = var6.third();
    int var13 = var6.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (-1L)+ "'", var10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Septuple var7 = new org.jtuples.Septuple();
    java.lang.Object var8 = var7.fifth();
    java.lang.Object var9 = var7.fifth();
    java.lang.Object var10 = var7.second();
    org.jtuples.Septuple var11 = var7.shiftLeft();
    java.lang.Object var12 = var7.sixth();
    org.jtuples.Pair var13 = var1.shiftLeft((java.lang.Object)var7);
    org.jtuples.Pair var15 = new org.jtuples.Pair();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    java.lang.String var18 = var17.toString();
    org.jtuples.Sextuple var19 = var17.invert();
    org.jtuples.Quadruple var20 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var15, (java.lang.Object)var16, (java.lang.Object)var17);
    java.lang.Object var21 = var16.sixth();
    org.jtuples.Sextuple var22 = var16.invert();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    int var31 = var30.arity();
    org.jtuples.Quadruple var32 = var30.invert();
    java.lang.Object var33 = var30.fourth();
    org.jtuples.Quadruple var34 = var30.invert();
    org.jtuples.Quadruple var35 = var34.shiftRight();
    org.jtuples.Quintuple var37 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var38 = var37.shiftLeft();
    org.jtuples.Pair var40 = new org.jtuples.Pair((java.lang.Object)var38, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var42 = new org.jtuples.Pair();
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple();
    java.lang.String var45 = var44.toString();
    org.jtuples.Sextuple var46 = var44.invert();
    org.jtuples.Quadruple var47 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var44);
    java.lang.Object var48 = var44.third();
    org.jtuples.Nonuple var49 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var51 = var49.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var52 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var54 = var52.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var55 = var49.shiftRight((java.lang.Object)var54);
    org.jtuples.Sextuple var56 = var44.shiftLeft((java.lang.Object)var55);
    java.lang.Object[] var57 = var55.toArray();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple((java.lang.Object)var16, (java.lang.Object)var23, (java.lang.Object)var35, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var57);
    org.jtuples.Pair var59 = var1.shiftLeft((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(null, null, null, null, null, null)"+ "'", var18.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(null, null, null, null, null, null)"+ "'", var45.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    org.jtuples.Quadruple var10 = var6.invert();
    org.jtuples.Quadruple var11 = var10.shiftRight();
    org.jtuples.Septuple var14 = new org.jtuples.Septuple();
    java.lang.Object var15 = var14.fifth();
    java.lang.Object var16 = var14.fifth();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var14, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var20);
    java.lang.Object var22 = var14.seventh();
    org.jtuples.Septuple var24 = var14.shiftRight((java.lang.Object)(byte)0);
    org.jtuples.Septuple var25 = var24.invert();
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    int var27 = var26.arity();
    java.lang.Object var28 = var26.third();
    int var29 = var26.arity();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    int var38 = var37.arity();
    org.jtuples.Quadruple var39 = var37.invert();
    java.lang.Object[] var40 = var39.toArray();
    org.jtuples.Pair var42 = new org.jtuples.Pair();
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple();
    java.lang.String var45 = var44.toString();
    org.jtuples.Sextuple var46 = var44.invert();
    org.jtuples.Quadruple var47 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var44);
    java.lang.Object var48 = var43.sixth();
    java.lang.Object var49 = var43.fifth();
    org.jtuples.Sextuple var50 = var43.shiftRight();
    org.jtuples.Pair var53 = new org.jtuples.Pair();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    java.lang.String var56 = var55.toString();
    org.jtuples.Sextuple var57 = var55.invert();
    org.jtuples.Quadruple var58 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var53, (java.lang.Object)var54, (java.lang.Object)var55);
    java.lang.Object var59 = var55.third();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var60.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var63 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var65 = var63.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var66 = var60.shiftRight((java.lang.Object)var65);
    org.jtuples.Sextuple var67 = var55.shiftLeft((java.lang.Object)var66);
    java.lang.Object[] var68 = var66.toArray();
    org.jtuples.Decuple var69 = new org.jtuples.Decuple();
    java.lang.Object var70 = var69.ninth();
    org.jtuples.Decuple var71 = new org.jtuples.Decuple();
    java.lang.Object var72 = var71.sixth();
    org.jtuples.Nonuple var73 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var73.shiftLeft();
    org.jtuples.Decuple var76 = new org.jtuples.Decuple((java.lang.Object)var29, (java.lang.Object)(byte)1, (java.lang.Object)var40, (java.lang.Object)var43, (java.lang.Object)true, (java.lang.Object)var68, (java.lang.Object)var69, (java.lang.Object)var71, (java.lang.Object)var73, (java.lang.Object)9);
    org.jtuples.Pair var78 = new org.jtuples.Pair();
    org.jtuples.Sextuple var79 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var80 = new org.jtuples.Sextuple();
    java.lang.String var81 = var80.toString();
    org.jtuples.Sextuple var82 = var80.invert();
    org.jtuples.Quadruple var83 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var78, (java.lang.Object)var79, (java.lang.Object)var80);
    org.jtuples.Pair var84 = var78.shiftLeft();
    org.jtuples.Decuple var85 = var71.shiftRight((java.lang.Object)var84);
    org.jtuples.Septuple var86 = var24.shiftRight((java.lang.Object)var85);
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    int var88 = var87.arity();
    org.jtuples.Nonuple var89 = var87.shiftLeft();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var92 = var90.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var93 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var95 = var93.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var96 = var90.shiftRight((java.lang.Object)var95);
    boolean var97 = var89.equals((java.lang.Object)var95);
    org.jtuples.Triple var98 = new org.jtuples.Triple((java.lang.Object)var10, (java.lang.Object)var86, (java.lang.Object)var89);
    java.lang.Object[] var99 = var98.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(null, null, null, null, null, null)"+ "'", var45.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(null, null, null, null, null, null)"+ "'", var81.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Nonuple var4 = var0.shiftLeft();
    org.jtuples.Nonuple var5 = var4.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    org.jtuples.Septuple var33 = new org.jtuples.Septuple();
    java.lang.Object var34 = var33.fifth();
    java.lang.Object var35 = var33.fifth();
    java.lang.Object var36 = var33.second();
    org.jtuples.Septuple var37 = var33.shiftLeft();
    org.jtuples.Quadruple var38 = var17.shiftRight((java.lang.Object)var33);
    org.jtuples.Septuple var39 = var33.shiftRight();
    java.lang.Object var40 = var39.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Quintuple var3 = var1.shiftRight((java.lang.Object)'4');
    org.jtuples.Quintuple var4 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var5 = var4.shiftLeft();
    org.jtuples.Pair var7 = new org.jtuples.Pair((java.lang.Object)var5, (java.lang.Object)(-1.0f));
    java.util.List var8 = var7.asList();
    org.jtuples.Quintuple var9 = var1.shiftLeft((java.lang.Object)var8);
    org.jtuples.Quintuple var10 = var1.invert();
    java.lang.Object var11 = var1.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Sextuple var10 = var2.shiftLeft((java.lang.Object)var9);
    org.jtuples.Pair var12 = new org.jtuples.Pair();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    org.jtuples.Sextuple var16 = var14.invert();
    org.jtuples.Quadruple var17 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var12, (java.lang.Object)var13, (java.lang.Object)var14);
    java.lang.Object var18 = var12.second();
    org.jtuples.Pair var19 = var12.invert();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = var20.invert();
    java.lang.Object[] var24 = var23.toArray();
    int var25 = var23.arity();
    org.jtuples.Nonuple var26 = var23.shiftLeft();
    java.lang.Object[] var27 = var23.toArray();
    org.jtuples.Pair var28 = var19.shiftLeft((java.lang.Object)var23);
    org.jtuples.Pair var29 = var28.invert();
    org.jtuples.Octuple var30 = var9.shiftLeft((java.lang.Object)var29);
    org.jtuples.Pair var31 = var29.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    java.util.List var57 = var56.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object[] var2 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    int var8 = var7.arity();
    org.jtuples.Quadruple var9 = var7.invert();
    org.jtuples.Septuple var10 = new org.jtuples.Septuple();
    java.lang.Object var11 = var10.fifth();
    java.lang.Object var12 = var10.fifth();
    java.lang.Object var13 = var10.sixth();
    java.lang.Object var14 = var10.seventh();
    java.lang.Object var15 = var10.fifth();
    org.jtuples.Quadruple var16 = var9.shiftRight((java.lang.Object)var10);
    org.jtuples.Quintuple var17 = var0.shiftRight((java.lang.Object)var16);
    java.lang.Object var18 = var17.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    java.lang.Object var5 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    java.lang.Object var60 = var59.ninth();
    java.lang.Object[] var61 = var59.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    java.lang.Object var13 = var12.fourth();
    java.lang.Object var14 = var12.fourth();
    org.jtuples.Quadruple var15 = var12.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.tenth();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var7.third();
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var17 = var15.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var18 = var12.shiftRight((java.lang.Object)var17);
    org.jtuples.Sextuple var19 = var7.shiftLeft((java.lang.Object)var18);
    java.lang.Object[] var20 = var18.toArray();
    java.lang.Object var21 = var18.seventh();
    org.jtuples.Decuple var22 = var0.shiftLeft((java.lang.Object)var18);
    java.lang.Object var23 = var0.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Septuple var4 = var0.invert();
    org.jtuples.Quintuple var5 = new org.jtuples.Quintuple();
    org.jtuples.Septuple var6 = var4.shiftLeft((java.lang.Object)var5);
    java.lang.Object var7 = var5.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    int var2 = var0.arity();
    java.lang.Object var3 = var0.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    java.lang.Object[] var34 = var12.toArray();
    java.lang.Object var35 = var12.fourth();
    org.jtuples.Septuple var36 = var12.invert();
    java.lang.Object var37 = var36.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    org.jtuples.Septuple var4 = var3.shiftLeft();
    org.jtuples.Pair var7 = new org.jtuples.Pair();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var9 = new org.jtuples.Sextuple();
    java.lang.String var10 = var9.toString();
    org.jtuples.Sextuple var11 = var9.invert();
    org.jtuples.Quadruple var12 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var7, (java.lang.Object)var8, (java.lang.Object)var9);
    int var13 = var12.arity();
    org.jtuples.Quadruple var14 = var12.invert();
    java.lang.Object var15 = var12.fourth();
    int var16 = var12.arity();
    java.lang.Object var17 = var12.third();
    org.jtuples.Quintuple var18 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var19 = var18.shiftLeft();
    int var20 = var18.arity();
    java.lang.Object var21 = var18.third();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)var3, (java.lang.Object)1, (java.lang.Object)var12, (java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(null, null, null, null, null, null)"+ "'", var10.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object[] var12 = var11.toArray();
    org.jtuples.Decuple var13 = var11.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object[] var5 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    java.lang.Object var15 = var2.first();
    org.jtuples.Septuple var16 = new org.jtuples.Septuple();
    java.lang.Object var17 = var16.fifth();
    org.jtuples.Septuple var18 = var16.shiftRight();
    org.jtuples.Septuple var19 = var16.invert();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    int var21 = var20.arity();
    java.lang.Object var22 = var20.third();
    int var23 = var20.arity();
    org.jtuples.Pair var26 = new org.jtuples.Pair();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Quadruple var31 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var26, (java.lang.Object)var27, (java.lang.Object)var28);
    int var32 = var31.arity();
    org.jtuples.Quadruple var33 = var31.invert();
    java.lang.Object[] var34 = var33.toArray();
    org.jtuples.Pair var36 = new org.jtuples.Pair();
    org.jtuples.Sextuple var37 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var38 = new org.jtuples.Sextuple();
    java.lang.String var39 = var38.toString();
    org.jtuples.Sextuple var40 = var38.invert();
    org.jtuples.Quadruple var41 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var36, (java.lang.Object)var37, (java.lang.Object)var38);
    java.lang.Object var42 = var37.sixth();
    java.lang.Object var43 = var37.fifth();
    org.jtuples.Sextuple var44 = var37.shiftRight();
    org.jtuples.Pair var47 = new org.jtuples.Pair();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    java.lang.String var50 = var49.toString();
    org.jtuples.Sextuple var51 = var49.invert();
    org.jtuples.Quadruple var52 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var49);
    java.lang.Object var53 = var49.third();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var56 = var54.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var57 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var59 = var57.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var60 = var54.shiftRight((java.lang.Object)var59);
    org.jtuples.Sextuple var61 = var49.shiftLeft((java.lang.Object)var60);
    java.lang.Object[] var62 = var60.toArray();
    org.jtuples.Decuple var63 = new org.jtuples.Decuple();
    java.lang.Object var64 = var63.ninth();
    org.jtuples.Decuple var65 = new org.jtuples.Decuple();
    java.lang.Object var66 = var65.sixth();
    org.jtuples.Nonuple var67 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var68 = var67.shiftLeft();
    org.jtuples.Decuple var70 = new org.jtuples.Decuple((java.lang.Object)var23, (java.lang.Object)(byte)1, (java.lang.Object)var34, (java.lang.Object)var37, (java.lang.Object)true, (java.lang.Object)var62, (java.lang.Object)var63, (java.lang.Object)var65, (java.lang.Object)var67, (java.lang.Object)9);
    java.lang.Object var71 = var70.ninth();
    org.jtuples.Decuple var72 = var70.invert();
    java.lang.Object var73 = var70.sixth();
    org.jtuples.Decuple var75 = new org.jtuples.Decuple();
    java.lang.Object var76 = var75.ninth();
    java.lang.Object var77 = var75.first();
    java.lang.Object var78 = var75.fifth();
    java.lang.Object var79 = var75.sixth();
    java.lang.Object var80 = var75.sixth();
    org.jtuples.Nonuple var81 = new org.jtuples.Nonuple();
    int var82 = var81.arity();
    java.lang.Object var83 = var81.third();
    int var84 = var81.arity();
    org.jtuples.Nonuple var85 = var81.shiftLeft();
    org.jtuples.Decuple var86 = var75.shiftLeft((java.lang.Object)var85);
    org.jtuples.Decuple var87 = var86.invert();
    org.jtuples.Decuple var89 = var87.shiftRight((java.lang.Object)6);
    org.jtuples.Quintuple var90 = new org.jtuples.Quintuple((java.lang.Object)var2, (java.lang.Object)var16, (java.lang.Object)var70, (java.lang.Object)(short)10, (java.lang.Object)6);
    java.lang.Object var91 = var16.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(null, null, null, null, null, null)"+ "'", var39.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(null, null, null, null, null, null)"+ "'", var50.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var12 = var11.fifth();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Decuple var14 = var11.shiftRight();
    java.lang.Object var15 = var14.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Pair var7 = new org.jtuples.Pair();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var9 = new org.jtuples.Sextuple();
    java.lang.String var10 = var9.toString();
    org.jtuples.Sextuple var11 = var9.invert();
    org.jtuples.Quadruple var12 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var7, (java.lang.Object)var8, (java.lang.Object)var9);
    java.lang.Object var13 = var9.third();
    org.jtuples.Nonuple var14 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var16 = var14.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var17 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var19 = var17.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var20 = var14.shiftRight((java.lang.Object)var19);
    org.jtuples.Sextuple var21 = var9.shiftLeft((java.lang.Object)var20);
    org.jtuples.Sextuple var22 = var21.shiftRight();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    java.lang.Object[] var24 = var23.toArray();
    org.jtuples.Pair var25 = var23.invert();
    org.jtuples.Septuple var26 = new org.jtuples.Septuple();
    java.lang.Object var27 = var26.fifth();
    org.jtuples.Septuple var28 = var26.shiftRight();
    java.lang.Object var29 = var28.sixth();
    org.jtuples.Triple var30 = new org.jtuples.Triple((java.lang.Object)var22, (java.lang.Object)var23, (java.lang.Object)var28);
    java.lang.Object var31 = var30.second();
    org.jtuples.Decuple var32 = var0.shiftRight(var31);
    java.lang.Object var33 = var32.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(null, null, null, null, null, null)"+ "'", var10.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    java.lang.Object[] var16 = var14.toArray();
    java.lang.Object var17 = var14.seventh();
    java.lang.Object[] var18 = var14.toArray();
    int var19 = var14.arity();
    java.lang.Object var20 = var14.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    org.jtuples.Decuple var62 = var50.shiftRight();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    org.jtuples.Pair var70 = var64.shiftLeft();
    org.jtuples.Decuple var71 = var50.shiftLeft((java.lang.Object)var64);
    java.util.List var72 = var71.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object[] var1 = var0.toArray();
    java.lang.Object var2 = var0.first();
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var3.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var6 = var3.first();
    org.jtuples.Nonuple var7 = var3.invert();
    int var8 = var7.arity();
    java.lang.String var9 = var7.toString();
    java.lang.Object var10 = var7.second();
    java.lang.Object var11 = var7.eighth();
    org.jtuples.Quintuple var12 = var0.shiftRight((java.lang.Object)var7);
    org.jtuples.Quintuple var13 = var0.invert();
    org.jtuples.Quintuple var14 = new org.jtuples.Quintuple();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var16.second();
    org.jtuples.Pair var23 = var16.invert();
    org.jtuples.Quintuple var24 = var14.shiftRight((java.lang.Object)var23);
    org.jtuples.Quintuple var25 = var0.shiftRight((java.lang.Object)var14);
    java.lang.Object var26 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var0.third();
    org.jtuples.Sextuple var5 = var0.shiftRight((java.lang.Object)3);
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    java.lang.Object var10 = var8.second();
    org.jtuples.Septuple var11 = new org.jtuples.Septuple();
    java.lang.Object var12 = var11.fifth();
    org.jtuples.Septuple var13 = var11.shiftRight();
    java.lang.Object[] var14 = var11.toArray();
    org.jtuples.Sextuple var15 = var8.shiftRight((java.lang.Object)var11);
    org.jtuples.Sextuple var16 = var5.shiftLeft((java.lang.Object)var8);
    java.lang.Object var17 = var8.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var1.third();
    java.lang.Object var3 = var1.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Octuple var5 = var0.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple();
    java.lang.Object var7 = var6.third();
    java.lang.Object var8 = var6.fourth();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple();
    java.lang.Object var10 = var9.fifth();
    org.jtuples.Septuple var11 = var9.shiftRight();
    java.lang.Object[] var12 = var9.toArray();
    org.jtuples.Septuple var13 = var9.invert();
    org.jtuples.Decuple var14 = new org.jtuples.Decuple();
    java.lang.Object var15 = var14.ninth();
    java.lang.Object var16 = var14.first();
    java.lang.Object[] var17 = var14.toArray();
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    org.jtuples.Decuple var25 = var14.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object[] var26 = var25.toArray();
    org.jtuples.Quadruple var27 = new org.jtuples.Quadruple((java.lang.Object)var0, (java.lang.Object)var6, (java.lang.Object)var13, (java.lang.Object)var25);
    java.lang.Object var28 = var25.ninth();
    java.lang.Object var29 = var25.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    int var10 = var8.arity();
    org.jtuples.Quadruple var11 = var8.shiftLeft();
    org.jtuples.Quadruple var12 = var8.shiftRight();
    org.jtuples.Pair var14 = new org.jtuples.Pair();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Quadruple var19 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var14, (java.lang.Object)var15, (java.lang.Object)var16);
    int var20 = var19.arity();
    org.jtuples.Quadruple var21 = var19.invert();
    java.lang.Object[] var22 = var21.toArray();
    org.jtuples.Pair var24 = new org.jtuples.Pair();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    java.lang.String var27 = var26.toString();
    org.jtuples.Sextuple var28 = var26.invert();
    org.jtuples.Quadruple var29 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var26);
    java.lang.Object var30 = var26.third();
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var33 = var31.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = var31.shiftRight((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = var26.shiftLeft((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var38.shiftRight();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    java.lang.Object[] var41 = var40.toArray();
    org.jtuples.Pair var42 = var40.invert();
    org.jtuples.Septuple var43 = new org.jtuples.Septuple();
    java.lang.Object var44 = var43.fifth();
    org.jtuples.Septuple var45 = var43.shiftRight();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Triple var47 = new org.jtuples.Triple((java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var45);
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    int var55 = var54.arity();
    org.jtuples.Quadruple var56 = var54.invert();
    java.lang.Object[] var57 = var56.toArray();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    java.lang.Object var59 = var58.third();
    org.jtuples.Quadruple var60 = var56.shiftRight((java.lang.Object)var58);
    int var61 = var56.arity();
    org.jtuples.Quadruple var62 = var56.shiftLeft();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    java.lang.Object var70 = var64.second();
    org.jtuples.Pair var71 = var64.invert();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var72.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var75 = var72.invert();
    java.lang.Object[] var76 = var75.toArray();
    int var77 = var75.arity();
    org.jtuples.Nonuple var78 = var75.shiftLeft();
    java.lang.Object[] var79 = var75.toArray();
    org.jtuples.Pair var80 = var71.shiftLeft((java.lang.Object)var75);
    org.jtuples.Quintuple var81 = new org.jtuples.Quintuple((java.lang.Object)var12, (java.lang.Object)var21, (java.lang.Object)var40, (java.lang.Object)var56, (java.lang.Object)var71);
    java.lang.Object var82 = var56.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(null, null, null, null, null, null)"+ "'", var27.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + (-1L)+ "'", var82.equals((-1L)));

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    org.jtuples.Octuple var3 = var0.shiftLeft();
    java.lang.Object var4 = var3.fifth();
    java.lang.Object var5 = var3.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    java.lang.Object var89 = var85.fourth();
    java.lang.Object var90 = var85.eighth();
    int var91 = var85.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 9);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.sixth();
    org.jtuples.Decuple var2 = var0.shiftRight();
    java.lang.Object var3 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    int var10 = var6.arity();
    java.lang.Object var11 = var6.third();
    org.jtuples.Quadruple var12 = var6.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    org.jtuples.Quadruple var9 = var8.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Nonuple var4 = var0.shiftLeft();
    org.jtuples.Nonuple var5 = var4.invert();
    org.jtuples.Nonuple var6 = var5.shiftLeft();
    org.jtuples.Nonuple var7 = var6.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    org.jtuples.Nonuple var5 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var7 = var5.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var8 = var5.invert();
    java.lang.Object[] var9 = var8.toArray();
    int var10 = var8.arity();
    org.jtuples.Nonuple var11 = var8.shiftLeft();
    java.lang.Object[] var12 = var8.toArray();
    org.jtuples.Decuple var13 = var0.shiftLeft((java.lang.Object)var8);
    java.lang.Object var14 = var13.fifth();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var18.third();
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var28 = var26.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var29 = var23.shiftRight((java.lang.Object)var28);
    org.jtuples.Sextuple var30 = var18.shiftLeft((java.lang.Object)var29);
    org.jtuples.Sextuple var31 = var30.shiftRight();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    java.lang.Object[] var33 = var32.toArray();
    org.jtuples.Pair var34 = var32.invert();
    org.jtuples.Septuple var35 = new org.jtuples.Septuple();
    java.lang.Object var36 = var35.fifth();
    org.jtuples.Septuple var37 = var35.shiftRight();
    java.lang.Object var38 = var37.sixth();
    org.jtuples.Triple var39 = new org.jtuples.Triple((java.lang.Object)var31, (java.lang.Object)var32, (java.lang.Object)var37);
    java.lang.Object var40 = var39.first();
    org.jtuples.Triple var41 = var39.shiftRight();
    org.jtuples.Septuple var42 = new org.jtuples.Septuple();
    java.lang.Object var43 = var42.fifth();
    java.lang.Object var44 = var42.fifth();
    java.lang.Object[] var45 = var42.toArray();
    org.jtuples.Triple var46 = new org.jtuples.Triple((java.lang.Object)var13, (java.lang.Object)var41, (java.lang.Object)var45);
    java.lang.Object[] var47 = var46.toArray();
    org.jtuples.Triple var48 = var46.shiftRight();
    org.jtuples.Triple var50 = var46.shiftLeft((java.lang.Object)0.0f);
    java.lang.Object var51 = var46.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var3.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var6 = var3.invert();
    org.jtuples.Nonuple var7 = var6.invert();
    java.lang.Object var8 = var7.sixth();
    org.jtuples.Nonuple var9 = var7.invert();
    org.jtuples.Nonuple var10 = var9.invert();
    org.jtuples.Nonuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var10.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Triple var30 = var24.shiftLeft((java.lang.Object)var28);
    java.lang.Object var31 = var28.first();
    org.jtuples.Septuple var32 = var28.shiftRight();
    int var33 = var28.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 7);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    org.jtuples.Nonuple var4 = var3.shiftLeft();
    int var5 = var3.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    org.jtuples.Triple var0 = new org.jtuples.Triple();
    org.jtuples.Triple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Pair var3 = new org.jtuples.Pair((java.lang.Object)var1, (java.lang.Object)(-1.0f));
    int var4 = var3.arity();
    java.lang.Object var5 = var3.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var41.fifth();
    java.lang.Object var43 = var41.second();
    java.lang.Object var44 = var41.fourth();
    org.jtuples.Quintuple var45 = var41.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + '#'+ "'", var44.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    java.lang.Object var89 = var83.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Sextuple var17 = var16.shiftRight();
    org.jtuples.Sextuple var18 = var16.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    int var13 = var8.arity();
    org.jtuples.Quadruple var14 = var8.shiftLeft();
    java.lang.Object var15 = var8.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + (-1L)+ "'", var15.equals((-1L)));

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    java.lang.String var57 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.sixth();
    java.lang.Object var4 = var0.sixth();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    int var18 = var13.arity();
    org.jtuples.Quintuple var19 = new org.jtuples.Quintuple();
    java.lang.Object[] var20 = var19.toArray();
    org.jtuples.Quadruple var21 = var13.shiftRight((java.lang.Object)var20);
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var25.third();
    org.jtuples.Nonuple var30 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var32 = var30.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var33 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var35 = var33.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var36 = var30.shiftRight((java.lang.Object)var35);
    org.jtuples.Sextuple var37 = var25.shiftLeft((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = var37.shiftRight();
    org.jtuples.Pair var39 = new org.jtuples.Pair();
    java.lang.Object[] var40 = var39.toArray();
    org.jtuples.Pair var41 = var39.invert();
    org.jtuples.Septuple var42 = new org.jtuples.Septuple();
    java.lang.Object var43 = var42.fifth();
    org.jtuples.Septuple var44 = var42.shiftRight();
    java.lang.Object var45 = var44.sixth();
    org.jtuples.Triple var46 = new org.jtuples.Triple((java.lang.Object)var38, (java.lang.Object)var39, (java.lang.Object)var44);
    java.lang.Object var47 = var46.second();
    java.lang.Object var48 = var46.first();
    org.jtuples.Quadruple var49 = var13.shiftLeft((java.lang.Object)var46);
    org.jtuples.Quadruple var50 = var49.shiftRight();
    org.jtuples.Octuple var51 = var0.shiftLeft((java.lang.Object)var49);
    java.lang.Object var52 = var51.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.first();
    java.lang.Object var9 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var1.second();
    org.jtuples.Pair var8 = var1.invert();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var12 = var9.invert();
    java.lang.Object[] var13 = var12.toArray();
    int var14 = var12.arity();
    org.jtuples.Nonuple var15 = var12.shiftLeft();
    java.lang.Object[] var16 = var12.toArray();
    org.jtuples.Pair var17 = var8.shiftLeft((java.lang.Object)var12);
    org.jtuples.Pair var18 = var17.invert();
    java.lang.Object var19 = var18.first();
    org.jtuples.Pair var20 = var18.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    java.lang.Object var4 = var3.seventh();
    int var5 = var3.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftLeft();
    java.lang.Object var98 = var0.sixth();
    java.lang.Object var99 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.ninth();
    java.lang.Object var7 = var4.fifth();
    java.lang.Object[] var8 = var4.toArray();
    java.lang.Object[] var9 = var4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.shiftLeft();
    java.lang.Object[] var7 = var3.toArray();
    org.jtuples.Decuple var8 = new org.jtuples.Decuple();
    java.lang.Object var9 = var8.ninth();
    java.lang.Object var10 = var8.first();
    java.lang.Object var11 = var8.fifth();
    java.lang.Object var12 = var8.sixth();
    java.lang.Object var13 = var8.sixth();
    org.jtuples.Nonuple var14 = new org.jtuples.Nonuple();
    int var15 = var14.arity();
    java.lang.Object var16 = var14.third();
    int var17 = var14.arity();
    org.jtuples.Nonuple var18 = var14.shiftLeft();
    org.jtuples.Decuple var19 = var8.shiftLeft((java.lang.Object)var18);
    java.lang.Object var20 = var19.seventh();
    java.lang.Object var21 = var19.seventh();
    org.jtuples.Nonuple var22 = var3.shiftLeft((java.lang.Object)var19);
    java.lang.Object var23 = var3.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Septuple var4 = var0.invert();
    org.jtuples.Quintuple var5 = new org.jtuples.Quintuple();
    org.jtuples.Septuple var6 = var4.shiftLeft((java.lang.Object)var5);
    java.lang.Object var7 = var4.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var11.seventh();
    java.lang.Object var13 = var11.seventh();
    java.lang.Object var14 = var11.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    org.jtuples.Sextuple var8 = var2.invert();
    org.jtuples.Decuple var9 = new org.jtuples.Decuple();
    java.lang.Object var10 = var9.ninth();
    java.lang.Object var11 = var9.first();
    java.lang.Object[] var12 = var9.toArray();
    java.lang.Object var13 = var9.tenth();
    org.jtuples.Sextuple var14 = var2.shiftLeft((java.lang.Object)var9);
    org.jtuples.Decuple var15 = var9.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    org.jtuples.Octuple var1 = new org.jtuples.Octuple();
    java.lang.Object var2 = var1.seventh();
    org.jtuples.Octuple var3 = var1.shiftLeft();
    org.jtuples.Decuple var4 = var0.shiftRight((java.lang.Object)var3);
    java.lang.Object var5 = var4.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    java.lang.Object var26 = var24.first();
    int var27 = var24.arity();
    org.jtuples.Triple var28 = var24.invert();
    org.jtuples.Septuple var31 = new org.jtuples.Septuple();
    java.lang.Object var32 = var31.fifth();
    java.lang.Object var33 = var31.fifth();
    org.jtuples.Sextuple var37 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var38 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var31, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var37);
    int var39 = var31.arity();
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    java.lang.Object var42 = var40.sixth();
    org.jtuples.Septuple var43 = var31.shiftLeft((java.lang.Object)var40);
    java.lang.Object var44 = var40.fifth();
    org.jtuples.Triple var45 = var28.shiftRight((java.lang.Object)var40);
    java.lang.Object var46 = var40.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var0.third();
    org.jtuples.Sextuple var5 = var0.shiftRight((java.lang.Object)3);
    java.lang.Object var6 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Pair var7 = var1.shiftLeft();
    org.jtuples.Pair var8 = var7.shiftLeft();
    org.jtuples.Pair var9 = var7.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    org.jtuples.Septuple var13 = var12.invert();
    java.lang.Object var14 = var13.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (byte)0+ "'", var14.equals((byte)0));

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    java.lang.Object var2 = var1.second();
    java.lang.Object var3 = var1.second();
    org.jtuples.Quintuple var4 = var1.shiftLeft();
    org.jtuples.Septuple var7 = new org.jtuples.Septuple();
    java.lang.Object var8 = var7.fifth();
    java.lang.Object var9 = var7.fifth();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var14 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var7, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var13);
    int var15 = var7.arity();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    java.lang.Object var18 = var16.sixth();
    org.jtuples.Septuple var19 = var7.shiftLeft((java.lang.Object)var16);
    java.lang.Object var20 = var7.first();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple();
    java.lang.Object var22 = var21.fifth();
    org.jtuples.Septuple var23 = var21.shiftRight();
    org.jtuples.Septuple var24 = var21.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    int var26 = var25.arity();
    java.lang.Object var27 = var25.third();
    int var28 = var25.arity();
    org.jtuples.Pair var31 = new org.jtuples.Pair();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    java.lang.String var34 = var33.toString();
    org.jtuples.Sextuple var35 = var33.invert();
    org.jtuples.Quadruple var36 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var31, (java.lang.Object)var32, (java.lang.Object)var33);
    int var37 = var36.arity();
    org.jtuples.Quadruple var38 = var36.invert();
    java.lang.Object[] var39 = var38.toArray();
    org.jtuples.Pair var41 = new org.jtuples.Pair();
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    java.lang.String var44 = var43.toString();
    org.jtuples.Sextuple var45 = var43.invert();
    org.jtuples.Quadruple var46 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var41, (java.lang.Object)var42, (java.lang.Object)var43);
    java.lang.Object var47 = var42.sixth();
    java.lang.Object var48 = var42.fifth();
    org.jtuples.Sextuple var49 = var42.shiftRight();
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    java.lang.Object var58 = var54.third();
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var64 = var62.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var65 = var59.shiftRight((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var54.shiftLeft((java.lang.Object)var65);
    java.lang.Object[] var67 = var65.toArray();
    org.jtuples.Decuple var68 = new org.jtuples.Decuple();
    java.lang.Object var69 = var68.ninth();
    org.jtuples.Decuple var70 = new org.jtuples.Decuple();
    java.lang.Object var71 = var70.sixth();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var73 = var72.shiftLeft();
    org.jtuples.Decuple var75 = new org.jtuples.Decuple((java.lang.Object)var28, (java.lang.Object)(byte)1, (java.lang.Object)var39, (java.lang.Object)var42, (java.lang.Object)true, (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var70, (java.lang.Object)var72, (java.lang.Object)9);
    java.lang.Object var76 = var75.ninth();
    org.jtuples.Decuple var77 = var75.invert();
    java.lang.Object var78 = var75.sixth();
    org.jtuples.Decuple var80 = new org.jtuples.Decuple();
    java.lang.Object var81 = var80.ninth();
    java.lang.Object var82 = var80.first();
    java.lang.Object var83 = var80.fifth();
    java.lang.Object var84 = var80.sixth();
    java.lang.Object var85 = var80.sixth();
    org.jtuples.Nonuple var86 = new org.jtuples.Nonuple();
    int var87 = var86.arity();
    java.lang.Object var88 = var86.third();
    int var89 = var86.arity();
    org.jtuples.Nonuple var90 = var86.shiftLeft();
    org.jtuples.Decuple var91 = var80.shiftLeft((java.lang.Object)var90);
    org.jtuples.Decuple var92 = var91.invert();
    org.jtuples.Decuple var94 = var92.shiftRight((java.lang.Object)6);
    org.jtuples.Quintuple var95 = new org.jtuples.Quintuple((java.lang.Object)var7, (java.lang.Object)var21, (java.lang.Object)var75, (java.lang.Object)(short)10, (java.lang.Object)6);
    org.jtuples.Quintuple var96 = var4.shiftRight((java.lang.Object)(short)10);
    java.lang.Object var97 = var4.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(null, null, null, null, null, null)"+ "'", var34.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(null, null, null, null, null, null)"+ "'", var44.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    org.jtuples.Octuple var98 = var96.shiftRight();
    java.lang.Object[] var99 = var96.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object var5 = var0.sixth();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Nonuple var10 = var6.shiftLeft();
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var11.seventh();
    java.lang.Object var13 = var11.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.tenth();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var7.third();
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var17 = var15.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var18 = var12.shiftRight((java.lang.Object)var17);
    org.jtuples.Sextuple var19 = var7.shiftLeft((java.lang.Object)var18);
    java.lang.Object[] var20 = var18.toArray();
    java.lang.Object var21 = var18.seventh();
    org.jtuples.Decuple var22 = var0.shiftLeft((java.lang.Object)var18);
    int var23 = var0.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 10);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    org.jtuples.Quintuple var42 = var41.shiftLeft();
    java.lang.Object var43 = var41.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + 9+ "'", var43.equals(9));

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple();
    java.lang.Object var10 = var9.fifth();
    java.lang.Object var11 = var9.fifth();
    java.lang.Object var12 = var9.sixth();
    java.lang.Object var13 = var9.seventh();
    java.lang.Object var14 = var9.fifth();
    org.jtuples.Quadruple var15 = var8.shiftRight((java.lang.Object)var9);
    java.lang.Object var16 = var9.third();
    java.lang.Object var17 = var9.second();
    int var18 = var9.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 7);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftRight();
    org.jtuples.Octuple var98 = var97.shiftRight();
    java.lang.Object var99 = var97.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.third();
    org.jtuples.Octuple var5 = var0.invert();
    org.jtuples.Octuple var6 = var5.invert();
    org.jtuples.Octuple var7 = var6.shiftLeft();
    org.jtuples.Pair var10 = new org.jtuples.Pair();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    java.lang.String var13 = var12.toString();
    org.jtuples.Sextuple var14 = var12.invert();
    org.jtuples.Quadruple var15 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var10, (java.lang.Object)var11, (java.lang.Object)var12);
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var19.third();
    org.jtuples.Nonuple var24 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var26 = var24.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var27 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var29 = var27.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var30 = var24.shiftRight((java.lang.Object)var29);
    org.jtuples.Sextuple var31 = var19.shiftLeft((java.lang.Object)var30);
    org.jtuples.Pair var33 = new org.jtuples.Pair();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    java.lang.String var36 = var35.toString();
    org.jtuples.Sextuple var37 = var35.invert();
    org.jtuples.Quadruple var38 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var33, (java.lang.Object)var34, (java.lang.Object)var35);
    java.lang.Object var39 = var35.third();
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var45 = var43.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var46 = var40.shiftRight((java.lang.Object)var45);
    org.jtuples.Sextuple var47 = var35.shiftLeft((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple();
    java.lang.String var49 = var48.toString();
    org.jtuples.Sextuple var50 = var48.invert();
    org.jtuples.Nonuple var51 = new org.jtuples.Nonuple();
    int var52 = var51.arity();
    java.lang.Object var53 = var51.third();
    int var54 = var51.arity();
    org.jtuples.Pair var57 = new org.jtuples.Pair();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var59 = new org.jtuples.Sextuple();
    java.lang.String var60 = var59.toString();
    org.jtuples.Sextuple var61 = var59.invert();
    org.jtuples.Quadruple var62 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var57, (java.lang.Object)var58, (java.lang.Object)var59);
    java.lang.Object var63 = var59.third();
    org.jtuples.Nonuple var64 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var66 = var64.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var67 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var69 = var67.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var70 = var64.shiftRight((java.lang.Object)var69);
    org.jtuples.Sextuple var71 = var59.shiftLeft((java.lang.Object)var70);
    org.jtuples.Sextuple var72 = var71.shiftRight();
    org.jtuples.Quintuple var73 = new org.jtuples.Quintuple((java.lang.Object)var46, (java.lang.Object)var50, (java.lang.Object)var54, (java.lang.Object)'#', (java.lang.Object)var72);
    org.jtuples.Pair var75 = new org.jtuples.Pair();
    org.jtuples.Sextuple var76 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var77 = new org.jtuples.Sextuple();
    java.lang.String var78 = var77.toString();
    org.jtuples.Sextuple var79 = var77.invert();
    org.jtuples.Quadruple var80 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var75, (java.lang.Object)var76, (java.lang.Object)var77);
    java.lang.Object var81 = var77.third();
    org.jtuples.Nonuple var82 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var84 = var82.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var87 = var85.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var88 = var82.shiftRight((java.lang.Object)var87);
    org.jtuples.Sextuple var89 = var77.shiftLeft((java.lang.Object)var88);
    org.jtuples.Quintuple var90 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var91 = var90.shiftLeft();
    org.jtuples.Nonuple var93 = new org.jtuples.Nonuple();
    java.lang.Object[] var94 = var93.toArray();
    org.jtuples.Nonuple var96 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var31, (java.lang.Object)var46, (java.lang.Object)var88, (java.lang.Object)var91, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var93, (java.lang.Object)100);
    java.lang.String var97 = var91.toString();
    org.jtuples.Quintuple var98 = var91.shiftRight();
    org.jtuples.Octuple var99 = var7.shiftLeft((java.lang.Object)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(null, null, null, null, null, null)"+ "'", var13.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(null, null, null, null, null, null)"+ "'", var36.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(null, null, null, null, null, null)"+ "'", var49.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(null, null, null, null, null, null)"+ "'", var60.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(null, null, null, null, null, null)"+ "'", var78.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "(null, null, null, null, null)"+ "'", var97.equals("(null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.invert();
    java.lang.Object var7 = var6.third();
    java.lang.Object var8 = var6.ninth();
    java.lang.Object var9 = var6.sixth();
    java.lang.Object var10 = var6.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    org.jtuples.Decuple var4 = new org.jtuples.Decuple();
    java.lang.Object var5 = var4.ninth();
    java.lang.Object var6 = var4.first();
    java.lang.Object[] var7 = var4.toArray();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    org.jtuples.Decuple var15 = var4.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var16 = var15.fifth();
    java.lang.Object var17 = var15.second();
    org.jtuples.Nonuple var18 = var0.shiftRight((java.lang.Object)var15);
    org.jtuples.Nonuple var19 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object[] var2 = var1.toArray();
    java.lang.Object var3 = var1.fourth();
    java.lang.Object var4 = var1.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var1.second();
    int var8 = var1.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    java.lang.Object[] var9 = var2.toArray();
    org.jtuples.Sextuple var10 = var2.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Sextuple var10 = var2.shiftLeft((java.lang.Object)var9);
    org.jtuples.Pair var12 = new org.jtuples.Pair();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    org.jtuples.Sextuple var16 = var14.invert();
    org.jtuples.Quadruple var17 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var12, (java.lang.Object)var13, (java.lang.Object)var14);
    java.lang.Object var18 = var12.second();
    org.jtuples.Pair var19 = var12.invert();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = var20.invert();
    java.lang.Object[] var24 = var23.toArray();
    int var25 = var23.arity();
    org.jtuples.Nonuple var26 = var23.shiftLeft();
    java.lang.Object[] var27 = var23.toArray();
    org.jtuples.Pair var28 = var19.shiftLeft((java.lang.Object)var23);
    org.jtuples.Pair var29 = var28.invert();
    org.jtuples.Octuple var30 = var9.shiftLeft((java.lang.Object)var29);
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    org.jtuples.Sextuple var47 = var46.shiftRight();
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    java.lang.Object[] var49 = var48.toArray();
    org.jtuples.Pair var50 = var48.invert();
    org.jtuples.Septuple var51 = new org.jtuples.Septuple();
    java.lang.Object var52 = var51.fifth();
    org.jtuples.Septuple var53 = var51.shiftRight();
    java.lang.Object var54 = var53.sixth();
    org.jtuples.Triple var55 = new org.jtuples.Triple((java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var53);
    java.lang.Object var56 = var55.second();
    java.lang.Object var57 = var55.first();
    int var58 = var55.arity();
    org.jtuples.Triple var59 = var55.invert();
    org.jtuples.Septuple var62 = new org.jtuples.Septuple();
    java.lang.Object var63 = var62.fifth();
    java.lang.Object var64 = var62.fifth();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var69 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var62, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var68);
    int var70 = var62.arity();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    java.lang.Object var73 = var71.sixth();
    org.jtuples.Septuple var74 = var62.shiftLeft((java.lang.Object)var71);
    java.lang.Object var75 = var71.fifth();
    org.jtuples.Triple var76 = var59.shiftRight((java.lang.Object)var71);
    java.lang.Object[] var77 = var71.toArray();
    org.jtuples.Pair var78 = var29.shiftLeft((java.lang.Object)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object[] var43 = var18.toArray();
    org.jtuples.Sextuple var44 = var18.invert();
    org.jtuples.Sextuple var45 = var18.shiftLeft();
    java.lang.Object var46 = var45.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var17.second();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Pair var43 = var17.shiftLeft((java.lang.Object)var41);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    int var45 = var44.arity();
    java.lang.Object var46 = var44.third();
    int var47 = var44.arity();
    org.jtuples.Pair var50 = new org.jtuples.Pair();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    java.lang.String var53 = var52.toString();
    org.jtuples.Sextuple var54 = var52.invert();
    org.jtuples.Quadruple var55 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var50, (java.lang.Object)var51, (java.lang.Object)var52);
    int var56 = var55.arity();
    org.jtuples.Quadruple var57 = var55.invert();
    java.lang.Object[] var58 = var57.toArray();
    org.jtuples.Pair var60 = new org.jtuples.Pair();
    org.jtuples.Sextuple var61 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var62 = new org.jtuples.Sextuple();
    java.lang.String var63 = var62.toString();
    org.jtuples.Sextuple var64 = var62.invert();
    org.jtuples.Quadruple var65 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var60, (java.lang.Object)var61, (java.lang.Object)var62);
    java.lang.Object var66 = var61.sixth();
    java.lang.Object var67 = var61.fifth();
    org.jtuples.Sextuple var68 = var61.shiftRight();
    org.jtuples.Pair var71 = new org.jtuples.Pair();
    org.jtuples.Sextuple var72 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var73 = new org.jtuples.Sextuple();
    java.lang.String var74 = var73.toString();
    org.jtuples.Sextuple var75 = var73.invert();
    org.jtuples.Quadruple var76 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var71, (java.lang.Object)var72, (java.lang.Object)var73);
    java.lang.Object var77 = var73.third();
    org.jtuples.Nonuple var78 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var80 = var78.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var81 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var83 = var81.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var84 = var78.shiftRight((java.lang.Object)var83);
    org.jtuples.Sextuple var85 = var73.shiftLeft((java.lang.Object)var84);
    java.lang.Object[] var86 = var84.toArray();
    org.jtuples.Decuple var87 = new org.jtuples.Decuple();
    java.lang.Object var88 = var87.ninth();
    org.jtuples.Decuple var89 = new org.jtuples.Decuple();
    java.lang.Object var90 = var89.sixth();
    org.jtuples.Nonuple var91 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var92 = var91.shiftLeft();
    org.jtuples.Decuple var94 = new org.jtuples.Decuple((java.lang.Object)var47, (java.lang.Object)(byte)1, (java.lang.Object)var58, (java.lang.Object)var61, (java.lang.Object)true, (java.lang.Object)var86, (java.lang.Object)var87, (java.lang.Object)var89, (java.lang.Object)var91, (java.lang.Object)9);
    org.jtuples.Pair var95 = var43.shiftRight((java.lang.Object)var58);
    org.jtuples.Pair var96 = var43.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(null, null, null, null, null, null)"+ "'", var53.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(null, null, null, null, null, null)"+ "'", var63.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(null, null, null, null, null, null)"+ "'", var74.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    org.jtuples.Septuple var13 = var12.invert();
    org.jtuples.Septuple var14 = new org.jtuples.Septuple();
    java.lang.Object var15 = var14.fifth();
    org.jtuples.Septuple var16 = var14.shiftRight();
    java.lang.Object[] var17 = var14.toArray();
    org.jtuples.Septuple var18 = var14.invert();
    int var19 = var18.arity();
    org.jtuples.Septuple var20 = var18.shiftLeft();
    org.jtuples.Septuple var21 = var13.shiftRight((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Pair var96 = new org.jtuples.Pair();
    java.lang.Object var97 = var96.second();
    org.jtuples.Quintuple var98 = var85.shiftLeft((java.lang.Object)var96);
    int var99 = var85.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 5);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.shiftLeft();
    java.lang.Object var7 = var3.third();
    java.lang.Object var8 = var3.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object[] var12 = var11.toArray();
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var16 = var13.first();
    int var17 = var13.arity();
    org.jtuples.Nonuple var18 = var13.invert();
    org.jtuples.Decuple var19 = var11.shiftRight((java.lang.Object)var13);
    org.jtuples.Nonuple var20 = var13.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    org.jtuples.Sextuple var8 = var2.invert();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    int var17 = var16.arity();
    org.jtuples.Quadruple var18 = var16.invert();
    java.lang.Object var19 = var16.fourth();
    org.jtuples.Quadruple var20 = var16.invert();
    org.jtuples.Quadruple var21 = var20.shiftRight();
    org.jtuples.Quintuple var23 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var24 = var23.shiftLeft();
    org.jtuples.Pair var26 = new org.jtuples.Pair((java.lang.Object)var24, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    java.lang.Object[] var43 = var41.toArray();
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)var9, (java.lang.Object)var21, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var43);
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    int var57 = var56.arity();
    org.jtuples.Quadruple var58 = var56.invert();
    java.lang.Object[] var59 = var58.toArray();
    org.jtuples.Pair var61 = new org.jtuples.Pair();
    org.jtuples.Sextuple var62 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var63 = new org.jtuples.Sextuple();
    java.lang.String var64 = var63.toString();
    org.jtuples.Sextuple var65 = var63.invert();
    org.jtuples.Quadruple var66 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var61, (java.lang.Object)var62, (java.lang.Object)var63);
    java.lang.Object var67 = var62.sixth();
    java.lang.Object var68 = var62.fifth();
    org.jtuples.Sextuple var69 = var62.shiftRight();
    org.jtuples.Pair var72 = new org.jtuples.Pair();
    org.jtuples.Sextuple var73 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var74 = new org.jtuples.Sextuple();
    java.lang.String var75 = var74.toString();
    org.jtuples.Sextuple var76 = var74.invert();
    org.jtuples.Quadruple var77 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var72, (java.lang.Object)var73, (java.lang.Object)var74);
    java.lang.Object var78 = var74.third();
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var84 = var82.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var85 = var79.shiftRight((java.lang.Object)var84);
    org.jtuples.Sextuple var86 = var74.shiftLeft((java.lang.Object)var85);
    java.lang.Object[] var87 = var85.toArray();
    org.jtuples.Decuple var88 = new org.jtuples.Decuple();
    java.lang.Object var89 = var88.ninth();
    org.jtuples.Decuple var90 = new org.jtuples.Decuple();
    java.lang.Object var91 = var90.sixth();
    org.jtuples.Nonuple var92 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var93 = var92.shiftLeft();
    org.jtuples.Decuple var95 = new org.jtuples.Decuple((java.lang.Object)var48, (java.lang.Object)(byte)1, (java.lang.Object)var59, (java.lang.Object)var62, (java.lang.Object)true, (java.lang.Object)var87, (java.lang.Object)var88, (java.lang.Object)var90, (java.lang.Object)var92, (java.lang.Object)9);
    org.jtuples.Pair var96 = var9.shiftLeft((java.lang.Object)var48);
    java.lang.Object var97 = var9.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(null, null, null, null, null, null)"+ "'", var64.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(null, null, null, null, null, null)"+ "'", var75.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftRight();
    org.jtuples.Octuple var98 = var97.shiftRight();
    java.lang.Object var99 = var97.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Sextuple var9 = var2.shiftRight();
    java.lang.Object var10 = var9.fifth();
    org.jtuples.Septuple var11 = new org.jtuples.Septuple();
    java.lang.Object var12 = var11.fifth();
    java.lang.Object var13 = var11.fifth();
    java.lang.Object var14 = var11.second();
    org.jtuples.Septuple var15 = var11.shiftLeft();
    java.lang.Object var16 = var11.sixth();
    java.lang.Object[] var17 = var11.toArray();
    org.jtuples.Sextuple var18 = var9.shiftLeft((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var45 = var0.invert();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    java.lang.Object[] var16 = var14.toArray();
    java.lang.Object var17 = var14.eighth();
    java.lang.Object var18 = var14.ninth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    org.jtuples.Octuple var3 = var0.shiftLeft();
    org.jtuples.Octuple var4 = var3.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    int var4 = var0.arity();
    int var5 = var0.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.fourth();
    java.lang.Object var2 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.shiftLeft();
    java.lang.Object[] var7 = var3.toArray();
    java.lang.Object var8 = var3.second();
    java.lang.Object var9 = var3.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    java.lang.Object var45 = var0.fourth();
    org.jtuples.Quintuple var46 = var0.shiftRight();
    java.lang.Object var47 = var46.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftRight();
    java.util.List var5 = var4.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    java.lang.Object[] var5 = var0.toArray();
    java.lang.Object var6 = var0.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var2.fourth();
    org.jtuples.Sextuple var4 = var2.shiftRight();
    java.lang.Object var5 = var2.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    org.jtuples.Quadruple var13 = var8.shiftLeft();
    java.lang.Object var14 = var13.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + (-1L)+ "'", var14.equals((-1L)));

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var14.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    java.lang.Object[] var98 = var97.toArray();
    int var99 = var97.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 8);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    java.lang.Object var16 = var3.fifth();
    org.jtuples.Quintuple var17 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var18 = var17.shiftLeft();
    org.jtuples.Pair var20 = new org.jtuples.Pair();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var22 = new org.jtuples.Sextuple();
    java.lang.String var23 = var22.toString();
    org.jtuples.Sextuple var24 = var22.invert();
    org.jtuples.Quadruple var25 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var20, (java.lang.Object)var21, (java.lang.Object)var22);
    java.lang.Object var26 = var21.sixth();
    org.jtuples.Sextuple var27 = var21.invert();
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    int var36 = var35.arity();
    org.jtuples.Quadruple var37 = var35.invert();
    java.lang.Object var38 = var35.fourth();
    org.jtuples.Quadruple var39 = var35.invert();
    org.jtuples.Quadruple var40 = var39.shiftRight();
    org.jtuples.Quintuple var42 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var43 = var42.shiftLeft();
    org.jtuples.Pair var45 = new org.jtuples.Pair((java.lang.Object)var43, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var47 = new org.jtuples.Pair();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    java.lang.String var50 = var49.toString();
    org.jtuples.Sextuple var51 = var49.invert();
    org.jtuples.Quadruple var52 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var49);
    java.lang.Object var53 = var49.third();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var56 = var54.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var57 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var59 = var57.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var60 = var54.shiftRight((java.lang.Object)var59);
    org.jtuples.Sextuple var61 = var49.shiftLeft((java.lang.Object)var60);
    java.lang.Object[] var62 = var60.toArray();
    org.jtuples.Sextuple var63 = new org.jtuples.Sextuple((java.lang.Object)var21, (java.lang.Object)var28, (java.lang.Object)var40, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var62);
    org.jtuples.Quintuple var64 = var18.shiftLeft((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var3.shiftLeft((java.lang.Object)var64);
    java.lang.Object var66 = var65.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(null, null, null, null, null, null)"+ "'", var23.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(null, null, null, null, null, null)"+ "'", var50.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    org.jtuples.Pair var63 = new org.jtuples.Pair();
    org.jtuples.Sextuple var64 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    java.lang.String var66 = var65.toString();
    org.jtuples.Sextuple var67 = var65.invert();
    org.jtuples.Quadruple var68 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var63, (java.lang.Object)var64, (java.lang.Object)var65);
    java.lang.Object var69 = var65.third();
    org.jtuples.Nonuple var70 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var72 = var70.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var73 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var75 = var73.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var76 = var70.shiftRight((java.lang.Object)var75);
    org.jtuples.Sextuple var77 = var65.shiftLeft((java.lang.Object)var76);
    org.jtuples.Sextuple var78 = var77.shiftRight();
    org.jtuples.Pair var79 = new org.jtuples.Pair();
    java.lang.Object[] var80 = var79.toArray();
    org.jtuples.Pair var81 = var79.invert();
    org.jtuples.Septuple var82 = new org.jtuples.Septuple();
    java.lang.Object var83 = var82.fifth();
    org.jtuples.Septuple var84 = var82.shiftRight();
    java.lang.Object var85 = var84.sixth();
    org.jtuples.Triple var86 = new org.jtuples.Triple((java.lang.Object)var78, (java.lang.Object)var79, (java.lang.Object)var84);
    org.jtuples.Decuple var87 = var61.shiftLeft((java.lang.Object)var79);
    org.jtuples.Decuple var88 = var87.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(null, null, null, null, null, null)"+ "'", var66.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var28 = var24.toArray();
    org.jtuples.Triple var29 = var24.invert();
    org.jtuples.Nonuple var30 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var32 = var30.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var33 = var30.first();
    org.jtuples.Nonuple var34 = var30.invert();
    int var35 = var34.arity();
    java.lang.String var36 = var34.toString();
    java.lang.Object var37 = var34.fourth();
    org.jtuples.Pair var39 = new org.jtuples.Pair();
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var41 = new org.jtuples.Sextuple();
    java.lang.String var42 = var41.toString();
    org.jtuples.Sextuple var43 = var41.invert();
    org.jtuples.Quadruple var44 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var41);
    java.lang.Object var45 = var41.third();
    org.jtuples.Nonuple var46 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var46.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var49 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var51 = var49.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var52 = var46.shiftRight((java.lang.Object)var51);
    org.jtuples.Sextuple var53 = var41.shiftLeft((java.lang.Object)var52);
    org.jtuples.Sextuple var54 = var53.shiftRight();
    org.jtuples.Pair var55 = new org.jtuples.Pair();
    java.lang.Object[] var56 = var55.toArray();
    org.jtuples.Pair var57 = var55.invert();
    org.jtuples.Septuple var58 = new org.jtuples.Septuple();
    java.lang.Object var59 = var58.fifth();
    org.jtuples.Septuple var60 = var58.shiftRight();
    java.lang.Object var61 = var60.sixth();
    org.jtuples.Triple var62 = new org.jtuples.Triple((java.lang.Object)var54, (java.lang.Object)var55, (java.lang.Object)var60);
    java.lang.Object var63 = var62.first();
    org.jtuples.Nonuple var64 = var34.shiftRight((java.lang.Object)var62);
    org.jtuples.Triple var65 = var29.shiftLeft((java.lang.Object)var62);
    java.lang.Object var66 = var62.third();
    org.jtuples.Triple var67 = var62.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var36.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(null, null, null, null, null, null)"+ "'", var42.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    org.jtuples.Septuple var3 = var2.shiftLeft();
    org.jtuples.Septuple var4 = var2.shiftRight();
    org.jtuples.Pair var5 = new org.jtuples.Pair((java.lang.Object)var0, (java.lang.Object)var2);
    java.lang.Object var6 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    org.jtuples.Quadruple var10 = var6.invert();
    org.jtuples.Quadruple var11 = var10.shiftRight();
    java.lang.Object var12 = var11.fourth();
    org.jtuples.Quadruple var13 = var11.shiftLeft();
    org.jtuples.Quadruple var14 = var13.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    int var26 = var24.arity();
    java.lang.Object var27 = var24.third();
    org.jtuples.Triple var28 = var24.invert();
    java.lang.Object var29 = var24.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Nonuple var17 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var19 = var17.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var20 = var17.first();
    org.jtuples.Nonuple var21 = var17.invert();
    org.jtuples.Sextuple var22 = var16.shiftRight((java.lang.Object)var17);
    java.lang.Object var23 = var17.third();
    org.jtuples.Nonuple var24 = var17.shiftLeft();
    java.lang.Object var25 = var24.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    org.jtuples.Septuple var3 = var0.invert();
    org.jtuples.Septuple var4 = var3.shiftLeft();
    org.jtuples.Septuple var5 = var4.invert();
    java.lang.Object[] var6 = var5.toArray();
    org.jtuples.Decuple var7 = new org.jtuples.Decuple();
    java.lang.Object var8 = var7.ninth();
    java.lang.Object var9 = var7.first();
    java.lang.Object var10 = var7.fifth();
    java.lang.Object var11 = var7.sixth();
    int var12 = var7.arity();
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    int var14 = var13.arity();
    java.lang.Object var15 = var13.third();
    int var16 = var13.arity();
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object[] var27 = var26.toArray();
    org.jtuples.Pair var29 = new org.jtuples.Pair();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    java.lang.String var32 = var31.toString();
    org.jtuples.Sextuple var33 = var31.invert();
    org.jtuples.Quadruple var34 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var29, (java.lang.Object)var30, (java.lang.Object)var31);
    java.lang.Object var35 = var30.sixth();
    java.lang.Object var36 = var30.fifth();
    org.jtuples.Sextuple var37 = var30.shiftRight();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    org.jtuples.Sextuple var41 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Quadruple var45 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var40, (java.lang.Object)var41, (java.lang.Object)var42);
    java.lang.Object var46 = var42.third();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var49 = var47.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var50 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var52 = var50.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var53 = var47.shiftRight((java.lang.Object)var52);
    org.jtuples.Sextuple var54 = var42.shiftLeft((java.lang.Object)var53);
    java.lang.Object[] var55 = var53.toArray();
    org.jtuples.Decuple var56 = new org.jtuples.Decuple();
    java.lang.Object var57 = var56.ninth();
    org.jtuples.Decuple var58 = new org.jtuples.Decuple();
    java.lang.Object var59 = var58.sixth();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var60.shiftLeft();
    org.jtuples.Decuple var63 = new org.jtuples.Decuple((java.lang.Object)var16, (java.lang.Object)(byte)1, (java.lang.Object)var27, (java.lang.Object)var30, (java.lang.Object)true, (java.lang.Object)var55, (java.lang.Object)var56, (java.lang.Object)var58, (java.lang.Object)var60, (java.lang.Object)9);
    java.lang.Object var64 = var56.seventh();
    java.lang.Object var65 = var56.fifth();
    int var66 = var56.arity();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var68 = var67.shiftLeft();
    org.jtuples.Pair var70 = new org.jtuples.Pair((java.lang.Object)var68, (java.lang.Object)(-1.0f));
    int var71 = var70.arity();
    org.jtuples.Decuple var72 = var56.shiftLeft((java.lang.Object)var70);
    org.jtuples.Decuple var73 = var7.shiftRight((java.lang.Object)var70);
    java.lang.Object var74 = var70.second();
    org.jtuples.Pair var75 = new org.jtuples.Pair((java.lang.Object)var5, var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(null, null, null, null, null, null)"+ "'", var32.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + (-1.0f)+ "'", var74.equals((-1.0f)));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftLeft();
    java.lang.Object[] var5 = var0.toArray();
    org.jtuples.Septuple var6 = var0.shiftLeft();
    java.util.List var7 = var6.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    org.jtuples.Triple var57 = var56.shiftLeft();
    java.lang.Object var58 = var57.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    java.lang.String var89 = var83.toString();
    org.jtuples.Quintuple var90 = var83.shiftRight();
    java.lang.Object var91 = var83.fourth();
    java.lang.Object[] var92 = var83.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(null, null, null, null, null)"+ "'", var89.equals("(null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Nonuple var17 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var19 = var17.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var20 = var17.first();
    org.jtuples.Nonuple var21 = var17.invert();
    org.jtuples.Sextuple var22 = var16.shiftRight((java.lang.Object)var17);
    java.lang.Object var23 = var22.fifth();
    org.jtuples.Sextuple var24 = var22.shiftLeft();
    org.jtuples.Sextuple var25 = var22.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object var1 = var0.fourth();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    java.lang.String var91 = var85.toString();
    org.jtuples.Quintuple var92 = var85.shiftRight();
    org.jtuples.Nonuple var93 = var0.shiftRight((java.lang.Object)var85);
    org.jtuples.Quintuple var94 = var85.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(null, null, null, null, null)"+ "'", var91.equals("(null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    java.lang.Object[] var13 = var10.toArray();
    org.jtuples.Decuple var14 = new org.jtuples.Decuple();
    java.lang.Object var15 = var14.ninth();
    java.lang.Object var16 = var14.first();
    java.lang.Object[] var17 = var14.toArray();
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    org.jtuples.Decuple var25 = var14.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var26 = var25.fifth();
    java.lang.Object var27 = var25.sixth();
    org.jtuples.Decuple var28 = var25.shiftRight();
    org.jtuples.Pair var29 = new org.jtuples.Pair((java.lang.Object)var13, (java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var28 = var24.toArray();
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    int var36 = var35.arity();
    org.jtuples.Quadruple var37 = var35.invert();
    java.lang.Object[] var38 = var37.toArray();
    org.jtuples.Sextuple var39 = new org.jtuples.Sextuple();
    java.lang.Object var40 = var39.third();
    org.jtuples.Quadruple var41 = var37.shiftRight((java.lang.Object)var39);
    int var42 = var37.arity();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple();
    java.lang.Object[] var44 = var43.toArray();
    org.jtuples.Quadruple var45 = var37.shiftRight((java.lang.Object)var44);
    org.jtuples.Pair var47 = new org.jtuples.Pair();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    java.lang.String var50 = var49.toString();
    org.jtuples.Sextuple var51 = var49.invert();
    org.jtuples.Quadruple var52 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var49);
    java.lang.Object var53 = var49.third();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var56 = var54.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var57 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var59 = var57.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var60 = var54.shiftRight((java.lang.Object)var59);
    org.jtuples.Sextuple var61 = var49.shiftLeft((java.lang.Object)var60);
    org.jtuples.Sextuple var62 = var61.shiftRight();
    org.jtuples.Pair var63 = new org.jtuples.Pair();
    java.lang.Object[] var64 = var63.toArray();
    org.jtuples.Pair var65 = var63.invert();
    org.jtuples.Septuple var66 = new org.jtuples.Septuple();
    java.lang.Object var67 = var66.fifth();
    org.jtuples.Septuple var68 = var66.shiftRight();
    java.lang.Object var69 = var68.sixth();
    org.jtuples.Triple var70 = new org.jtuples.Triple((java.lang.Object)var62, (java.lang.Object)var63, (java.lang.Object)var68);
    java.lang.Object var71 = var70.second();
    java.lang.Object var72 = var70.first();
    org.jtuples.Quadruple var73 = var37.shiftLeft((java.lang.Object)var70);
    org.jtuples.Quadruple var74 = var73.shiftRight();
    org.jtuples.Quadruple var75 = var73.shiftLeft();
    org.jtuples.Triple var76 = var24.shiftRight((java.lang.Object)var73);
    java.lang.Object var77 = var76.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(null, null, null, null, null, null)"+ "'", var50.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var40.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    java.lang.Object var2 = var0.fifth();
    org.jtuples.Octuple var3 = var0.shiftLeft();
    java.lang.Object var4 = var3.sixth();
    java.lang.Object var5 = var3.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Nonuple var89 = var85.shiftRight();
    org.jtuples.Nonuple var90 = var85.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    int var5 = var0.arity();
    org.jtuples.Nonuple var6 = new org.jtuples.Nonuple();
    int var7 = var6.arity();
    java.lang.Object var8 = var6.third();
    int var9 = var6.arity();
    org.jtuples.Pair var12 = new org.jtuples.Pair();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    org.jtuples.Sextuple var16 = var14.invert();
    org.jtuples.Quadruple var17 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var12, (java.lang.Object)var13, (java.lang.Object)var14);
    int var18 = var17.arity();
    org.jtuples.Quadruple var19 = var17.invert();
    java.lang.Object[] var20 = var19.toArray();
    org.jtuples.Pair var22 = new org.jtuples.Pair();
    org.jtuples.Sextuple var23 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    java.lang.String var25 = var24.toString();
    org.jtuples.Sextuple var26 = var24.invert();
    org.jtuples.Quadruple var27 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var22, (java.lang.Object)var23, (java.lang.Object)var24);
    java.lang.Object var28 = var23.sixth();
    java.lang.Object var29 = var23.fifth();
    org.jtuples.Sextuple var30 = var23.shiftRight();
    org.jtuples.Pair var33 = new org.jtuples.Pair();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    java.lang.String var36 = var35.toString();
    org.jtuples.Sextuple var37 = var35.invert();
    org.jtuples.Quadruple var38 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var33, (java.lang.Object)var34, (java.lang.Object)var35);
    java.lang.Object var39 = var35.third();
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var45 = var43.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var46 = var40.shiftRight((java.lang.Object)var45);
    org.jtuples.Sextuple var47 = var35.shiftLeft((java.lang.Object)var46);
    java.lang.Object[] var48 = var46.toArray();
    org.jtuples.Decuple var49 = new org.jtuples.Decuple();
    java.lang.Object var50 = var49.ninth();
    org.jtuples.Decuple var51 = new org.jtuples.Decuple();
    java.lang.Object var52 = var51.sixth();
    org.jtuples.Nonuple var53 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var54 = var53.shiftLeft();
    org.jtuples.Decuple var56 = new org.jtuples.Decuple((java.lang.Object)var9, (java.lang.Object)(byte)1, (java.lang.Object)var20, (java.lang.Object)var23, (java.lang.Object)true, (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var51, (java.lang.Object)var53, (java.lang.Object)9);
    java.lang.Object var57 = var49.seventh();
    java.lang.Object var58 = var49.fifth();
    int var59 = var49.arity();
    org.jtuples.Quintuple var60 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var61 = var60.shiftLeft();
    org.jtuples.Pair var63 = new org.jtuples.Pair((java.lang.Object)var61, (java.lang.Object)(-1.0f));
    int var64 = var63.arity();
    org.jtuples.Decuple var65 = var49.shiftLeft((java.lang.Object)var63);
    org.jtuples.Decuple var66 = var0.shiftRight((java.lang.Object)var63);
    org.jtuples.Decuple var67 = var66.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(null, null, null, null, null, null)"+ "'", var25.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(null, null, null, null, null, null)"+ "'", var36.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var3 = var0.first();
    org.jtuples.Nonuple var4 = var0.invert();
    int var5 = var4.arity();
    org.jtuples.Nonuple var6 = var4.invert();
    int var7 = var4.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var1 = var0.shiftLeft();
    org.jtuples.Quintuple var3 = var1.shiftRight((java.lang.Object)'4');
    org.jtuples.Quintuple var4 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var5 = var4.shiftLeft();
    org.jtuples.Pair var7 = new org.jtuples.Pair((java.lang.Object)var5, (java.lang.Object)(-1.0f));
    java.util.List var8 = var7.asList();
    org.jtuples.Quintuple var9 = var1.shiftLeft((java.lang.Object)var8);
    org.jtuples.Quintuple var10 = var1.invert();
    java.lang.Object[] var11 = var10.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.fourth();
    org.jtuples.Decuple var7 = var4.shiftLeft();
    java.lang.Object var8 = var7.first();
    int var9 = var7.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.sixth();
    java.lang.Object var52 = var43.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    org.jtuples.Triple var25 = var24.invert();
    int var26 = var25.arity();
    java.lang.Object[] var27 = var25.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.second();
    org.jtuples.Decuple var4 = var0.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    org.jtuples.Nonuple var5 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var7 = var5.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var8 = var5.invert();
    java.lang.Object[] var9 = var8.toArray();
    int var10 = var8.arity();
    org.jtuples.Nonuple var11 = var8.shiftLeft();
    java.lang.Object[] var12 = var8.toArray();
    org.jtuples.Decuple var13 = var0.shiftLeft((java.lang.Object)var8);
    java.lang.Object var14 = var13.fifth();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var18.third();
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var28 = var26.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var29 = var23.shiftRight((java.lang.Object)var28);
    org.jtuples.Sextuple var30 = var18.shiftLeft((java.lang.Object)var29);
    org.jtuples.Sextuple var31 = var30.shiftRight();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    java.lang.Object[] var33 = var32.toArray();
    org.jtuples.Pair var34 = var32.invert();
    org.jtuples.Septuple var35 = new org.jtuples.Septuple();
    java.lang.Object var36 = var35.fifth();
    org.jtuples.Septuple var37 = var35.shiftRight();
    java.lang.Object var38 = var37.sixth();
    org.jtuples.Triple var39 = new org.jtuples.Triple((java.lang.Object)var31, (java.lang.Object)var32, (java.lang.Object)var37);
    java.lang.Object var40 = var39.first();
    org.jtuples.Triple var41 = var39.shiftRight();
    org.jtuples.Septuple var42 = new org.jtuples.Septuple();
    java.lang.Object var43 = var42.fifth();
    java.lang.Object var44 = var42.fifth();
    java.lang.Object[] var45 = var42.toArray();
    org.jtuples.Triple var46 = new org.jtuples.Triple((java.lang.Object)var13, (java.lang.Object)var41, (java.lang.Object)var45);
    java.lang.Object[] var47 = var46.toArray();
    int var48 = var46.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 3);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Pair var7 = var1.shiftLeft();
    org.jtuples.Pair var8 = var7.shiftLeft();
    org.jtuples.Pair var9 = var8.invert();
    java.lang.Object var10 = var8.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    int var2 = var0.arity();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.second();
    java.lang.Object var5 = var0.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var0.sixth();
    java.lang.Object[] var6 = var0.toArray();
    org.jtuples.Septuple var7 = new org.jtuples.Septuple();
    java.lang.Object var8 = var7.fifth();
    org.jtuples.Septuple var9 = var7.shiftRight();
    org.jtuples.Septuple var10 = var7.invert();
    org.jtuples.Septuple var11 = var10.shiftLeft();
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var15 = var12.first();
    org.jtuples.Nonuple var16 = var12.shiftLeft();
    org.jtuples.Triple var17 = new org.jtuples.Triple();
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    java.lang.Object var25 = var21.third();
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var28 = var26.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var29 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var31 = var29.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var32 = var26.shiftRight((java.lang.Object)var31);
    org.jtuples.Sextuple var33 = var21.shiftLeft((java.lang.Object)var32);
    java.lang.Object var34 = var21.fifth();
    org.jtuples.Quintuple var35 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var36 = var35.shiftLeft();
    org.jtuples.Pair var38 = new org.jtuples.Pair();
    org.jtuples.Sextuple var39 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Quadruple var43 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var38, (java.lang.Object)var39, (java.lang.Object)var40);
    java.lang.Object var44 = var39.sixth();
    org.jtuples.Sextuple var45 = var39.invert();
    org.jtuples.Pair var46 = new org.jtuples.Pair();
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    int var54 = var53.arity();
    org.jtuples.Quadruple var55 = var53.invert();
    java.lang.Object var56 = var53.fourth();
    org.jtuples.Quadruple var57 = var53.invert();
    org.jtuples.Quadruple var58 = var57.shiftRight();
    org.jtuples.Quintuple var60 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var61 = var60.shiftLeft();
    org.jtuples.Pair var63 = new org.jtuples.Pair((java.lang.Object)var61, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var65 = new org.jtuples.Pair();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var67 = new org.jtuples.Sextuple();
    java.lang.String var68 = var67.toString();
    org.jtuples.Sextuple var69 = var67.invert();
    org.jtuples.Quadruple var70 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var65, (java.lang.Object)var66, (java.lang.Object)var67);
    java.lang.Object var71 = var67.third();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var72.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var75 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var77 = var75.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var78 = var72.shiftRight((java.lang.Object)var77);
    org.jtuples.Sextuple var79 = var67.shiftLeft((java.lang.Object)var78);
    java.lang.Object[] var80 = var78.toArray();
    org.jtuples.Sextuple var81 = new org.jtuples.Sextuple((java.lang.Object)var39, (java.lang.Object)var46, (java.lang.Object)var58, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var80);
    org.jtuples.Quintuple var82 = var36.shiftLeft((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var21.shiftLeft((java.lang.Object)var82);
    java.lang.Object var84 = var82.fifth();
    org.jtuples.Quintuple var85 = new org.jtuples.Quintuple((java.lang.Object)var6, (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var17, (java.lang.Object)var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(null, null, null, null, null, null)"+ "'", var68.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Sextuple var10 = var2.shiftLeft((java.lang.Object)var9);
    org.jtuples.Pair var12 = new org.jtuples.Pair();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    org.jtuples.Sextuple var16 = var14.invert();
    org.jtuples.Quadruple var17 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var12, (java.lang.Object)var13, (java.lang.Object)var14);
    java.lang.Object var18 = var12.second();
    org.jtuples.Pair var19 = var12.invert();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = var20.invert();
    java.lang.Object[] var24 = var23.toArray();
    int var25 = var23.arity();
    org.jtuples.Nonuple var26 = var23.shiftLeft();
    java.lang.Object[] var27 = var23.toArray();
    org.jtuples.Pair var28 = var19.shiftLeft((java.lang.Object)var23);
    org.jtuples.Pair var29 = var28.invert();
    org.jtuples.Octuple var30 = var9.shiftLeft((java.lang.Object)var29);
    org.jtuples.Octuple var31 = var9.shiftLeft();
    int var32 = var9.arity();
    java.lang.Object var33 = var9.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    java.lang.Object var42 = var18.fourth();
    java.lang.Object[] var43 = var18.toArray();
    org.jtuples.Sextuple var44 = var18.invert();
    org.jtuples.Sextuple var45 = var18.shiftLeft();
    int var46 = var18.arity();
    org.jtuples.Sextuple var47 = var18.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftLeft();
    org.jtuples.Octuple var97 = var96.invert();
    java.lang.Object[] var98 = var97.toArray();
    java.lang.Object var99 = var97.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = var17.shiftRight();
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    java.lang.Object[] var20 = var19.toArray();
    org.jtuples.Pair var21 = var19.invert();
    org.jtuples.Septuple var22 = new org.jtuples.Septuple();
    java.lang.Object var23 = var22.fifth();
    org.jtuples.Septuple var24 = var22.shiftRight();
    java.lang.Object var25 = var24.sixth();
    org.jtuples.Triple var26 = new org.jtuples.Triple((java.lang.Object)var18, (java.lang.Object)var19, (java.lang.Object)var24);
    java.lang.Object var27 = var26.first();
    org.jtuples.Triple var28 = var26.shiftRight();
    java.lang.Object var29 = var28.third();
    org.jtuples.Octuple var30 = var0.shiftRight((java.lang.Object)var28);
    java.lang.Object var31 = var0.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    int var13 = var8.arity();
    org.jtuples.Quintuple var14 = new org.jtuples.Quintuple();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Quadruple var16 = var8.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    java.lang.String var21 = var20.toString();
    org.jtuples.Sextuple var22 = var20.invert();
    org.jtuples.Quadruple var23 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var18, (java.lang.Object)var19, (java.lang.Object)var20);
    int var24 = var23.arity();
    org.jtuples.Quadruple var25 = var23.invert();
    java.lang.Object var26 = var25.fourth();
    org.jtuples.Quadruple var27 = var8.shiftRight((java.lang.Object)var25);
    java.lang.Object var28 = var8.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(null, null, null, null, null, null)"+ "'", var21.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1L)+ "'", var26.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + (-1L)+ "'", var28.equals((-1L)));

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    java.lang.Object[] var4 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = var50.invert();
    org.jtuples.Pair var54 = new org.jtuples.Pair();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var56 = new org.jtuples.Sextuple();
    java.lang.String var57 = var56.toString();
    org.jtuples.Sextuple var58 = var56.invert();
    org.jtuples.Quadruple var59 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var54, (java.lang.Object)var55, (java.lang.Object)var56);
    java.lang.Object var60 = var56.third();
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var66 = var64.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var67 = var61.shiftRight((java.lang.Object)var66);
    org.jtuples.Sextuple var68 = var56.shiftLeft((java.lang.Object)var67);
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    int var73 = var72.arity();
    java.lang.Object var74 = var72.third();
    int var75 = var72.arity();
    org.jtuples.Pair var78 = new org.jtuples.Pair();
    org.jtuples.Sextuple var79 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var80 = new org.jtuples.Sextuple();
    java.lang.String var81 = var80.toString();
    org.jtuples.Sextuple var82 = var80.invert();
    org.jtuples.Quadruple var83 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var78, (java.lang.Object)var79, (java.lang.Object)var80);
    java.lang.Object var84 = var80.third();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var87 = var85.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var90 = var88.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var91 = var85.shiftRight((java.lang.Object)var90);
    org.jtuples.Sextuple var92 = var80.shiftLeft((java.lang.Object)var91);
    org.jtuples.Sextuple var93 = var92.shiftRight();
    org.jtuples.Quintuple var94 = new org.jtuples.Quintuple((java.lang.Object)var67, (java.lang.Object)var71, (java.lang.Object)var75, (java.lang.Object)'#', (java.lang.Object)var93);
    org.jtuples.Sextuple var96 = var71.shiftLeft((java.lang.Object)(byte)10);
    org.jtuples.Decuple var97 = var52.shiftLeft((java.lang.Object)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(null, null, null, null, null, null)"+ "'", var57.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(null, null, null, null, null, null)"+ "'", var81.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object[] var7 = var1.toArray();
    org.jtuples.Pair var8 = var1.invert();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var9.shiftLeft();
    org.jtuples.Pair var11 = var8.shiftLeft((java.lang.Object)var9);
    java.lang.Object var12 = var8.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object[] var6 = var4.toArray();
    java.lang.Object var7 = var4.first();
    java.lang.Object var8 = var4.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var12 = var11.third();
    java.lang.Object var13 = var11.eighth();
    java.lang.Object var14 = var11.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.second();
    java.lang.Object var4 = var0.second();
    org.jtuples.Nonuple var5 = new org.jtuples.Nonuple();
    int var6 = var5.arity();
    java.lang.Object var7 = var5.third();
    int var8 = var5.arity();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    int var17 = var16.arity();
    org.jtuples.Quadruple var18 = var16.invert();
    java.lang.Object[] var19 = var18.toArray();
    org.jtuples.Pair var21 = new org.jtuples.Pair();
    org.jtuples.Sextuple var22 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var23 = new org.jtuples.Sextuple();
    java.lang.String var24 = var23.toString();
    org.jtuples.Sextuple var25 = var23.invert();
    org.jtuples.Quadruple var26 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var21, (java.lang.Object)var22, (java.lang.Object)var23);
    java.lang.Object var27 = var22.sixth();
    java.lang.Object var28 = var22.fifth();
    org.jtuples.Sextuple var29 = var22.shiftRight();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jtuples.Decuple var48 = new org.jtuples.Decuple();
    java.lang.Object var49 = var48.ninth();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.sixth();
    org.jtuples.Nonuple var52 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var53 = var52.shiftLeft();
    org.jtuples.Decuple var55 = new org.jtuples.Decuple((java.lang.Object)var8, (java.lang.Object)(byte)1, (java.lang.Object)var19, (java.lang.Object)var22, (java.lang.Object)true, (java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)9);
    org.jtuples.Pair var57 = new org.jtuples.Pair();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var59 = new org.jtuples.Sextuple();
    java.lang.String var60 = var59.toString();
    org.jtuples.Sextuple var61 = var59.invert();
    org.jtuples.Quadruple var62 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var57, (java.lang.Object)var58, (java.lang.Object)var59);
    org.jtuples.Pair var63 = var57.shiftLeft();
    org.jtuples.Decuple var64 = var50.shiftRight((java.lang.Object)var63);
    org.jtuples.Pair var65 = var63.invert();
    org.jtuples.Decuple var66 = var0.shiftLeft((java.lang.Object)var63);
    java.lang.Object var67 = var66.tenth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(null, null, null, null, null, null)"+ "'", var24.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(null, null, null, null, null, null)"+ "'", var60.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.fourth();
    java.lang.Object var4 = var0.third();
    java.lang.Object var5 = var0.second();
    java.lang.Object[] var6 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.sixth();
    org.jtuples.Pair var53 = new org.jtuples.Pair();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    java.lang.String var56 = var55.toString();
    org.jtuples.Sextuple var57 = var55.invert();
    org.jtuples.Quadruple var58 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var53, (java.lang.Object)var54, (java.lang.Object)var55);
    java.lang.Object var59 = var55.third();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var60.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var63 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var65 = var63.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var66 = var60.shiftRight((java.lang.Object)var65);
    org.jtuples.Sextuple var67 = var55.shiftLeft((java.lang.Object)var66);
    org.jtuples.Sextuple var68 = var67.shiftRight();
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    java.lang.Object[] var70 = var69.toArray();
    org.jtuples.Pair var71 = var69.invert();
    org.jtuples.Septuple var72 = new org.jtuples.Septuple();
    java.lang.Object var73 = var72.fifth();
    org.jtuples.Septuple var74 = var72.shiftRight();
    java.lang.Object var75 = var74.sixth();
    org.jtuples.Triple var76 = new org.jtuples.Triple((java.lang.Object)var68, (java.lang.Object)var69, (java.lang.Object)var74);
    java.lang.Object var77 = var76.second();
    org.jtuples.Triple var79 = var76.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var80 = var76.toArray();
    org.jtuples.Triple var81 = var76.invert();
    java.lang.Object var82 = var76.second();
    org.jtuples.Triple var83 = var76.shiftLeft();
    java.lang.Object var84 = var76.first();
    org.jtuples.Decuple var85 = var43.shiftRight(var84);
    java.lang.Object var86 = var43.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    java.lang.Object var7 = var5.fifth();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var12 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var5, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var11);
    int var13 = var5.arity();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    java.lang.Object var16 = var14.sixth();
    org.jtuples.Septuple var17 = var5.shiftLeft((java.lang.Object)var14);
    int var18 = var14.arity();
    org.jtuples.Octuple var19 = var0.shiftLeft((java.lang.Object)var14);
    org.jtuples.Pair var21 = new org.jtuples.Pair();
    org.jtuples.Sextuple var22 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var23 = new org.jtuples.Sextuple();
    java.lang.String var24 = var23.toString();
    org.jtuples.Sextuple var25 = var23.invert();
    org.jtuples.Quadruple var26 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var21, (java.lang.Object)var22, (java.lang.Object)var23);
    java.lang.Object var27 = var23.third();
    org.jtuples.Nonuple var28 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var30 = var28.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var33 = var31.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var34 = var28.shiftRight((java.lang.Object)var33);
    org.jtuples.Sextuple var35 = var23.shiftLeft((java.lang.Object)var34);
    org.jtuples.Sextuple var36 = var35.shiftRight();
    org.jtuples.Pair var37 = new org.jtuples.Pair();
    java.lang.Object[] var38 = var37.toArray();
    org.jtuples.Pair var39 = var37.invert();
    org.jtuples.Septuple var40 = new org.jtuples.Septuple();
    java.lang.Object var41 = var40.fifth();
    org.jtuples.Septuple var42 = var40.shiftRight();
    java.lang.Object var43 = var42.sixth();
    org.jtuples.Triple var44 = new org.jtuples.Triple((java.lang.Object)var36, (java.lang.Object)var37, (java.lang.Object)var42);
    java.lang.Object var45 = var44.second();
    org.jtuples.Triple var47 = var44.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var48 = var44.toArray();
    org.jtuples.Triple var49 = var44.invert();
    org.jtuples.Nonuple var50 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var52 = var50.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var53 = var50.first();
    org.jtuples.Nonuple var54 = var50.invert();
    int var55 = var54.arity();
    java.lang.String var56 = var54.toString();
    java.lang.Object var57 = var54.fourth();
    org.jtuples.Pair var59 = new org.jtuples.Pair();
    org.jtuples.Sextuple var60 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var61 = new org.jtuples.Sextuple();
    java.lang.String var62 = var61.toString();
    org.jtuples.Sextuple var63 = var61.invert();
    org.jtuples.Quadruple var64 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var59, (java.lang.Object)var60, (java.lang.Object)var61);
    java.lang.Object var65 = var61.third();
    org.jtuples.Nonuple var66 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var68 = var66.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var69 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var71 = var69.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var72 = var66.shiftRight((java.lang.Object)var71);
    org.jtuples.Sextuple var73 = var61.shiftLeft((java.lang.Object)var72);
    org.jtuples.Sextuple var74 = var73.shiftRight();
    org.jtuples.Pair var75 = new org.jtuples.Pair();
    java.lang.Object[] var76 = var75.toArray();
    org.jtuples.Pair var77 = var75.invert();
    org.jtuples.Septuple var78 = new org.jtuples.Septuple();
    java.lang.Object var79 = var78.fifth();
    org.jtuples.Septuple var80 = var78.shiftRight();
    java.lang.Object var81 = var80.sixth();
    org.jtuples.Triple var82 = new org.jtuples.Triple((java.lang.Object)var74, (java.lang.Object)var75, (java.lang.Object)var80);
    java.lang.Object var83 = var82.first();
    org.jtuples.Nonuple var84 = var54.shiftRight((java.lang.Object)var82);
    org.jtuples.Triple var85 = var49.shiftLeft((java.lang.Object)var82);
    java.lang.Object var86 = var82.third();
    org.jtuples.Octuple var87 = var19.shiftRight(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(null, null, null, null, null, null)"+ "'", var24.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(null, null, null, null, null, null)"+ "'", var62.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.fourth();
    org.jtuples.Quintuple var2 = var0.shiftLeft();
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(null, null, null, null, null)"+ "'", var3.equals("(null, null, null, null, null)"));

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftRight();
    java.lang.Object var97 = var96.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    org.jtuples.Octuple var96 = var0.shiftRight();
    java.lang.Object var97 = var96.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    org.jtuples.Decuple var12 = new org.jtuples.Decuple();
    java.lang.Object var13 = var12.ninth();
    java.lang.Object var14 = var12.first();
    java.lang.Object var15 = var12.seventh();
    org.jtuples.Decuple var16 = var12.shiftLeft();
    java.lang.Object var17 = var16.second();
    java.lang.Object var18 = var16.first();
    int var19 = var16.arity();
    org.jtuples.Decuple var20 = var16.shiftRight();
    java.lang.Object var21 = var20.seventh();
    org.jtuples.Decuple var22 = var11.shiftRight((java.lang.Object)var20);
    java.lang.Object var23 = var11.fourth();
    java.lang.Object var24 = var11.first();
    java.lang.Object var25 = var11.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var17.second();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Pair var43 = var17.shiftLeft((java.lang.Object)var41);
    org.jtuples.Pair var44 = var43.shiftLeft();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var47 = var45.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var48 = var45.invert();
    java.lang.Object[] var49 = var48.toArray();
    int var50 = var48.arity();
    org.jtuples.Nonuple var51 = var48.shiftLeft();
    org.jtuples.Pair var52 = var43.shiftLeft((java.lang.Object)var51);
    java.lang.Object[] var53 = var43.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    java.lang.Object var2 = var0.sixth();
    java.util.List var3 = var0.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.seventh();
    java.lang.Object var52 = var43.fifth();
    int var53 = var43.arity();
    org.jtuples.Quintuple var54 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var55 = var54.shiftLeft();
    org.jtuples.Pair var57 = new org.jtuples.Pair((java.lang.Object)var55, (java.lang.Object)(-1.0f));
    int var58 = var57.arity();
    org.jtuples.Decuple var59 = var43.shiftLeft((java.lang.Object)var57);
    java.lang.Object var60 = var43.eighth();
    java.lang.Object var61 = var43.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    int var57 = var46.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 6);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    int var13 = var8.arity();
    org.jtuples.Quintuple var14 = new org.jtuples.Quintuple();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Quadruple var16 = var8.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    java.lang.String var21 = var20.toString();
    org.jtuples.Sextuple var22 = var20.invert();
    org.jtuples.Quadruple var23 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var18, (java.lang.Object)var19, (java.lang.Object)var20);
    int var24 = var23.arity();
    org.jtuples.Quadruple var25 = var23.invert();
    java.lang.Object var26 = var25.fourth();
    org.jtuples.Quadruple var27 = var8.shiftRight((java.lang.Object)var25);
    int var28 = var8.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(null, null, null, null, null, null)"+ "'", var21.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + (-1L)+ "'", var26.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 4);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    org.jtuples.Decuple var62 = var50.shiftRight();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    org.jtuples.Pair var70 = var64.shiftLeft();
    org.jtuples.Decuple var71 = var50.shiftLeft((java.lang.Object)var64);
    org.jtuples.Decuple var72 = var71.shiftLeft();
    int var73 = var71.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 10);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    java.lang.Object var7 = var5.fifth();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var12 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var5, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var11);
    int var13 = var5.arity();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    java.lang.Object var16 = var14.sixth();
    org.jtuples.Septuple var17 = var5.shiftLeft((java.lang.Object)var14);
    int var18 = var14.arity();
    org.jtuples.Octuple var19 = var0.shiftLeft((java.lang.Object)var14);
    int var20 = var0.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 8);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object[] var9 = var8.toArray();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    java.lang.Object var11 = var10.third();
    org.jtuples.Quadruple var12 = var8.shiftRight((java.lang.Object)var10);
    int var13 = var8.arity();
    org.jtuples.Quintuple var14 = new org.jtuples.Quintuple();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Quadruple var16 = var8.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    java.lang.String var21 = var20.toString();
    org.jtuples.Sextuple var22 = var20.invert();
    org.jtuples.Quadruple var23 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var18, (java.lang.Object)var19, (java.lang.Object)var20);
    java.lang.Object var24 = var20.third();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var28 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var30 = var28.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var31 = var25.shiftRight((java.lang.Object)var30);
    org.jtuples.Sextuple var32 = var20.shiftLeft((java.lang.Object)var31);
    org.jtuples.Sextuple var33 = var32.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    java.lang.Object[] var35 = var34.toArray();
    org.jtuples.Pair var36 = var34.invert();
    org.jtuples.Septuple var37 = new org.jtuples.Septuple();
    java.lang.Object var38 = var37.fifth();
    org.jtuples.Septuple var39 = var37.shiftRight();
    java.lang.Object var40 = var39.sixth();
    org.jtuples.Triple var41 = new org.jtuples.Triple((java.lang.Object)var33, (java.lang.Object)var34, (java.lang.Object)var39);
    java.lang.Object var42 = var41.second();
    java.lang.Object var43 = var41.first();
    org.jtuples.Quadruple var44 = var8.shiftLeft((java.lang.Object)var41);
    org.jtuples.Triple var45 = var41.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(null, null, null, null, null, null)"+ "'", var21.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    java.lang.Object var34 = var12.sixth();
    org.jtuples.Septuple var35 = var12.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var8.fourth();
    int var10 = var8.arity();
    org.jtuples.Quadruple var11 = var8.shiftLeft();
    org.jtuples.Quadruple var12 = var8.shiftRight();
    org.jtuples.Pair var14 = new org.jtuples.Pair();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Quadruple var19 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var14, (java.lang.Object)var15, (java.lang.Object)var16);
    int var20 = var19.arity();
    org.jtuples.Quadruple var21 = var19.invert();
    java.lang.Object[] var22 = var21.toArray();
    org.jtuples.Pair var24 = new org.jtuples.Pair();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    java.lang.String var27 = var26.toString();
    org.jtuples.Sextuple var28 = var26.invert();
    org.jtuples.Quadruple var29 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var26);
    java.lang.Object var30 = var26.third();
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var33 = var31.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = var31.shiftRight((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = var26.shiftLeft((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var38.shiftRight();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    java.lang.Object[] var41 = var40.toArray();
    org.jtuples.Pair var42 = var40.invert();
    org.jtuples.Septuple var43 = new org.jtuples.Septuple();
    java.lang.Object var44 = var43.fifth();
    org.jtuples.Septuple var45 = var43.shiftRight();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Triple var47 = new org.jtuples.Triple((java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var45);
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    int var55 = var54.arity();
    org.jtuples.Quadruple var56 = var54.invert();
    java.lang.Object[] var57 = var56.toArray();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    java.lang.Object var59 = var58.third();
    org.jtuples.Quadruple var60 = var56.shiftRight((java.lang.Object)var58);
    int var61 = var56.arity();
    org.jtuples.Quadruple var62 = var56.shiftLeft();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    java.lang.Object var70 = var64.second();
    org.jtuples.Pair var71 = var64.invert();
    org.jtuples.Nonuple var72 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var72.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var75 = var72.invert();
    java.lang.Object[] var76 = var75.toArray();
    int var77 = var75.arity();
    org.jtuples.Nonuple var78 = var75.shiftLeft();
    java.lang.Object[] var79 = var75.toArray();
    org.jtuples.Pair var80 = var71.shiftLeft((java.lang.Object)var75);
    org.jtuples.Quintuple var81 = new org.jtuples.Quintuple((java.lang.Object)var12, (java.lang.Object)var21, (java.lang.Object)var40, (java.lang.Object)var56, (java.lang.Object)var71);
    org.jtuples.Quadruple var82 = var12.shiftLeft();
    int var83 = var12.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + (-1L)+ "'", var9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(null, null, null, null, null, null)"+ "'", var27.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 4);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object var10 = var6.first();
    org.jtuples.Octuple var11 = new org.jtuples.Octuple();
    org.jtuples.Octuple var12 = var11.shiftRight();
    org.jtuples.Octuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = var6.shiftRight((java.lang.Object)var11);
    java.lang.Object var15 = var14.fourth();
    java.lang.Object var16 = var14.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (-1L)+ "'", var10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + (-1L)+ "'", var16.equals((-1L)));

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var50.ninth();
    java.lang.Object var52 = var50.seventh();
    java.lang.Object[] var53 = var50.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.util.List var7 = var3.asList();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Sextuple var24 = var23.shiftRight();
    org.jtuples.Sextuple var25 = var3.shiftRight((java.lang.Object)var24);
    java.lang.Object var26 = var3.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object var10 = var6.first();
    java.lang.Object var11 = var6.third();
    org.jtuples.Quadruple var12 = var6.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + (-1L)+ "'", var10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var28 = var24.toArray();
    org.jtuples.Triple var29 = var24.invert();
    java.lang.Object var30 = var24.second();
    org.jtuples.Triple var31 = var24.shiftLeft();
    org.jtuples.Triple var32 = var31.shiftRight();
    org.jtuples.Triple var33 = var32.invert();
    java.lang.Object var34 = var32.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var4.sixth();
    org.jtuples.Sextuple var10 = var4.invert();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object var21 = var18.fourth();
    org.jtuples.Quadruple var22 = var18.invert();
    org.jtuples.Quadruple var23 = var22.shiftRight();
    org.jtuples.Quintuple var25 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var26 = var25.shiftLeft();
    org.jtuples.Pair var28 = new org.jtuples.Pair((java.lang.Object)var26, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var32.third();
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var42 = var40.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var43 = var37.shiftRight((java.lang.Object)var42);
    org.jtuples.Sextuple var44 = var32.shiftLeft((java.lang.Object)var43);
    java.lang.Object[] var45 = var43.toArray();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple((java.lang.Object)var4, (java.lang.Object)var11, (java.lang.Object)var23, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var45);
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    java.lang.String var51 = var50.toString();
    org.jtuples.Sextuple var52 = var50.invert();
    org.jtuples.Quadruple var53 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var48, (java.lang.Object)var49, (java.lang.Object)var50);
    org.jtuples.Pair var54 = var48.shiftLeft();
    org.jtuples.Pair var55 = var54.shiftLeft();
    org.jtuples.Triple var56 = new org.jtuples.Triple((java.lang.Object)var1, (java.lang.Object)var46, (java.lang.Object)var54);
    java.lang.Object var57 = var54.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(null, null, null, null, null, null)"+ "'", var51.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.second();
    org.jtuples.Septuple var4 = var0.shiftRight();
    java.lang.Object[] var5 = var0.toArray();
    org.jtuples.Septuple var6 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.invert();
    java.lang.Object var7 = var6.third();
    java.lang.Object var8 = var6.ninth();
    java.lang.Object var9 = var6.sixth();
    int var10 = var6.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object[] var10 = var8.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    java.lang.Object var11 = var6.sixth();
    org.jtuples.Sextuple var12 = var6.invert();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Pair var15 = new org.jtuples.Pair();
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    java.lang.String var18 = var17.toString();
    org.jtuples.Sextuple var19 = var17.invert();
    org.jtuples.Quadruple var20 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var15, (java.lang.Object)var16, (java.lang.Object)var17);
    int var21 = var20.arity();
    org.jtuples.Quadruple var22 = var20.invert();
    java.lang.Object var23 = var20.fourth();
    org.jtuples.Quadruple var24 = var20.invert();
    org.jtuples.Quadruple var25 = var24.shiftRight();
    org.jtuples.Quintuple var27 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var28 = var27.shiftLeft();
    org.jtuples.Pair var30 = new org.jtuples.Pair((java.lang.Object)var28, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple((java.lang.Object)var6, (java.lang.Object)var13, (java.lang.Object)var25, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var47);
    java.lang.Object[] var49 = var25.toArray();
    org.jtuples.Nonuple var50 = var0.shiftLeft((java.lang.Object)var25);
    java.lang.Object var51 = var25.second();
    java.lang.Object[] var52 = var25.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(null, null, null, null, null, null)"+ "'", var18.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    java.lang.Object var2 = var0.fifth();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Septuple var4 = new org.jtuples.Septuple();
    java.lang.Object var5 = var4.fifth();
    java.lang.Object var6 = var4.fifth();
    java.lang.Object var7 = var4.second();
    org.jtuples.Septuple var8 = var4.shiftLeft();
    java.lang.Object var9 = var4.fourth();
    java.lang.Object[] var10 = var4.toArray();
    java.lang.Object var11 = var4.second();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    java.lang.Object var19 = var15.third();
    org.jtuples.Nonuple var20 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var22 = var20.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = var20.shiftRight((java.lang.Object)var25);
    org.jtuples.Sextuple var27 = var15.shiftLeft((java.lang.Object)var26);
    org.jtuples.Sextuple var28 = var27.shiftRight();
    org.jtuples.Nonuple var29 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var31 = var29.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var32 = var29.first();
    org.jtuples.Nonuple var33 = var29.invert();
    org.jtuples.Sextuple var34 = var28.shiftRight((java.lang.Object)var29);
    java.lang.Object var35 = var34.fifth();
    org.jtuples.Pair var36 = new org.jtuples.Pair();
    java.lang.Object[] var37 = var36.toArray();
    java.lang.Object[] var38 = var36.toArray();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    org.jtuples.Sextuple var41 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Quadruple var45 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var40, (java.lang.Object)var41, (java.lang.Object)var42);
    java.lang.Object var46 = var45.first();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    int var48 = var47.arity();
    java.lang.Object var49 = var47.third();
    int var50 = var47.arity();
    org.jtuples.Nonuple var51 = var47.shiftLeft();
    org.jtuples.Nonuple var52 = var51.invert();
    org.jtuples.Quadruple var53 = var45.shiftLeft((java.lang.Object)var51);
    org.jtuples.Quintuple var54 = new org.jtuples.Quintuple((java.lang.Object)var0, (java.lang.Object)var4, (java.lang.Object)var34, (java.lang.Object)var36, (java.lang.Object)var45);
    java.lang.Object var55 = var54.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + (-1L)+ "'", var46.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    java.lang.Object[] var16 = var14.toArray();
    java.lang.Object var17 = var14.seventh();
    java.lang.Object[] var18 = var14.toArray();
    int var19 = var14.arity();
    java.lang.Object var20 = var14.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object var4 = var3.seventh();
    org.jtuples.Nonuple var5 = var3.shiftLeft();
    java.lang.Object var6 = var3.third();
    java.lang.Object var7 = var3.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Nonuple var4 = var0.shiftLeft();
    org.jtuples.Nonuple var5 = var4.invert();
    java.lang.Object var6 = var4.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Octuple var2 = var0.invert();
    org.jtuples.Octuple var3 = var0.shiftLeft();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    int var11 = var10.arity();
    org.jtuples.Quadruple var12 = var10.invert();
    java.lang.Object[] var13 = var12.toArray();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.Object var15 = var14.third();
    org.jtuples.Quadruple var16 = var12.shiftRight((java.lang.Object)var14);
    int var17 = var12.arity();
    org.jtuples.Quintuple var18 = new org.jtuples.Quintuple();
    java.lang.Object[] var19 = var18.toArray();
    org.jtuples.Quadruple var20 = var12.shiftRight((java.lang.Object)var19);
    org.jtuples.Octuple var21 = var0.shiftRight((java.lang.Object)var12);
    java.lang.Object var22 = var12.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    org.jtuples.Septuple var33 = var0.shiftLeft();
    org.jtuples.Septuple var34 = var0.shiftLeft();
    java.lang.Object var35 = var0.second();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object[] var1 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Triple var30 = var24.shiftLeft((java.lang.Object)var28);
    java.lang.Object var31 = var30.second();
    java.lang.Object var32 = var30.second();
    java.lang.Object[] var33 = var30.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    java.lang.Object var60 = var59.ninth();
    org.jtuples.Sextuple var61 = new org.jtuples.Sextuple();
    java.lang.String var62 = var61.toString();
    org.jtuples.Sextuple var63 = var61.invert();
    org.jtuples.Decuple var64 = var59.shiftLeft((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(null, null, null, null, null, null)"+ "'", var62.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Triple var30 = var24.shiftLeft((java.lang.Object)var28);
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    org.jtuples.Nonuple var39 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var41 = var39.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var42 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var44 = var42.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var45 = var39.shiftRight((java.lang.Object)var44);
    org.jtuples.Sextuple var46 = var34.shiftLeft((java.lang.Object)var45);
    org.jtuples.Sextuple var47 = var46.shiftRight();
    org.jtuples.Pair var48 = new org.jtuples.Pair();
    java.lang.Object[] var49 = var48.toArray();
    org.jtuples.Pair var50 = var48.invert();
    org.jtuples.Septuple var51 = new org.jtuples.Septuple();
    java.lang.Object var52 = var51.fifth();
    org.jtuples.Septuple var53 = var51.shiftRight();
    java.lang.Object var54 = var53.sixth();
    org.jtuples.Triple var55 = new org.jtuples.Triple((java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var53);
    java.lang.Object var56 = var55.first();
    org.jtuples.Triple var57 = var55.shiftRight();
    org.jtuples.Pair var59 = new org.jtuples.Pair();
    org.jtuples.Sextuple var60 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var61 = new org.jtuples.Sextuple();
    java.lang.String var62 = var61.toString();
    org.jtuples.Sextuple var63 = var61.invert();
    org.jtuples.Quadruple var64 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var59, (java.lang.Object)var60, (java.lang.Object)var61);
    int var65 = var64.arity();
    org.jtuples.Quadruple var66 = var64.invert();
    java.lang.Object var67 = var64.fourth();
    org.jtuples.Quadruple var68 = var64.invert();
    java.lang.Object var69 = var64.second();
    java.lang.Object var70 = var64.third();
    org.jtuples.Triple var71 = var55.shiftRight((java.lang.Object)var64);
    java.lang.Object var72 = var55.first();
    org.jtuples.Triple var73 = var24.shiftRight((java.lang.Object)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(null, null, null, null, null, null)"+ "'", var62.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    java.lang.Object var15 = var11.sixth();
    java.lang.Object var16 = var11.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    java.lang.Object var33 = var32.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    org.jtuples.Sextuple var2 = var0.invert();
    java.lang.Object var3 = var0.third();
    java.lang.Object var4 = var0.first();
    java.lang.Object var5 = var0.fifth();
    int var6 = var0.arity();
    java.lang.Object var7 = var0.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test451");


    org.jtuples.Triple var0 = new org.jtuples.Triple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    java.lang.Object var8 = var4.third();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = var9.shiftRight((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var4.shiftLeft((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var16.shiftRight();
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    java.lang.Object[] var19 = var18.toArray();
    org.jtuples.Pair var20 = var18.invert();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple();
    java.lang.Object var22 = var21.fifth();
    org.jtuples.Septuple var23 = var21.shiftRight();
    java.lang.Object var24 = var23.sixth();
    org.jtuples.Triple var25 = new org.jtuples.Triple((java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var23);
    java.lang.Object var26 = var25.second();
    org.jtuples.Triple var27 = var0.shiftRight((java.lang.Object)var25);
    org.jtuples.Triple var28 = var25.shiftRight();
    java.lang.Object var29 = var25.third();
    org.jtuples.Triple var30 = var25.invert();
    java.lang.Object[] var31 = var30.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test452");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    org.jtuples.Pair var7 = var1.shiftLeft();
    int var8 = var1.arity();
    org.jtuples.Pair var9 = var1.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test453");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    org.jtuples.Septuple var13 = var12.invert();
    org.jtuples.Nonuple var14 = new org.jtuples.Nonuple();
    int var15 = var14.arity();
    java.lang.Object var16 = var14.third();
    int var17 = var14.arity();
    org.jtuples.Pair var20 = new org.jtuples.Pair();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var22 = new org.jtuples.Sextuple();
    java.lang.String var23 = var22.toString();
    org.jtuples.Sextuple var24 = var22.invert();
    org.jtuples.Quadruple var25 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var20, (java.lang.Object)var21, (java.lang.Object)var22);
    int var26 = var25.arity();
    org.jtuples.Quadruple var27 = var25.invert();
    java.lang.Object[] var28 = var27.toArray();
    org.jtuples.Pair var30 = new org.jtuples.Pair();
    org.jtuples.Sextuple var31 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple();
    java.lang.String var33 = var32.toString();
    org.jtuples.Sextuple var34 = var32.invert();
    org.jtuples.Quadruple var35 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var30, (java.lang.Object)var31, (java.lang.Object)var32);
    java.lang.Object var36 = var31.sixth();
    java.lang.Object var37 = var31.fifth();
    org.jtuples.Sextuple var38 = var31.shiftRight();
    org.jtuples.Pair var41 = new org.jtuples.Pair();
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    java.lang.String var44 = var43.toString();
    org.jtuples.Sextuple var45 = var43.invert();
    org.jtuples.Quadruple var46 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var41, (java.lang.Object)var42, (java.lang.Object)var43);
    java.lang.Object var47 = var43.third();
    org.jtuples.Nonuple var48 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var50 = var48.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var51 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var53 = var51.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var54 = var48.shiftRight((java.lang.Object)var53);
    org.jtuples.Sextuple var55 = var43.shiftLeft((java.lang.Object)var54);
    java.lang.Object[] var56 = var54.toArray();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple();
    java.lang.Object var58 = var57.ninth();
    org.jtuples.Decuple var59 = new org.jtuples.Decuple();
    java.lang.Object var60 = var59.sixth();
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var61.shiftLeft();
    org.jtuples.Decuple var64 = new org.jtuples.Decuple((java.lang.Object)var17, (java.lang.Object)(byte)1, (java.lang.Object)var28, (java.lang.Object)var31, (java.lang.Object)true, (java.lang.Object)var56, (java.lang.Object)var57, (java.lang.Object)var59, (java.lang.Object)var61, (java.lang.Object)9);
    org.jtuples.Pair var66 = new org.jtuples.Pair();
    org.jtuples.Sextuple var67 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    java.lang.String var69 = var68.toString();
    org.jtuples.Sextuple var70 = var68.invert();
    org.jtuples.Quadruple var71 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var66, (java.lang.Object)var67, (java.lang.Object)var68);
    org.jtuples.Pair var72 = var66.shiftLeft();
    org.jtuples.Decuple var73 = var59.shiftRight((java.lang.Object)var72);
    org.jtuples.Septuple var74 = var12.shiftRight((java.lang.Object)var73);
    org.jtuples.Septuple var75 = var12.shiftRight();
    java.lang.Object var76 = var12.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(null, null, null, null, null, null)"+ "'", var23.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(null, null, null, null, null, null)"+ "'", var33.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(null, null, null, null, null, null)"+ "'", var44.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(null, null, null, null, null, null)"+ "'", var69.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + (byte)0+ "'", var76.equals((byte)0));

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var28 = var24.toArray();
    java.lang.Object var29 = var24.second();
    java.lang.Object[] var30 = var24.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test455");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    java.lang.Object var10 = var6.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test456");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    java.lang.Object var2 = var0.seventh();
    org.jtuples.Septuple var5 = new org.jtuples.Septuple();
    java.lang.Object var6 = var5.fifth();
    java.lang.Object var7 = var5.fifth();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var12 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var5, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var11);
    int var13 = var5.arity();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    java.lang.String var15 = var14.toString();
    java.lang.Object var16 = var14.sixth();
    org.jtuples.Septuple var17 = var5.shiftLeft((java.lang.Object)var14);
    int var18 = var14.arity();
    org.jtuples.Octuple var19 = var0.shiftLeft((java.lang.Object)var14);
    org.jtuples.Quintuple var20 = new org.jtuples.Quintuple();
    java.lang.Object var21 = var20.second();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var25.third();
    org.jtuples.Nonuple var30 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var32 = var30.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var33 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var35 = var33.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var36 = var30.shiftRight((java.lang.Object)var35);
    org.jtuples.Sextuple var37 = var25.shiftLeft((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = new org.jtuples.Sextuple();
    java.lang.String var39 = var38.toString();
    org.jtuples.Sextuple var40 = var38.invert();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    int var42 = var41.arity();
    java.lang.Object var43 = var41.third();
    int var44 = var41.arity();
    org.jtuples.Pair var47 = new org.jtuples.Pair();
    org.jtuples.Sextuple var48 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var49 = new org.jtuples.Sextuple();
    java.lang.String var50 = var49.toString();
    org.jtuples.Sextuple var51 = var49.invert();
    org.jtuples.Quadruple var52 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var47, (java.lang.Object)var48, (java.lang.Object)var49);
    java.lang.Object var53 = var49.third();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var56 = var54.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var57 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var59 = var57.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var60 = var54.shiftRight((java.lang.Object)var59);
    org.jtuples.Sextuple var61 = var49.shiftLeft((java.lang.Object)var60);
    org.jtuples.Sextuple var62 = var61.shiftRight();
    org.jtuples.Quintuple var63 = new org.jtuples.Quintuple((java.lang.Object)var36, (java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)'#', (java.lang.Object)var62);
    org.jtuples.Quintuple var64 = var20.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var65 = var20.invert();
    int var66 = var65.arity();
    org.jtuples.Octuple var67 = var0.shiftRight((java.lang.Object)var65);
    int var68 = var67.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(null, null, null, null, null, null)"+ "'", var15.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(null, null, null, null, null, null)"+ "'", var39.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(null, null, null, null, null, null)"+ "'", var50.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 8);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test457");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    int var33 = var30.arity();
    org.jtuples.Sextuple var34 = var30.invert();
    java.lang.Object var35 = var34.fifth();
    java.lang.Object var36 = var34.first();
    java.lang.Object var37 = var34.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test458");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var3.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var6 = var3.invert();
    org.jtuples.Nonuple var7 = var6.invert();
    java.lang.Object var8 = var7.sixth();
    org.jtuples.Nonuple var9 = var7.invert();
    org.jtuples.Nonuple var10 = var9.invert();
    org.jtuples.Nonuple var11 = var0.shiftLeft((java.lang.Object)var10);
    java.lang.Object var12 = var10.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test459");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.first();
    org.jtuples.Triple var26 = var24.shiftRight();
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    int var34 = var33.arity();
    org.jtuples.Quadruple var35 = var33.invert();
    java.lang.Object var36 = var33.fourth();
    org.jtuples.Quadruple var37 = var33.invert();
    java.lang.Object var38 = var33.second();
    java.lang.Object var39 = var33.third();
    org.jtuples.Triple var40 = var24.shiftRight((java.lang.Object)var33);
    java.lang.Object var41 = var24.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test460");


    org.jtuples.Pair var0 = new org.jtuples.Pair();
    java.lang.Object[] var1 = var0.toArray();
    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    org.jtuples.Septuple var3 = var2.shiftLeft();
    org.jtuples.Septuple var4 = var2.shiftRight();
    org.jtuples.Pair var5 = new org.jtuples.Pair((java.lang.Object)var0, (java.lang.Object)var2);
    java.lang.Object var6 = var2.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test461");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = new org.jtuples.Sextuple();
    java.lang.String var17 = var16.toString();
    org.jtuples.Sextuple var18 = var16.invert();
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    int var20 = var19.arity();
    java.lang.Object var21 = var19.third();
    int var22 = var19.arity();
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = var39.shiftRight();
    org.jtuples.Quintuple var41 = new org.jtuples.Quintuple((java.lang.Object)var14, (java.lang.Object)var18, (java.lang.Object)var22, (java.lang.Object)'#', (java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var18.shiftLeft();
    org.jtuples.Sextuple var43 = var42.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(null, null, null, null, null, null)"+ "'", var17.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test462");


    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Sextuple var10 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    org.jtuples.Sextuple var13 = var11.invert();
    org.jtuples.Quadruple var14 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var9, (java.lang.Object)var10, (java.lang.Object)var11);
    java.lang.Object var15 = var11.third();
    org.jtuples.Nonuple var16 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var18 = var16.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var19 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var21 = var19.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var22 = var16.shiftRight((java.lang.Object)var21);
    org.jtuples.Sextuple var23 = var11.shiftLeft((java.lang.Object)var22);
    org.jtuples.Pair var25 = new org.jtuples.Pair();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var27 = new org.jtuples.Sextuple();
    java.lang.String var28 = var27.toString();
    org.jtuples.Sextuple var29 = var27.invert();
    org.jtuples.Quadruple var30 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var26, (java.lang.Object)var27);
    java.lang.Object var31 = var27.third();
    org.jtuples.Nonuple var32 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var34 = var32.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = var32.shiftRight((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var27.shiftLeft((java.lang.Object)var38);
    org.jtuples.Sextuple var40 = new org.jtuples.Sextuple();
    java.lang.String var41 = var40.toString();
    org.jtuples.Sextuple var42 = var40.invert();
    org.jtuples.Nonuple var43 = new org.jtuples.Nonuple();
    int var44 = var43.arity();
    java.lang.Object var45 = var43.third();
    int var46 = var43.arity();
    org.jtuples.Pair var49 = new org.jtuples.Pair();
    org.jtuples.Sextuple var50 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var51 = new org.jtuples.Sextuple();
    java.lang.String var52 = var51.toString();
    org.jtuples.Sextuple var53 = var51.invert();
    org.jtuples.Quadruple var54 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var51);
    java.lang.Object var55 = var51.third();
    org.jtuples.Nonuple var56 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var58 = var56.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var59 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var61 = var59.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var62 = var56.shiftRight((java.lang.Object)var61);
    org.jtuples.Sextuple var63 = var51.shiftLeft((java.lang.Object)var62);
    org.jtuples.Sextuple var64 = var63.shiftRight();
    org.jtuples.Quintuple var65 = new org.jtuples.Quintuple((java.lang.Object)var38, (java.lang.Object)var42, (java.lang.Object)var46, (java.lang.Object)'#', (java.lang.Object)var64);
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    org.jtuples.Sextuple var68 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var69 = new org.jtuples.Sextuple();
    java.lang.String var70 = var69.toString();
    org.jtuples.Sextuple var71 = var69.invert();
    org.jtuples.Quadruple var72 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var67, (java.lang.Object)var68, (java.lang.Object)var69);
    java.lang.Object var73 = var69.third();
    org.jtuples.Nonuple var74 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var76 = var74.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var77 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var79 = var77.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var80 = var74.shiftRight((java.lang.Object)var79);
    org.jtuples.Sextuple var81 = var69.shiftLeft((java.lang.Object)var80);
    org.jtuples.Quintuple var82 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var83 = var82.shiftLeft();
    org.jtuples.Nonuple var85 = new org.jtuples.Nonuple();
    java.lang.Object[] var86 = var85.toArray();
    org.jtuples.Nonuple var88 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var38, (java.lang.Object)var80, (java.lang.Object)var83, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var85, (java.lang.Object)100);
    org.jtuples.Sextuple var89 = new org.jtuples.Sextuple();
    java.lang.String var90 = var89.toString();
    org.jtuples.Sextuple var91 = var89.invert();
    org.jtuples.Quintuple var92 = var83.shiftRight((java.lang.Object)var89);
    java.lang.Object var93 = var83.fifth();
    org.jtuples.Quintuple var95 = var83.shiftLeft((java.lang.Object)(byte)(-1));
    java.lang.Object var96 = var95.third();
    org.jtuples.Quintuple var97 = var95.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(null, null, null, null, null, null)"+ "'", var28.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(null, null, null, null, null, null)"+ "'", var41.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(null, null, null, null, null, null)"+ "'", var52.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(null, null, null, null, null, null)"+ "'", var70.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(null, null, null, null, null, null)"+ "'", var90.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test463");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    org.jtuples.Nonuple var2 = var0.shiftLeft();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test464");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    org.jtuples.Nonuple var7 = new org.jtuples.Nonuple();
    int var8 = var7.arity();
    java.lang.Object var9 = var7.third();
    int var10 = var7.arity();
    org.jtuples.Pair var13 = new org.jtuples.Pair();
    org.jtuples.Sextuple var14 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.String var16 = var15.toString();
    org.jtuples.Sextuple var17 = var15.invert();
    org.jtuples.Quadruple var18 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var13, (java.lang.Object)var14, (java.lang.Object)var15);
    int var19 = var18.arity();
    org.jtuples.Quadruple var20 = var18.invert();
    java.lang.Object[] var21 = var20.toArray();
    org.jtuples.Pair var23 = new org.jtuples.Pair();
    org.jtuples.Sextuple var24 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    java.lang.String var26 = var25.toString();
    org.jtuples.Sextuple var27 = var25.invert();
    org.jtuples.Quadruple var28 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var23, (java.lang.Object)var24, (java.lang.Object)var25);
    java.lang.Object var29 = var24.sixth();
    java.lang.Object var30 = var24.fifth();
    org.jtuples.Sextuple var31 = var24.shiftRight();
    org.jtuples.Pair var34 = new org.jtuples.Pair();
    org.jtuples.Sextuple var35 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var36 = new org.jtuples.Sextuple();
    java.lang.String var37 = var36.toString();
    org.jtuples.Sextuple var38 = var36.invert();
    org.jtuples.Quadruple var39 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var34, (java.lang.Object)var35, (java.lang.Object)var36);
    java.lang.Object var40 = var36.third();
    org.jtuples.Nonuple var41 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var43 = var41.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var44 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var46 = var44.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var47 = var41.shiftRight((java.lang.Object)var46);
    org.jtuples.Sextuple var48 = var36.shiftLeft((java.lang.Object)var47);
    java.lang.Object[] var49 = var47.toArray();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple();
    java.lang.Object var51 = var50.ninth();
    org.jtuples.Decuple var52 = new org.jtuples.Decuple();
    java.lang.Object var53 = var52.sixth();
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var55 = var54.shiftLeft();
    org.jtuples.Decuple var57 = new org.jtuples.Decuple((java.lang.Object)var10, (java.lang.Object)(byte)1, (java.lang.Object)var21, (java.lang.Object)var24, (java.lang.Object)true, (java.lang.Object)var49, (java.lang.Object)var50, (java.lang.Object)var52, (java.lang.Object)var54, (java.lang.Object)9);
    java.lang.Object var58 = var50.seventh();
    java.lang.Object var59 = var50.fifth();
    int var60 = var50.arity();
    org.jtuples.Decuple var61 = var4.shiftLeft((java.lang.Object)var50);
    org.jtuples.Decuple var62 = var50.shiftRight();
    org.jtuples.Pair var64 = new org.jtuples.Pair();
    org.jtuples.Sextuple var65 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var66 = new org.jtuples.Sextuple();
    java.lang.String var67 = var66.toString();
    org.jtuples.Sextuple var68 = var66.invert();
    org.jtuples.Quadruple var69 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var64, (java.lang.Object)var65, (java.lang.Object)var66);
    org.jtuples.Pair var70 = var64.shiftLeft();
    org.jtuples.Decuple var71 = var50.shiftLeft((java.lang.Object)var64);
    java.lang.Object var72 = var71.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(null, null, null, null, null, null)"+ "'", var16.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(null, null, null, null, null, null)"+ "'", var26.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(null, null, null, null, null, null)"+ "'", var37.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(null, null, null, null, null, null)"+ "'", var67.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test465");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    java.lang.Object var2 = var0.sixth();
    java.lang.Object var3 = var0.fourth();
    java.lang.Object var4 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test466");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object var12 = var11.fifth();
    java.lang.Object var13 = var11.second();
    java.lang.Object var14 = var11.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test467");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    int var10 = var2.arity();
    org.jtuples.Sextuple var11 = new org.jtuples.Sextuple();
    java.lang.String var12 = var11.toString();
    java.lang.Object var13 = var11.sixth();
    org.jtuples.Septuple var14 = var2.shiftLeft((java.lang.Object)var11);
    java.util.List var15 = var14.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(null, null, null, null, null, null)"+ "'", var12.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test468");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.sixth();
    java.lang.Object var2 = var0.seventh();
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    int var4 = var3.arity();
    java.lang.Object var5 = var3.third();
    org.jtuples.Nonuple var6 = var3.shiftRight();
    int var7 = var3.arity();
    java.lang.Object var8 = var3.fifth();
    org.jtuples.Decuple var9 = var0.shiftRight((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test469");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Octuple var2 = var0.invert();
    org.jtuples.Octuple var3 = var0.shiftLeft();
    org.jtuples.Octuple var4 = var3.shiftLeft();
    java.lang.Object var5 = var3.fourth();
    java.lang.Object[] var6 = var3.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test470");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Nonuple var17 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var19 = var17.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var20 = var17.first();
    org.jtuples.Nonuple var21 = var17.invert();
    org.jtuples.Sextuple var22 = var16.shiftRight((java.lang.Object)var17);
    java.lang.Object[] var23 = var16.toArray();
    java.util.List var24 = var16.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test471");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var2 = var0.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var3 = var0.invert();
    java.lang.Object[] var4 = var3.toArray();
    int var5 = var3.arity();
    org.jtuples.Nonuple var6 = var3.shiftLeft();
    java.lang.Object[] var7 = var3.toArray();
    org.jtuples.Decuple var8 = new org.jtuples.Decuple();
    java.lang.Object var9 = var8.ninth();
    java.lang.Object var10 = var8.first();
    java.lang.Object var11 = var8.fifth();
    java.lang.Object var12 = var8.sixth();
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var13.invert();
    java.lang.Object[] var17 = var16.toArray();
    int var18 = var16.arity();
    org.jtuples.Nonuple var19 = var16.shiftLeft();
    java.lang.Object[] var20 = var16.toArray();
    org.jtuples.Decuple var21 = var8.shiftLeft((java.lang.Object)var16);
    java.lang.Object var22 = var21.fifth();
    org.jtuples.Pair var24 = new org.jtuples.Pair();
    org.jtuples.Sextuple var25 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var26 = new org.jtuples.Sextuple();
    java.lang.String var27 = var26.toString();
    org.jtuples.Sextuple var28 = var26.invert();
    org.jtuples.Quadruple var29 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var24, (java.lang.Object)var25, (java.lang.Object)var26);
    java.lang.Object var30 = var26.third();
    org.jtuples.Nonuple var31 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var33 = var31.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = var31.shiftRight((java.lang.Object)var36);
    org.jtuples.Sextuple var38 = var26.shiftLeft((java.lang.Object)var37);
    org.jtuples.Sextuple var39 = var38.shiftRight();
    org.jtuples.Pair var40 = new org.jtuples.Pair();
    java.lang.Object[] var41 = var40.toArray();
    org.jtuples.Pair var42 = var40.invert();
    org.jtuples.Septuple var43 = new org.jtuples.Septuple();
    java.lang.Object var44 = var43.fifth();
    org.jtuples.Septuple var45 = var43.shiftRight();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Triple var47 = new org.jtuples.Triple((java.lang.Object)var39, (java.lang.Object)var40, (java.lang.Object)var45);
    java.lang.Object var48 = var47.first();
    org.jtuples.Triple var49 = var47.shiftRight();
    org.jtuples.Septuple var50 = new org.jtuples.Septuple();
    java.lang.Object var51 = var50.fifth();
    java.lang.Object var52 = var50.fifth();
    java.lang.Object[] var53 = var50.toArray();
    org.jtuples.Triple var54 = new org.jtuples.Triple((java.lang.Object)var21, (java.lang.Object)var49, (java.lang.Object)var53);
    org.jtuples.Nonuple var55 = var3.shiftLeft((java.lang.Object)var21);
    org.jtuples.Pair var57 = new org.jtuples.Pair();
    org.jtuples.Sextuple var58 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var59 = new org.jtuples.Sextuple();
    java.lang.String var60 = var59.toString();
    org.jtuples.Sextuple var61 = var59.invert();
    org.jtuples.Quadruple var62 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var57, (java.lang.Object)var58, (java.lang.Object)var59);
    java.lang.Object var63 = var58.sixth();
    java.lang.Object var64 = var58.third();
    org.jtuples.Octuple var65 = new org.jtuples.Octuple();
    org.jtuples.Octuple var66 = var65.shiftRight();
    java.lang.Object var67 = var66.third();
    org.jtuples.Sextuple var68 = var58.shiftRight((java.lang.Object)var66);
    org.jtuples.Sextuple var69 = var68.invert();
    org.jtuples.Decuple var70 = var21.shiftRight((java.lang.Object)var69);
    java.lang.Object var71 = var21.eighth();
    java.lang.Object var72 = var21.sixth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(null, null, null, null, null, null)"+ "'", var27.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(null, null, null, null, null, null)"+ "'", var60.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test472");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    org.jtuples.Decuple var60 = var59.invert();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test473");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.fourth();
    org.jtuples.Decuple var7 = var4.shiftLeft();
    java.lang.Object var8 = var7.first();
    java.lang.Object var9 = var7.eighth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test474");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.fifth();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Septuple var12 = new org.jtuples.Septuple();
    java.lang.Object var13 = var12.fifth();
    java.lang.Object var14 = var12.fifth();
    java.lang.Object var15 = var12.second();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var17.second();
    org.jtuples.Pair var24 = var17.invert();
    org.jtuples.Nonuple var25 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var27 = var25.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var28 = var25.first();
    org.jtuples.Nonuple var29 = var25.invert();
    int var30 = var29.arity();
    java.lang.String var31 = var29.toString();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)(byte)100, (java.lang.Object)var12, (java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)0L);
    org.jtuples.Pair var34 = var24.shiftLeft();
    int var35 = var24.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test475");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object var6 = var4.first();
    int var7 = var4.arity();
    java.lang.Object var8 = var4.fifth();
    java.lang.Object var9 = var4.fifth();
    java.lang.Object var10 = var4.tenth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test476");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    org.jtuples.Triple var25 = var24.invert();
    java.lang.Object var26 = var25.third();
    org.jtuples.Triple var27 = var25.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test477");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.seventh();
    org.jtuples.Decuple var4 = var0.shiftLeft();
    java.lang.Object var5 = var4.second();
    java.lang.Object[] var6 = var4.toArray();
    java.lang.Object var7 = var4.sixth();
    java.lang.Object[] var8 = var4.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test478");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = var0.shiftRight();
    org.jtuples.Nonuple var4 = var0.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test479");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    org.jtuples.Octuple var1 = var0.shiftRight();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    java.lang.Object var95 = var85.second();
    org.jtuples.Quintuple var96 = var85.invert();
    org.jtuples.Octuple var97 = var1.shiftLeft((java.lang.Object)var85);
    int var98 = var1.arity();
    org.jtuples.Octuple var99 = var1.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test480");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    org.jtuples.Nonuple var5 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var7 = var5.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var8 = var5.invert();
    java.lang.Object[] var9 = var8.toArray();
    int var10 = var8.arity();
    org.jtuples.Nonuple var11 = var8.shiftLeft();
    java.lang.Object[] var12 = var8.toArray();
    org.jtuples.Decuple var13 = var0.shiftLeft((java.lang.Object)var8);
    java.lang.Object var14 = var13.fifth();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var18.third();
    org.jtuples.Nonuple var23 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var25 = var23.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var28 = var26.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var29 = var23.shiftRight((java.lang.Object)var28);
    org.jtuples.Sextuple var30 = var18.shiftLeft((java.lang.Object)var29);
    org.jtuples.Sextuple var31 = var30.shiftRight();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    java.lang.Object[] var33 = var32.toArray();
    org.jtuples.Pair var34 = var32.invert();
    org.jtuples.Septuple var35 = new org.jtuples.Septuple();
    java.lang.Object var36 = var35.fifth();
    org.jtuples.Septuple var37 = var35.shiftRight();
    java.lang.Object var38 = var37.sixth();
    org.jtuples.Triple var39 = new org.jtuples.Triple((java.lang.Object)var31, (java.lang.Object)var32, (java.lang.Object)var37);
    java.lang.Object var40 = var39.first();
    org.jtuples.Triple var41 = var39.shiftRight();
    org.jtuples.Septuple var42 = new org.jtuples.Septuple();
    java.lang.Object var43 = var42.fifth();
    java.lang.Object var44 = var42.fifth();
    java.lang.Object[] var45 = var42.toArray();
    org.jtuples.Triple var46 = new org.jtuples.Triple((java.lang.Object)var13, (java.lang.Object)var41, (java.lang.Object)var45);
    java.lang.Object[] var47 = var46.toArray();
    java.lang.Object var48 = var46.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test481");


    org.jtuples.Septuple var2 = new org.jtuples.Septuple();
    java.lang.Object var3 = var2.fifth();
    java.lang.Object var4 = var2.fifth();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var9 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var2, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var8);
    java.lang.Object var10 = var2.seventh();
    org.jtuples.Septuple var12 = var2.shiftRight((java.lang.Object)(byte)0);
    java.lang.String var13 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(null, null, null, null, null, null, null)"+ "'", var13.equals("(null, null, null, null, null, null, null)"));

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test482");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    org.jtuples.Septuple var33 = new org.jtuples.Septuple();
    java.lang.Object var34 = var33.fifth();
    java.lang.Object var35 = var33.fifth();
    java.lang.Object var36 = var33.second();
    org.jtuples.Septuple var37 = var33.shiftLeft();
    org.jtuples.Quadruple var38 = var17.shiftRight((java.lang.Object)var33);
    org.jtuples.Septuple var39 = var33.shiftRight();
    org.jtuples.Septuple var40 = var39.invert();
    java.lang.Object var41 = var39.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test483");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    org.jtuples.Sextuple var8 = var2.invert();
    org.jtuples.Pair var9 = new org.jtuples.Pair();
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    int var17 = var16.arity();
    org.jtuples.Quadruple var18 = var16.invert();
    java.lang.Object var19 = var16.fourth();
    org.jtuples.Quadruple var20 = var16.invert();
    org.jtuples.Quadruple var21 = var20.shiftRight();
    org.jtuples.Quintuple var23 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var24 = var23.shiftLeft();
    org.jtuples.Pair var26 = new org.jtuples.Pair((java.lang.Object)var24, (java.lang.Object)(-1.0f));
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    java.lang.Object[] var43 = var41.toArray();
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple((java.lang.Object)var2, (java.lang.Object)var9, (java.lang.Object)var21, (java.lang.Object)'a', (java.lang.Object)(-1.0f), (java.lang.Object)var43);
    java.lang.Object[] var45 = var44.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test484");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    org.jtuples.Nonuple var3 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var5 = var3.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var6 = var3.invert();
    org.jtuples.Nonuple var7 = var6.invert();
    java.lang.Object var8 = var7.sixth();
    org.jtuples.Nonuple var9 = var7.invert();
    org.jtuples.Nonuple var10 = var9.invert();
    org.jtuples.Nonuple var11 = var0.shiftLeft((java.lang.Object)var10);
    org.jtuples.Nonuple var12 = var0.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test485");


    org.jtuples.Triple var0 = new org.jtuples.Triple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    java.lang.Object var8 = var4.third();
    org.jtuples.Nonuple var9 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var11 = var9.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var12 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var14 = var12.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var15 = var9.shiftRight((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var4.shiftLeft((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var16.shiftRight();
    org.jtuples.Pair var18 = new org.jtuples.Pair();
    java.lang.Object[] var19 = var18.toArray();
    org.jtuples.Pair var20 = var18.invert();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple();
    java.lang.Object var22 = var21.fifth();
    org.jtuples.Septuple var23 = var21.shiftRight();
    java.lang.Object var24 = var23.sixth();
    org.jtuples.Triple var25 = new org.jtuples.Triple((java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var23);
    java.lang.Object var26 = var25.second();
    org.jtuples.Triple var27 = var0.shiftRight((java.lang.Object)var25);
    org.jtuples.Triple var28 = var25.shiftRight();
    org.jtuples.Triple var29 = var25.shiftRight();
    int var30 = var29.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 3);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test486");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var2.sixth();
    java.lang.Object var8 = var2.third();
    org.jtuples.Octuple var9 = new org.jtuples.Octuple();
    org.jtuples.Sextuple var10 = var2.shiftLeft((java.lang.Object)var9);
    java.lang.Object var11 = var2.sixth();
    java.lang.Object var12 = var2.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test487");


    org.jtuples.Octuple var0 = new org.jtuples.Octuple();
    java.lang.Object var1 = var0.seventh();
    org.jtuples.Pair var4 = new org.jtuples.Pair();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    java.lang.String var7 = var6.toString();
    org.jtuples.Sextuple var8 = var6.invert();
    org.jtuples.Quadruple var9 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var4, (java.lang.Object)var5, (java.lang.Object)var6);
    org.jtuples.Pair var11 = new org.jtuples.Pair();
    org.jtuples.Sextuple var12 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var13 = new org.jtuples.Sextuple();
    java.lang.String var14 = var13.toString();
    org.jtuples.Sextuple var15 = var13.invert();
    org.jtuples.Quadruple var16 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var11, (java.lang.Object)var12, (java.lang.Object)var13);
    java.lang.Object var17 = var13.third();
    org.jtuples.Nonuple var18 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var20 = var18.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var23 = var21.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var24 = var18.shiftRight((java.lang.Object)var23);
    org.jtuples.Sextuple var25 = var13.shiftLeft((java.lang.Object)var24);
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = new org.jtuples.Sextuple();
    java.lang.String var43 = var42.toString();
    org.jtuples.Sextuple var44 = var42.invert();
    org.jtuples.Nonuple var45 = new org.jtuples.Nonuple();
    int var46 = var45.arity();
    java.lang.Object var47 = var45.third();
    int var48 = var45.arity();
    org.jtuples.Pair var51 = new org.jtuples.Pair();
    org.jtuples.Sextuple var52 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    java.lang.String var54 = var53.toString();
    org.jtuples.Sextuple var55 = var53.invert();
    org.jtuples.Quadruple var56 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var51, (java.lang.Object)var52, (java.lang.Object)var53);
    java.lang.Object var57 = var53.third();
    org.jtuples.Nonuple var58 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var60 = var58.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var61 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var63 = var61.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var64 = var58.shiftRight((java.lang.Object)var63);
    org.jtuples.Sextuple var65 = var53.shiftLeft((java.lang.Object)var64);
    org.jtuples.Sextuple var66 = var65.shiftRight();
    org.jtuples.Quintuple var67 = new org.jtuples.Quintuple((java.lang.Object)var40, (java.lang.Object)var44, (java.lang.Object)var48, (java.lang.Object)'#', (java.lang.Object)var66);
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    org.jtuples.Sextuple var70 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var71 = new org.jtuples.Sextuple();
    java.lang.String var72 = var71.toString();
    org.jtuples.Sextuple var73 = var71.invert();
    org.jtuples.Quadruple var74 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var69, (java.lang.Object)var70, (java.lang.Object)var71);
    java.lang.Object var75 = var71.third();
    org.jtuples.Nonuple var76 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var78 = var76.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var79 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var81 = var79.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var82 = var76.shiftRight((java.lang.Object)var81);
    org.jtuples.Sextuple var83 = var71.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var84 = new org.jtuples.Quintuple();
    org.jtuples.Quintuple var85 = var84.shiftLeft();
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    java.lang.Object[] var88 = var87.toArray();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple((java.lang.Object)100L, (java.lang.Object)(-1L), (java.lang.Object)var25, (java.lang.Object)var40, (java.lang.Object)var82, (java.lang.Object)var85, (java.lang.Object)"(null, null, null, null, null, null)", (java.lang.Object)var87, (java.lang.Object)100);
    org.jtuples.Sextuple var91 = new org.jtuples.Sextuple();
    java.lang.String var92 = var91.toString();
    org.jtuples.Sextuple var93 = var91.invert();
    org.jtuples.Quintuple var94 = var85.shiftRight((java.lang.Object)var91);
    org.jtuples.Octuple var95 = var0.shiftLeft((java.lang.Object)var85);
    java.lang.Object var96 = var0.second();
    org.jtuples.Octuple var97 = var0.shiftRight();
    java.lang.String var98 = var0.toString();
    org.jtuples.Octuple var99 = var0.shiftRight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(null, null, null, null, null, null)"+ "'", var7.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(null, null, null, null, null, null)"+ "'", var14.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(null, null, null, null, null, null)"+ "'", var43.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(null, null, null, null, null, null)"+ "'", var54.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(null, null, null, null, null, null)"+ "'", var72.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(null, null, null, null, null, null)"+ "'", var92.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "(null, null, null, null, null, null, null, null)"+ "'", var98.equals("(null, null, null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test488");


    org.jtuples.Sextuple var0 = new org.jtuples.Sextuple();
    java.lang.String var1 = var0.toString();
    java.lang.Object var2 = var0.fourth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(null, null, null, null, null, null)"+ "'", var1.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test489");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object var3 = var0.fifth();
    java.lang.Object var4 = var0.sixth();
    org.jtuples.Nonuple var5 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var7 = var5.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var8 = var5.invert();
    java.lang.Object[] var9 = var8.toArray();
    int var10 = var8.arity();
    org.jtuples.Nonuple var11 = var8.shiftLeft();
    java.lang.Object[] var12 = var8.toArray();
    org.jtuples.Decuple var13 = var0.shiftLeft((java.lang.Object)var8);
    java.lang.Object var14 = var0.first();
    java.lang.Object var15 = var0.fifth();
    java.lang.Object var16 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test490");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    org.jtuples.Triple var25 = var24.invert();
    org.jtuples.Triple var26 = var24.invert();
    java.lang.Object var27 = var26.third();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test491");


    org.jtuples.Decuple var0 = new org.jtuples.Decuple();
    java.lang.Object var1 = var0.ninth();
    java.lang.Object var2 = var0.first();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var5 = new org.jtuples.Pair();
    org.jtuples.Sextuple var6 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    java.lang.String var8 = var7.toString();
    org.jtuples.Sextuple var9 = var7.invert();
    org.jtuples.Quadruple var10 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var5, (java.lang.Object)var6, (java.lang.Object)var7);
    org.jtuples.Decuple var11 = var0.shiftLeft((java.lang.Object)(-1L));
    java.lang.Object[] var12 = var11.toArray();
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var16 = var13.first();
    int var17 = var13.arity();
    org.jtuples.Nonuple var18 = var13.invert();
    org.jtuples.Decuple var19 = var11.shiftRight((java.lang.Object)var13);
    java.lang.Object var20 = var13.fifth();
    org.jtuples.Octuple var21 = new org.jtuples.Octuple();
    java.lang.Object var22 = var21.seventh();
    java.lang.Object var23 = var21.seventh();
    java.lang.Object var24 = var21.second();
    java.lang.Object var25 = var21.third();
    org.jtuples.Octuple var26 = var21.invert();
    java.lang.Object var27 = var21.seventh();
    org.jtuples.Nonuple var28 = new org.jtuples.Nonuple();
    int var29 = var28.arity();
    java.lang.Object var30 = var28.third();
    int var31 = var28.arity();
    org.jtuples.Nonuple var32 = var28.shiftLeft();
    org.jtuples.Nonuple var33 = var32.invert();
    org.jtuples.Octuple var34 = var21.shiftRight((java.lang.Object)var32);
    int var35 = var32.arity();
    org.jtuples.Nonuple var36 = var13.shiftRight((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(null, null, null, null, null, null)"+ "'", var8.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test492");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    org.jtuples.Pair var52 = new org.jtuples.Pair();
    org.jtuples.Sextuple var53 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    java.lang.String var55 = var54.toString();
    org.jtuples.Sextuple var56 = var54.invert();
    org.jtuples.Quadruple var57 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var52, (java.lang.Object)var53, (java.lang.Object)var54);
    org.jtuples.Pair var58 = var52.shiftLeft();
    org.jtuples.Decuple var59 = var45.shiftRight((java.lang.Object)var58);
    org.jtuples.Pair var60 = var58.invert();
    org.jtuples.Pair var61 = var58.shiftLeft();
    java.lang.Object[] var62 = var58.toArray();
    java.lang.Object var63 = var58.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(null, null, null, null, null, null)"+ "'", var55.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test493");


    org.jtuples.Nonuple var1 = new org.jtuples.Nonuple();
    int var2 = var1.arity();
    java.lang.Object var3 = var1.third();
    int var4 = var1.arity();
    org.jtuples.Pair var7 = new org.jtuples.Pair();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var9 = new org.jtuples.Sextuple();
    java.lang.String var10 = var9.toString();
    org.jtuples.Sextuple var11 = var9.invert();
    org.jtuples.Quadruple var12 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var7, (java.lang.Object)var8, (java.lang.Object)var9);
    int var13 = var12.arity();
    org.jtuples.Quadruple var14 = var12.invert();
    java.lang.Object[] var15 = var14.toArray();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var19 = new org.jtuples.Sextuple();
    java.lang.String var20 = var19.toString();
    org.jtuples.Sextuple var21 = var19.invert();
    org.jtuples.Quadruple var22 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var17, (java.lang.Object)var18, (java.lang.Object)var19);
    java.lang.Object var23 = var18.sixth();
    java.lang.Object var24 = var18.fifth();
    org.jtuples.Sextuple var25 = var18.shiftRight();
    org.jtuples.Pair var28 = new org.jtuples.Pair();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var30 = new org.jtuples.Sextuple();
    java.lang.String var31 = var30.toString();
    org.jtuples.Sextuple var32 = var30.invert();
    org.jtuples.Quadruple var33 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var28, (java.lang.Object)var29, (java.lang.Object)var30);
    java.lang.Object var34 = var30.third();
    org.jtuples.Nonuple var35 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var37 = var35.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var38 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var40 = var38.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var41 = var35.shiftRight((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var30.shiftLeft((java.lang.Object)var41);
    java.lang.Object[] var43 = var41.toArray();
    org.jtuples.Decuple var44 = new org.jtuples.Decuple();
    java.lang.Object var45 = var44.ninth();
    org.jtuples.Decuple var46 = new org.jtuples.Decuple();
    java.lang.Object var47 = var46.sixth();
    org.jtuples.Nonuple var48 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var49 = var48.shiftLeft();
    org.jtuples.Decuple var51 = new org.jtuples.Decuple((java.lang.Object)var4, (java.lang.Object)(byte)1, (java.lang.Object)var15, (java.lang.Object)var18, (java.lang.Object)true, (java.lang.Object)var43, (java.lang.Object)var44, (java.lang.Object)var46, (java.lang.Object)var48, (java.lang.Object)9);
    java.lang.Object var52 = var44.seventh();
    org.jtuples.Pair var53 = new org.jtuples.Pair((java.lang.Object)(byte)0, (java.lang.Object)var44);
    java.lang.Object var54 = var44.seventh();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(null, null, null, null, null, null)"+ "'", var10.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(null, null, null, null, null, null)"+ "'", var20.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(null, null, null, null, null, null)"+ "'", var31.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test494");


    org.jtuples.Nonuple var0 = new org.jtuples.Nonuple();
    int var1 = var0.arity();
    java.lang.Object var2 = var0.third();
    int var3 = var0.arity();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Pair var16 = new org.jtuples.Pair();
    org.jtuples.Sextuple var17 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Quadruple var21 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var18);
    java.lang.Object var22 = var17.sixth();
    java.lang.Object var23 = var17.fifth();
    org.jtuples.Sextuple var24 = var17.shiftRight();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    java.lang.Object[] var42 = var40.toArray();
    org.jtuples.Decuple var43 = new org.jtuples.Decuple();
    java.lang.Object var44 = var43.ninth();
    org.jtuples.Decuple var45 = new org.jtuples.Decuple();
    java.lang.Object var46 = var45.sixth();
    org.jtuples.Nonuple var47 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var48 = var47.shiftLeft();
    org.jtuples.Decuple var50 = new org.jtuples.Decuple((java.lang.Object)var3, (java.lang.Object)(byte)1, (java.lang.Object)var14, (java.lang.Object)var17, (java.lang.Object)true, (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var45, (java.lang.Object)var47, (java.lang.Object)9);
    java.lang.Object var51 = var43.sixth();
    org.jtuples.Pair var53 = new org.jtuples.Pair();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    java.lang.String var56 = var55.toString();
    org.jtuples.Sextuple var57 = var55.invert();
    org.jtuples.Quadruple var58 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var53, (java.lang.Object)var54, (java.lang.Object)var55);
    java.lang.Object var59 = var55.third();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var60.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var63 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var65 = var63.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var66 = var60.shiftRight((java.lang.Object)var65);
    org.jtuples.Sextuple var67 = var55.shiftLeft((java.lang.Object)var66);
    org.jtuples.Sextuple var68 = var67.shiftRight();
    org.jtuples.Pair var69 = new org.jtuples.Pair();
    java.lang.Object[] var70 = var69.toArray();
    org.jtuples.Pair var71 = var69.invert();
    org.jtuples.Septuple var72 = new org.jtuples.Septuple();
    java.lang.Object var73 = var72.fifth();
    org.jtuples.Septuple var74 = var72.shiftRight();
    java.lang.Object var75 = var74.sixth();
    org.jtuples.Triple var76 = new org.jtuples.Triple((java.lang.Object)var68, (java.lang.Object)var69, (java.lang.Object)var74);
    java.lang.Object var77 = var76.second();
    org.jtuples.Triple var79 = var76.shiftLeft((java.lang.Object)(-1.0f));
    java.lang.Object[] var80 = var76.toArray();
    org.jtuples.Triple var81 = var76.invert();
    java.lang.Object var82 = var76.second();
    org.jtuples.Triple var83 = var76.shiftLeft();
    java.lang.Object var84 = var76.first();
    org.jtuples.Decuple var85 = var43.shiftRight(var84);
    org.jtuples.Decuple var86 = var43.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test495");


    org.jtuples.Septuple var0 = new org.jtuples.Septuple();
    java.lang.Object var1 = var0.fifth();
    org.jtuples.Septuple var2 = var0.shiftRight();
    java.lang.Object[] var3 = var0.toArray();
    org.jtuples.Pair var6 = new org.jtuples.Pair();
    org.jtuples.Sextuple var7 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var8 = new org.jtuples.Sextuple();
    java.lang.String var9 = var8.toString();
    org.jtuples.Sextuple var10 = var8.invert();
    org.jtuples.Quadruple var11 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var6, (java.lang.Object)var7, (java.lang.Object)var8);
    int var12 = var11.arity();
    org.jtuples.Quadruple var13 = var11.invert();
    java.lang.Object[] var14 = var13.toArray();
    org.jtuples.Sextuple var15 = new org.jtuples.Sextuple();
    java.lang.Object var16 = var15.third();
    org.jtuples.Quadruple var17 = var13.shiftRight((java.lang.Object)var15);
    org.jtuples.Pair var19 = new org.jtuples.Pair();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    java.lang.String var22 = var21.toString();
    org.jtuples.Sextuple var23 = var21.invert();
    org.jtuples.Quadruple var24 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var19, (java.lang.Object)var20, (java.lang.Object)var21);
    int var25 = var24.arity();
    org.jtuples.Quadruple var26 = var24.invert();
    java.lang.Object var27 = var26.fourth();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    java.lang.String var29 = var28.toString();
    org.jtuples.Sextuple var30 = var28.invert();
    org.jtuples.Sextuple var32 = new org.jtuples.Sextuple((java.lang.Object)var0, (java.lang.Object)100L, (java.lang.Object)var17, (java.lang.Object)var26, (java.lang.Object)var30, (java.lang.Object)(short)10);
    org.jtuples.Septuple var33 = new org.jtuples.Septuple();
    java.lang.Object var34 = var33.fifth();
    java.lang.Object var35 = var33.fifth();
    java.lang.Object var36 = var33.second();
    org.jtuples.Septuple var37 = var33.shiftLeft();
    org.jtuples.Quadruple var38 = var17.shiftRight((java.lang.Object)var33);
    java.lang.Object var39 = var33.first();
    java.lang.Object[] var40 = var33.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(null, null, null, null, null, null)"+ "'", var9.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(null, null, null, null, null, null)"+ "'", var22.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + (-1L)+ "'", var27.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(null, null, null, null, null, null)"+ "'", var29.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test496");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Triple var30 = var24.shiftLeft((java.lang.Object)var28);
    org.jtuples.Septuple var31 = new org.jtuples.Septuple();
    java.lang.Object var32 = var31.fifth();
    java.lang.Object var33 = var31.fifth();
    java.lang.Object var34 = var31.seventh();
    org.jtuples.Septuple var35 = new org.jtuples.Septuple();
    java.lang.Object var36 = var35.fifth();
    java.lang.Object var37 = var35.fifth();
    java.lang.Object var38 = var35.second();
    org.jtuples.Septuple var39 = var35.shiftLeft();
    java.lang.Object var40 = var35.fourth();
    java.lang.Object[] var41 = var35.toArray();
    java.lang.Object var42 = var35.second();
    org.jtuples.Pair var44 = new org.jtuples.Pair();
    org.jtuples.Sextuple var45 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var46 = new org.jtuples.Sextuple();
    java.lang.String var47 = var46.toString();
    org.jtuples.Sextuple var48 = var46.invert();
    org.jtuples.Quadruple var49 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var44, (java.lang.Object)var45, (java.lang.Object)var46);
    java.lang.Object var50 = var46.third();
    org.jtuples.Nonuple var51 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var53 = var51.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var54 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var56 = var54.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var57 = var51.shiftRight((java.lang.Object)var56);
    org.jtuples.Sextuple var58 = var46.shiftLeft((java.lang.Object)var57);
    org.jtuples.Sextuple var59 = var58.shiftRight();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var60.shiftRight((java.lang.Object)(byte)100);
    java.lang.Object var63 = var60.first();
    org.jtuples.Nonuple var64 = var60.invert();
    org.jtuples.Sextuple var65 = var59.shiftRight((java.lang.Object)var60);
    java.lang.Object var66 = var65.fifth();
    org.jtuples.Pair var67 = new org.jtuples.Pair();
    java.lang.Object[] var68 = var67.toArray();
    java.lang.Object[] var69 = var67.toArray();
    org.jtuples.Pair var71 = new org.jtuples.Pair();
    org.jtuples.Sextuple var72 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var73 = new org.jtuples.Sextuple();
    java.lang.String var74 = var73.toString();
    org.jtuples.Sextuple var75 = var73.invert();
    org.jtuples.Quadruple var76 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var71, (java.lang.Object)var72, (java.lang.Object)var73);
    java.lang.Object var77 = var76.first();
    org.jtuples.Nonuple var78 = new org.jtuples.Nonuple();
    int var79 = var78.arity();
    java.lang.Object var80 = var78.third();
    int var81 = var78.arity();
    org.jtuples.Nonuple var82 = var78.shiftLeft();
    org.jtuples.Nonuple var83 = var82.invert();
    org.jtuples.Quadruple var84 = var76.shiftLeft((java.lang.Object)var82);
    org.jtuples.Quintuple var85 = new org.jtuples.Quintuple((java.lang.Object)var31, (java.lang.Object)var35, (java.lang.Object)var65, (java.lang.Object)var67, (java.lang.Object)var76);
    java.lang.Object var86 = var65.fourth();
    java.lang.Object var87 = var65.sixth();
    org.jtuples.Triple var88 = var24.shiftRight((java.lang.Object)var65);
    org.jtuples.Sextuple var89 = var65.shiftLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(null, null, null, null, null, null)"+ "'", var47.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(null, null, null, null, null, null)"+ "'", var74.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + (-1L)+ "'", var77.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    java.lang.Object var1 = var0.second();
    org.jtuples.Pair var3 = new org.jtuples.Pair();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var5 = new org.jtuples.Sextuple();
    java.lang.String var6 = var5.toString();
    org.jtuples.Sextuple var7 = var5.invert();
    org.jtuples.Quadruple var8 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var3, (java.lang.Object)var4, (java.lang.Object)var5);
    java.lang.Object var9 = var5.third();
    org.jtuples.Nonuple var10 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var12 = var10.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var13 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var15 = var13.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var16 = var10.shiftRight((java.lang.Object)var15);
    org.jtuples.Sextuple var17 = var5.shiftLeft((java.lang.Object)var16);
    org.jtuples.Sextuple var18 = new org.jtuples.Sextuple();
    java.lang.String var19 = var18.toString();
    org.jtuples.Sextuple var20 = var18.invert();
    org.jtuples.Nonuple var21 = new org.jtuples.Nonuple();
    int var22 = var21.arity();
    java.lang.Object var23 = var21.third();
    int var24 = var21.arity();
    org.jtuples.Pair var27 = new org.jtuples.Pair();
    org.jtuples.Sextuple var28 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var29 = new org.jtuples.Sextuple();
    java.lang.String var30 = var29.toString();
    org.jtuples.Sextuple var31 = var29.invert();
    org.jtuples.Quadruple var32 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var27, (java.lang.Object)var28, (java.lang.Object)var29);
    java.lang.Object var33 = var29.third();
    org.jtuples.Nonuple var34 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var36 = var34.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var37 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var39 = var37.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var40 = var34.shiftRight((java.lang.Object)var39);
    org.jtuples.Sextuple var41 = var29.shiftLeft((java.lang.Object)var40);
    org.jtuples.Sextuple var42 = var41.shiftRight();
    org.jtuples.Quintuple var43 = new org.jtuples.Quintuple((java.lang.Object)var16, (java.lang.Object)var20, (java.lang.Object)var24, (java.lang.Object)'#', (java.lang.Object)var42);
    org.jtuples.Quintuple var44 = var0.shiftLeft((java.lang.Object)'#');
    org.jtuples.Quintuple var45 = var0.invert();
    org.jtuples.Quintuple var47 = var0.shiftLeft((java.lang.Object)(-1L));
    int var48 = var0.arity();
    java.lang.Object var49 = var0.fifth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(null, null, null, null, null, null)"+ "'", var6.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(null, null, null, null, null, null)"+ "'", var19.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(null, null, null, null, null, null)"+ "'", var30.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test498");


    org.jtuples.Quintuple var0 = new org.jtuples.Quintuple();
    org.jtuples.Pair var2 = new org.jtuples.Pair();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var4 = new org.jtuples.Sextuple();
    java.lang.String var5 = var4.toString();
    org.jtuples.Sextuple var6 = var4.invert();
    org.jtuples.Quadruple var7 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var2, (java.lang.Object)var3, (java.lang.Object)var4);
    int var8 = var7.arity();
    org.jtuples.Quadruple var9 = var7.invert();
    org.jtuples.Septuple var10 = new org.jtuples.Septuple();
    java.lang.Object var11 = var10.fifth();
    java.lang.Object var12 = var10.fifth();
    java.lang.Object var13 = var10.sixth();
    java.lang.Object var14 = var10.seventh();
    java.lang.Object var15 = var10.fifth();
    org.jtuples.Quadruple var16 = var9.shiftRight((java.lang.Object)var10);
    org.jtuples.Quintuple var17 = var0.shiftRight((java.lang.Object)var16);
    org.jtuples.Quintuple var18 = var17.shiftRight();
    org.jtuples.Pair var20 = new org.jtuples.Pair();
    org.jtuples.Sextuple var21 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var22 = new org.jtuples.Sextuple();
    java.lang.String var23 = var22.toString();
    org.jtuples.Sextuple var24 = var22.invert();
    org.jtuples.Quadruple var25 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var20, (java.lang.Object)var21, (java.lang.Object)var22);
    java.lang.Object var26 = var22.third();
    org.jtuples.Nonuple var27 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var29 = var27.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var30 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var32 = var30.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var33 = var27.shiftRight((java.lang.Object)var32);
    org.jtuples.Sextuple var34 = var22.shiftLeft((java.lang.Object)var33);
    org.jtuples.Sextuple var35 = var34.shiftRight();
    org.jtuples.Sextuple var36 = var34.invert();
    boolean var37 = var17.equals((java.lang.Object)var34);
    java.lang.Object var38 = var34.third();
    java.lang.Object var39 = var34.first();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(null, null, null, null, null, null)"+ "'", var5.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(null, null, null, null, null, null)"+ "'", var23.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test499");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    java.lang.Object var7 = var3.third();
    org.jtuples.Nonuple var8 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var10 = var8.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var11 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var13 = var11.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var14 = var8.shiftRight((java.lang.Object)var13);
    org.jtuples.Sextuple var15 = var3.shiftLeft((java.lang.Object)var14);
    org.jtuples.Sextuple var16 = var15.shiftRight();
    org.jtuples.Pair var17 = new org.jtuples.Pair();
    java.lang.Object[] var18 = var17.toArray();
    org.jtuples.Pair var19 = var17.invert();
    org.jtuples.Septuple var20 = new org.jtuples.Septuple();
    java.lang.Object var21 = var20.fifth();
    org.jtuples.Septuple var22 = var20.shiftRight();
    java.lang.Object var23 = var22.sixth();
    org.jtuples.Triple var24 = new org.jtuples.Triple((java.lang.Object)var16, (java.lang.Object)var17, (java.lang.Object)var22);
    java.lang.Object var25 = var24.second();
    org.jtuples.Triple var27 = var24.shiftLeft((java.lang.Object)(-1.0f));
    org.jtuples.Septuple var28 = new org.jtuples.Septuple();
    java.lang.Object var29 = var28.fifth();
    org.jtuples.Triple var30 = var24.shiftLeft((java.lang.Object)var28);
    java.lang.Object var31 = var28.first();
    org.jtuples.Septuple var32 = var28.shiftRight();
    org.jtuples.Septuple var33 = var28.invert();
    org.jtuples.Septuple var34 = var28.invert();
    int var35 = var28.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 7);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test500");


    org.jtuples.Pair var1 = new org.jtuples.Pair();
    org.jtuples.Sextuple var2 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var3 = new org.jtuples.Sextuple();
    java.lang.String var4 = var3.toString();
    org.jtuples.Sextuple var5 = var3.invert();
    org.jtuples.Quadruple var6 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var1, (java.lang.Object)var2, (java.lang.Object)var3);
    int var7 = var6.arity();
    org.jtuples.Quadruple var8 = var6.invert();
    java.lang.Object var9 = var6.fourth();
    org.jtuples.Quadruple var10 = var6.invert();
    org.jtuples.Quadruple var11 = var10.shiftRight();
    org.jtuples.Septuple var14 = new org.jtuples.Septuple();
    java.lang.Object var15 = var14.fifth();
    java.lang.Object var16 = var14.fifth();
    org.jtuples.Sextuple var20 = new org.jtuples.Sextuple();
    org.jtuples.Septuple var21 = new org.jtuples.Septuple((java.lang.Object)(byte)(-1), (java.lang.Object)false, (java.lang.Object)var14, (java.lang.Object)1L, (java.lang.Object)' ', (java.lang.Object)(-1L), (java.lang.Object)var20);
    java.lang.Object var22 = var14.seventh();
    org.jtuples.Septuple var24 = var14.shiftRight((java.lang.Object)(byte)0);
    org.jtuples.Septuple var25 = var24.invert();
    org.jtuples.Nonuple var26 = new org.jtuples.Nonuple();
    int var27 = var26.arity();
    java.lang.Object var28 = var26.third();
    int var29 = var26.arity();
    org.jtuples.Pair var32 = new org.jtuples.Pair();
    org.jtuples.Sextuple var33 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var34 = new org.jtuples.Sextuple();
    java.lang.String var35 = var34.toString();
    org.jtuples.Sextuple var36 = var34.invert();
    org.jtuples.Quadruple var37 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var32, (java.lang.Object)var33, (java.lang.Object)var34);
    int var38 = var37.arity();
    org.jtuples.Quadruple var39 = var37.invert();
    java.lang.Object[] var40 = var39.toArray();
    org.jtuples.Pair var42 = new org.jtuples.Pair();
    org.jtuples.Sextuple var43 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var44 = new org.jtuples.Sextuple();
    java.lang.String var45 = var44.toString();
    org.jtuples.Sextuple var46 = var44.invert();
    org.jtuples.Quadruple var47 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var42, (java.lang.Object)var43, (java.lang.Object)var44);
    java.lang.Object var48 = var43.sixth();
    java.lang.Object var49 = var43.fifth();
    org.jtuples.Sextuple var50 = var43.shiftRight();
    org.jtuples.Pair var53 = new org.jtuples.Pair();
    org.jtuples.Sextuple var54 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var55 = new org.jtuples.Sextuple();
    java.lang.String var56 = var55.toString();
    org.jtuples.Sextuple var57 = var55.invert();
    org.jtuples.Quadruple var58 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var53, (java.lang.Object)var54, (java.lang.Object)var55);
    java.lang.Object var59 = var55.third();
    org.jtuples.Nonuple var60 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var62 = var60.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var63 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var65 = var63.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var66 = var60.shiftRight((java.lang.Object)var65);
    org.jtuples.Sextuple var67 = var55.shiftLeft((java.lang.Object)var66);
    java.lang.Object[] var68 = var66.toArray();
    org.jtuples.Decuple var69 = new org.jtuples.Decuple();
    java.lang.Object var70 = var69.ninth();
    org.jtuples.Decuple var71 = new org.jtuples.Decuple();
    java.lang.Object var72 = var71.sixth();
    org.jtuples.Nonuple var73 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var74 = var73.shiftLeft();
    org.jtuples.Decuple var76 = new org.jtuples.Decuple((java.lang.Object)var29, (java.lang.Object)(byte)1, (java.lang.Object)var40, (java.lang.Object)var43, (java.lang.Object)true, (java.lang.Object)var68, (java.lang.Object)var69, (java.lang.Object)var71, (java.lang.Object)var73, (java.lang.Object)9);
    org.jtuples.Pair var78 = new org.jtuples.Pair();
    org.jtuples.Sextuple var79 = new org.jtuples.Sextuple();
    org.jtuples.Sextuple var80 = new org.jtuples.Sextuple();
    java.lang.String var81 = var80.toString();
    org.jtuples.Sextuple var82 = var80.invert();
    org.jtuples.Quadruple var83 = new org.jtuples.Quadruple((java.lang.Object)(-1L), (java.lang.Object)var78, (java.lang.Object)var79, (java.lang.Object)var80);
    org.jtuples.Pair var84 = var78.shiftLeft();
    org.jtuples.Decuple var85 = var71.shiftRight((java.lang.Object)var84);
    org.jtuples.Septuple var86 = var24.shiftRight((java.lang.Object)var85);
    org.jtuples.Nonuple var87 = new org.jtuples.Nonuple();
    int var88 = var87.arity();
    org.jtuples.Nonuple var89 = var87.shiftLeft();
    org.jtuples.Nonuple var90 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var92 = var90.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var93 = new org.jtuples.Nonuple();
    org.jtuples.Nonuple var95 = var93.shiftRight((java.lang.Object)(byte)100);
    org.jtuples.Nonuple var96 = var90.shiftRight((java.lang.Object)var95);
    boolean var97 = var89.equals((java.lang.Object)var95);
    org.jtuples.Triple var98 = new org.jtuples.Triple((java.lang.Object)var10, (java.lang.Object)var86, (java.lang.Object)var89);
    int var99 = var10.arity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(null, null, null, null, null, null)"+ "'", var4.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(null, null, null, null, null, null)"+ "'", var35.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(null, null, null, null, null, null)"+ "'", var45.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(null, null, null, null, null, null)"+ "'", var56.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(null, null, null, null, null, null)"+ "'", var81.equals("(null, null, null, null, null, null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 4);

  }

}
